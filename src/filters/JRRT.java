package filters;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;

import saferefactor.core.analysis.safira.analyzer.ImpactAnalysis;
import saferefactor.core.analysis.safira.entity.Class;
import saferefactor.core.analysis.safira.entity.Method;


public class JRRT {
		
	ImpactAnalysis ia;
	int sub;
	
	public final String PUSH_DOWN_METHOD = "m_0";
	
	List<Integer> introduceImplicitCast = new ArrayList<Integer>();
	List<Integer> removeImplicitCast = new ArrayList<Integer>();
	List<Integer> enableOverloading = new ArrayList<Integer>();
	List<Integer> enableOverriding = new ArrayList<Integer>();
	List<Integer> enableOverloadingWithoutShadow = new ArrayList<Integer>();
	List<Integer> enableOverridingWithoutShadow = new ArrayList<Integer>();
	List<Integer> outros = new ArrayList<Integer>();
	
	public void calculate(ImpactAnalysis ia, int sub) {
		
		this.ia = ia;
		
//		if(introduceImplicitCast()) {
//			introduceImplicitCast.add(sub);
//		}
//		if(removeImplicitCast()) {
//			removeImplicitCast.add(sub);
//		}
		
		if (enableOverloading()) {
			enableOverloading.add(sub);
		} else if (enableOverriding()) {
			enableOverriding.add(sub);
		} else if(introduceImplicitCast()) {
			introduceImplicitCast.add(sub);
		} else if(removeImplicitCast()) {
			removeImplicitCast.add(sub);
		} else if(enableOverloadingWithoutShadowDeclaration()) {
			enableOverloadingWithoutShadow.add(sub);
		} else if(enableOverridingWithoutShadowDeclaration()) {
			enableOverridingWithoutShadow.add(sub);
		} else {
			outros.add(sub);
		}
	}
	
	//with shadow declaration
		public boolean enableOverloading() {
			
			HashMap<String, Class> sourceClassess = ia.getSourceClassess();
			
			Class superClass = null;
			Class subClass1 = null;
			Class subClass2 = null;
			
			for (Class c : sourceClassess.values()) {
				if (hasSuperClass(c)) {
					if (subClass1 == null) {
						subClass1 = c;
					} else {
						subClass2 = c;
					}
				} else {
					superClass = c;
				}
			}
			
			//duas classes estendem uma classe
			if (subClass2 != null && superClass != null) {
				if (subClass1.getSimpleName().equals(subClass2.getSimpleName())) {
					
					Method sameMethod = getSameMethod(superClass, subClass1); 
					Class sameMethodSubClass = null;
					if (sameMethod != null) {
						sameMethodSubClass = subClass1; 
					} else {
						sameMethod = getSameMethod(superClass, subClass2);
						if (sameMethod != null) {
							sameMethodSubClass = subClass2;
						}
					}
					//uma das classes tem um metodo com o mesmo nome da superclasse 
					if (sameMethodSubClass != null) {
						
						//as classes que tem o mesmo metodo est‹o em pacotes diferentes
						if (!sameMethodSubClass.getPackage().equals(superClass.getPackage())) {
						
							List<Method> methods = superClass.getMethods();
							for (Method method : methods) {
								//verificando se tem algum metodo da superclasse que chama o metodo que tem o mesmo nome da subclasse
								if (!method.getSimpleName().equals(sameMethod.getSimpleName())) {
									List<Method> methodInvoc = method.getMethodInvoc();
									for (Method mi : methodInvoc) {
										if (mi.getSimpleName().equals(sameMethod.getSimpleName())) {
											return hasNewCall(method) && !mi.getParametersSignature().equals("");
										}
									}
								}
							}
						}
						
					}
				}
			}
			return false;
		}
		
		
		//with shadow declaration
		public boolean enableOverriding() {
			
			HashMap<String, Class> sourceClassess = ia.getSourceClassess();
			
			Class superClass = null;
			Class subClass1 = null;
			Class subClass2 = null;
			
			for (Class c : sourceClassess.values()) {
				if (hasSuperClass(c)) {
					if (subClass1 == null) {
						subClass1 = c;
					} else {
						subClass2 = c;
					}
				} else {
					superClass = c;
				}
			}
			
			//duas classes estendem uma classe
			if (subClass2 != null && superClass != null) {
				if (subClass1.getSimpleName().equals(subClass2.getSimpleName())) {
					
					Method sameMethod = getSameMethod(superClass, subClass1); 
					Class sameMethodSubClass = null;
					if (sameMethod != null) {
						sameMethodSubClass = subClass1; 
					} else {
						sameMethod = getSameMethod(superClass, subClass2);
						if (sameMethod != null) {
							sameMethodSubClass = subClass2;
						}
					}
					//uma das classes tem um metodo com o mesmo nome da superclasse 
					if (sameMethodSubClass != null) {
						
						//as classes que tem o mesmo metodo est‹o em pacotes diferentes
						if (!sameMethodSubClass.getPackage().equals(superClass.getPackage())) {
						
							List<Method> methods = superClass.getMethods();
							for (Method method : methods) {
								//verificando se tem algum metodo da superclasse que chama o metodo que tem o mesmo nome da subclasse
								if (!method.getSimpleName().equals(sameMethod.getSimpleName())) {
									List<Method> methodInvoc = method.getMethodInvoc();
									for (Method mi : methodInvoc) {
										if (mi.getSimpleName().equals(sameMethod.getSimpleName())) {
											return hasNewCall(method) && mi.getParametersSignature().equals("");
										}
									}
								}
							}
						}
						
					}
				}
			}
			return false;
		}
		
		//without shadow declaration
		public boolean enableOverridingWithoutShadowDeclaration() {
			
			HashMap<String, Class> sourceClassess = ia.getSourceClassess();
			Collection<Class> sc1 = sourceClassess.values();
			Collection<Class> sc2 = sourceClassess.values();
			
			boolean overridingMethod = false;
			
			for (Class c1 : sc1) {
				if (overridingMethod) break;
				for (Class c2 : sc2) {
					if (!c1.getFullName().equals(c2.getFullName())) {
						overridingMethod = verifyOverridingMethod(c1,c2);
						if (overridingMethod) break;
					}
				}
			}
			if (overridingMethod) {
				HashMap<String, Method> sourceMethodss = ia.getSourceMethodss();
				for (Method m : sourceMethodss.values()) {
					if (m.getSimpleName().equals(PUSH_DOWN_METHOD) && !m.isInherited()) {
//						if (!hasNewCall(m)) {
							return true;
//						}
					}
				}
			}
			return false;
		}
		
		//without shadow declaration
		public boolean enableOverloadingWithoutShadowDeclaration() {
			
			HashMap<String, Class> sourceClassess = ia.getSourceClassess();
			Collection<Class> sc1 = sourceClassess.values();
			Collection<Class> sc2 = sourceClassess.values();
			
			boolean overloadingMethod = false;
			
			for (Class c1 : sc1) {
				if (overloadingMethod) {
					break;
				}
				for (Class c2 : sc2) {
					if (!c1.getFullName().equals(c2.getFullName())) {
						overloadingMethod = verifyOverloadingMethod(c1,c2);
						if (overloadingMethod) {
							break;
						}
					}
				}
			}
			if (overloadingMethod) {
				HashMap<String, Method> sourceMethodss = ia.getSourceMethodss();
				for (Method m : sourceMethodss.values()) {
					if (m.getSimpleName().equals(PUSH_DOWN_METHOD) && !m.isInherited()) {
//						if (!hasNewCall(m)) {
							return true;
//						}
					}
				}
			}
			return false;
		}
		
		
		private boolean verifyOverridingMethod(Class c1, Class c2) {
			
			List<Method> methods1 = c1.getMethods();
			List<Method> methods2 = c2.getMethods();
			
			for (Method m1 : methods1) {
				for (Method m2 : methods2) {
					if (m1.getSimpleName().equals(m2.getSimpleName()) &&
							!m1.isInherited() && !m2.isInherited() &&
							!m1.getFullName().equals(m2.getFullName()) &&
							m1.getParametersSignature().equals(m2.getParametersSignature())) {
						return true;
					}
				}
			}
			return false;
		}
		
	private boolean verifyOverloadingMethod(Class c1, Class c2) {
			
			List<Method> methods1 = c1.getMethods();
			List<Method> methods2 = c2.getMethods();
			
			for (Method m1 : methods1) {
				for (Method m2 : methods2) {
					if (m1.getSimpleName().equals(m2.getSimpleName()) &&
							!m1.isInherited() && !m2.isInherited() &&
							!m1.getFullName().equals(m2.getFullName()) &&
							!m1.getParametersSignature().equals(m2.getParametersSignature())) {
						return true;
					}
				}
			}
			return false;
		}
	
		public boolean removeImplicitCast() {
			
			HashMap<String, Method> sourceMethodss = ia.getSourceMethodss();
			
			for (Method m : sourceMethodss.values()) {
				if (m.getSimpleName().equals(PUSH_DOWN_METHOD)) {
					List<Method> methodInvoc = m.getMethodInvoc();
					for (Method mi : methodInvoc) {
						if (mi.getParametersSignature().contains("long")) {
							return true;
						}
					}
				}
			}
			
			return false;
		}
		
	public boolean introduceImplicitCast() {
			
			HashMap<String, Method> sourceMethodss = ia.getSourceMethodss();
			
			for (Method m : sourceMethodss.values()) {
				if (m.getSimpleName().equals(PUSH_DOWN_METHOD)) {
					List<Method> methodInvoc = m.getMethodInvoc();
					for (Method mi : methodInvoc) {
						if (mi.getParametersSignature().contains("int") ) {
							return true;
						}
					}
				}
			}
			
			return false;
		}

		public boolean hasNewCall(Method m) {
			List<Object> text = m.getText();
			for (Object object : text) {
				if (object.toString().contains("INVOKESPECIAL") && 
						object.toString().contains("<init>")) {
					return true;
				}
			}
			return false;
		}
		
		public boolean hasSuperClass(Class c) {
			return !c.getSuperClass().contains("java.lang.Object"); 
		}
		
		public Method getSameMethod(Class c1, Class c2) {
			List<Method> methods1 = c1.getMethods();
			List<Method> methods2 = c2.getMethods();
			
			for (Method m1 : methods1) {
				for (Method m2 : methods2) {
					if (m1.getSimpleName().equals(m2.getSimpleName())) {
						return m1;
					}
				}
			}
			return null;
			
		}
		
		public static void main(String[] args) throws IOException {
			JRRT jrrt = new JRRT();
			int skip = 1;
			String path = "/Users/melmongiovi/Documents/doutorado/experimentos/jrrt3/pushdownmethod/skip"+skip+"/";
			
			//skip20
			//int [] bc = {178, 181, 191};
			
			
			int [] np = {61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 591, 739, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 2316, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557, 2566, 2568, 2569, 2571, 2572, 2573, 2580, 2581, 2582, 2584, 2585, 2586, 2587, 2591, 2593, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2710, 2711, 2712, 2713, 2723, 2724, 2725, 2726, 2731, 2732, 2733, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2854, 2857, 2862, 2863, 2864, 2870, 2875, 2876, 2877, 2879, 2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890, 2891, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2982, 2983, 2984, 2985, 2986, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3174, 3180, 3189, 3198, 3211, 3213, 3215, 3217, 3220, 3222, 3226, 3231, 3232, 3246, 3248, 3255, 3262, 3278, 3287, 3294, 3304, 3310, 3311, 3313, 3319, 3320, 3322, 3327, 3328, 3337, 3343, 3352, 3358, 3561, 3565, 3576, 3582, 3584, 3590, 3591, 3597, 3600, 3609, 3615, 3617, 3623, 3624, 3629, 3632, 3647, 3649, 3655, 3656, 3664, 3674, 3683, 3696, 3698, 3700, 3702, 3705, 3707, 3711, 3716, 3717, 3728, 3731, 3737, 3743, 3757, 3760, 3769, 3775, 3777, 3783, 3784, 3790, 3793, 3802, 3808, 3810, 3816, 3817, 3823, 3824, 3838, 3839, 3845, 3846, 3850, 3851, 3856, 3865, 3872, 3874, 3880, 3881, 3884, 3889, 3898, 3905, 3907, 3913, 3914, 3918, 3933, 3934, 3940, 3941, 3944, 3947, 3949, 3951, 3953, 3956, 3958, 3962, 3965, 3967, 3968, 3970, 3973, 3974, 3975, 3977, 3980, 3982, 3984, 3986, 3989, 3991, 3995, 3998, 4000, 4001, 4003, 4006, 4007, 4008, 4010, 4015, 4017, 4030, 4031, 4034, 4037, 4038, 4039, 4041, 4044, 4047, 4048, 4050, 4056, 4057, 4059, 4062, 4064, 4065, 4067, 4070, 4071, 4072, 4074, 4077, 4080, 4081, 4083, 4089, 4090, 4092, 4095, 4097, 4098, 4100, 4103, 4104, 4105, 4107, 4110, 4112, 4126, 4127, 4130, 4133, 4134, 4135, 4137, 4140, 4142, 4144, 4146, 4149, 4151, 4155, 4158, 4160, 4161, 4163, 4166, 4167, 4168, 4170, 4173, 4175, 4177, 4179, 4182, 4184, 4188, 4191, 4193, 4194, 4196, 4199, 4200, 4201, 4203, 4207, 4209, 4222, 4223, 4226, 4229, 4230, 4231, 4233, 4236, 4239, 4240, 4242, 4248, 4249, 4251, 4254, 4256, 4257, 4259, 4262, 4263, 4264, 4266, 4269, 4272, 4273, 4275, 4281, 4282, 4284, 4287, 4289, 4290, 4292, 4295, 4296, 4297, 4299, 4302, 4304, 4318, 4319, 4322, 4325, 4326, 4327, 4329, 4335, 4336, 4338, 4344, 4345, 4347, 4352, 4353, 4355, 4359, 4360, 4362, 4368, 4369, 4371, 4377, 4378, 4380, 4385, 4386, 4388, 4392, 4393, 4395, 4401, 4410, 4418, 4421, 4425, 4426, 4428, 4431, 4433, 4435, 4437, 4440, 4442, 4446, 4449, 4451, 4452, 4454, 4457, 4458, 4459, 4461, 4464, 4466, 4468, 4470, 4473, 4475, 4479, 4482, 4484, 4485, 4487, 4490, 4491, 4492, 4494, 4496, 4499, 4509, 4510, 4513, 4516, 4517, 4518, 4520, 4521, 4527, 4528, 4530, 4536, 4537, 4539, 4544, 4545, 4547, 4551, 4552, 4559, 4560, 4562, 4568, 4569, 4571, 4576, 4577, 4579, 4583, 4584, 4586, 4591, 4599, 4606, 4609, 4613, 4614, 4616, 4617, 4621, 4623, 4625, 4627, 4630, 4632, 4636, 4641, 4642, 4644, 4648, 4649, 4654, 4658, 4661, 4663, 4667, 4672, 4673, 4675, 4679, 4680, 4686, 4688, 4694, 4704, 4708, 4709, 4710, 4880, 4882, 4888, 4890, 4895, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4970, 4971, 4972, 4974, 4975, 4976, 4984, 4987, 4988, 4989, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5068, 5069, 5070, 5076, 5080, 5083, 5084, 5085, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5131, 5135, 5137, 5140, 5146, 5152, 5222, 5229, 5231, 5238, 5240, 5246, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5351, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5492, 5493, 5494, 5495, 5496, 5497, 5498, 5499, 5500, 5501, 5502, 5503, 5504, 5505, 5506, 5507, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5634, 5635, 5636, 5637, 5638, 5639, 5640, 5641, 5642, 5643, 5644, 5645, 5646, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5766, 5767, 5768, 5769, 5770, 5771, 5772, 5773, 5774, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5791, 5792, 5793, 5794, 5795, 5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5941, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5949, 5950, 5951, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 6055, 6056, 6057, 6058, 6059, 6060, 6061, 6062, 6063, 6064, 6065, 6066, 6067, 6068, 6069, 6070, 6071, 6072, 6073, 6074, 6075, 6076, 6077, 6078, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6086, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6095, 6096, 6097, 6098, 6099, 6100, 6101, 6102, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6206, 6207, 6208, 6209, 6210, 6211, 6212, 6213, 6214, 6215, 6216, 6217, 6218, 6219, 6220, 6221, 6222, 6223, 6224, 6225, 6226, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6235, 6236, 6237, 6238, 6239, 6240, 6241, 6242, 6243, 6244, 6245, 6343, 6344, 6345, 6346, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6355, 6356, 6357, 6358, 6359, 6360, 6361, 6362, 6363, 6364, 6365, 6366, 6367, 6368, 6369, 6370, 6371, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6487, 6488, 6489, 6490, 6491, 6492, 6493, 6494, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6502, 6503, 6504, 6505, 6506, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6515, 6516, 6517, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533, 6534, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6643, 6644, 6645, 6646, 6647, 6648, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6774, 6775, 6776, 6777, 6778, 6779, 6780, 6781, 6782, 6783, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6791, 6792, 6793, 6794, 6795, 6796, 6797, 6798, 6799, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6809, 6810, 6811, 6812, 6813, 6814, 6815, 6816, 6817, 6818, 6819, 6820, 6821, 6919, 6920, 6921, 6922, 6923, 6924, 6925, 6926, 6927, 6928, 6929, 6930, 6931, 6932, 6933, 6934, 6935, 6936, 6937, 6938, 6939, 6940, 6941, 6942, 6943, 6944, 6945, 6946, 6947, 6948, 6949, 6950, 6951, 6952, 6953, 6954, 6955, 6956, 6957, 6958, 6959, 6960, 6961, 6962, 6963, 6964, 6965, 6966, 7064, 7065, 7066, 7067, 7068, 7069, 7070, 7071, 7072, 7073, 7074, 7075, 7076, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7085, 7086, 7087, 7088, 7089, 7090, 7091, 7092, 7093, 7094, 7095, 7096, 7097, 7098, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7106, 7107, 7108, 7109, 7110, 7111, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7213, 7214, 7215, 7216, 7217, 7218, 7219, 7220, 7221, 7222, 7223, 7224, 7225, 7226, 7227, 7228, 7229, 7230, 7231, 7232, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240, 7241, 7242, 7243, 7244, 7245, 7246, 7247, 7248, 7249, 7250, 7251, 7252, 7253, 7351, 7352, 7353, 7354, 7355, 7356, 7357, 7358, 7359, 7360, 7361, 7362, 7363, 7364, 7365, 7366, 7367, 7368, 7369, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7380, 7381, 7382, 7383, 7384, 7385, 7386, 7387, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7395, 7396, 7397, 7398, 7494, 7495, 7496, 7497, 7498, 7499, 7500, 7501, 7502, 7503, 7504, 7505, 7506, 7507, 7508, 7509, 7510, 7511, 7512, 7513, 7514, 7515, 7516, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7524, 7525, 7526, 7527, 7528, 7529, 7530, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7539, 7540, 7541, 7591, 7592, 7593, 7595, 7596, 7597, 7599, 7601, 7602, 7604, 7606, 7607, 7608, 7610, 7611, 7612, 7614, 7616, 7617, 7618, 7620, 7621, 7622, 7624, 7699, 7713, 7730, 7741, 7744, 7756, 7759, 7761, 7762, 7763, 7765, 7766, 7767, 7769, 7771, 7772, 7775, 7776, 7777, 7779, 7780, 7781, 7784, 7785, 7786, 7787, 7789, 7790, 7791, 7793, 7988, 8001, 8018, 8030, 8033, 8046, 8169, 8170, 8171, 8173, 8174, 8175, 8177, 8179, 8192, 8194, 8195, 8196, 8198, 8199, 8200, 8202, 8277, 8290, 8322, 8335, 8339, 8340, 8341, 8343, 8344, 8345, 8347, 8349, 8361, 8363, 8364, 8365, 8367, 8368, 8369, 8371, 8564, 8577, 8609, 8622, 8937, 8938, 8939, 8940, 8941, 8942, 8943, 8944, 8945, 8946, 8947, 8948, 8949, 8950, 8951, 8952, 8953, 8954, 8955, 8956, 8957, 8958, 8959, 8960, 8961, 8962, 8963, 8964, 8965, 8966, 8967, 8968, 8969, 8970, 8971, 8972, 8973, 8974, 8975, 8976, 8977, 8978, 8979, 8980, 8981, 8982, 8983, 8984, 9080, 9081, 9082, 9083, 9084, 9085, 9086, 9087, 9088, 9089, 9090, 9091, 9092, 9093, 9094, 9095, 9096, 9097, 9098, 9099, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107, 9108, 9109, 9110, 9111, 9112, 9113, 9114, 9115, 9116, 9117, 9118, 9119, 9120, 9121, 9122, 9123, 9124, 9125, 9126, 9127, 9224, 9225, 9226, 9227, 9228, 9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237, 9238, 9239, 9240, 9241, 9242, 9243, 9244, 9245, 9246, 9247, 9248, 9249, 9250, 9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258, 9259, 9260, 9261, 9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269, 9270, 9271, 9511, 9512, 9513, 9514, 9515, 9516, 9517, 9518, 9519, 9520, 9521, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 9529, 9530, 9531, 9532, 9533, 9534, 9535, 9536, 9537, 9538, 9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547, 9548, 9549, 9550, 9551, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9799, 9800, 9801, 9802, 9803, 9804, 9805, 9806, 9807, 9808, 9809, 9810, 9811, 9812, 9813, 9814, 9815, 9816, 9817, 9818, 9819, 9820, 9821, 9822, 9823, 9824, 9825, 9826, 9827, 9828, 9829, 9830, 9831, 9832, 9833, 9834, 9835, 9836, 9837, 9838, 9839, 9840, 9841, 9842, 9843, 9844, 9845, 9846, 9943, 9944, 9945, 9946, 9947, 9948, 9949, 9950, 9951, 9952, 9953, 9954, 9955, 9956, 9957, 9958, 9959, 9960, 9961, 9962, 9963, 9964, 9965, 9966, 9967, 9968, 9969, 9970, 9971, 9972, 9973, 9974, 9975, 9976, 9977, 9978, 9979, 9980, 9981, 9982, 9983, 9984, 9985, 9986, 9987, 9988, 9989, 9990, 10088, 10089, 10090, 10091, 10092, 10093, 10094, 10095, 10096, 10097, 10098, 10099, 10100, 10101, 10102, 10103, 10104, 10105, 10106, 10107, 10108, 10109, 10110, 10111, 10112, 10113, 10114, 10115, 10116, 10117, 10118, 10119, 10120, 10121, 10122, 10123, 10124, 10125, 10126, 10127, 10128, 10129, 10130, 10131, 10132, 10133, 10134, 10135, 10374, 10375, 10376, 10377, 10378, 10379, 10380, 10381, 10382, 10383, 10384, 10385, 10386, 10387, 10388, 10389, 10390, 10391, 10392, 10393, 10394, 10395, 10396, 10397, 10398, 10399, 10400, 10401, 10402, 10403, 10404, 10405, 10406, 10407, 10408, 10409, 10410, 10411, 10412, 10413, 10414, 10415, 10416, 10417, 10418, 10419, 10420, 10421, 10663, 10664, 10665, 10666, 10667, 10668, 10669, 10670, 10671, 10672, 10673, 10674, 10675, 10676, 10677, 10678, 10679, 10680, 10681, 10682, 10683, 10684, 10685, 10686, 10687, 10688, 10689, 10690, 10691, 10692, 10693, 10694, 10695, 10696, 10697, 10698, 10699, 10700, 10701, 10702, 10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10952, 10953, 10954, 10955, 10956, 10957, 10958, 10959, 10960, 10961, 10962, 10963, 10964, 10965, 10966, 10967, 10968, 10969, 10970, 10971, 10972, 10973, 10974, 10975, 10976, 10977, 10978, 10979, 10980, 10981, 10982, 10983, 10984, 10985, 10986, 10987, 10988, 10989, 10990, 10991, 10992, 10993, 10994, 10995, 10996, 10997, 10998, 10999, 11096, 11097, 11098, 11099, 11100, 11101, 11102, 11103, 11104, 11105, 11106, 11107, 11108, 11109, 11110, 11111, 11112, 11113, 11114, 11115, 11116, 11117, 11118, 11119, 11120, 11121, 11122, 11123, 11124, 11125, 11126, 11127, 11128, 11129, 11130, 11131, 11132, 11133, 11134, 11135, 11136, 11137, 11138, 11139, 11140, 11141, 11142, 11143, 11240, 11241, 11242, 11243, 11244, 11245, 11246, 11247, 11248, 11249, 11250, 11251, 11252, 11253, 11254, 11255, 11256, 11257, 11258, 11259, 11260, 11261, 11262, 11263, 11264, 11265, 11266, 11267, 11268, 11269, 11270, 11271, 11272, 11273, 11274, 11275, 11276, 11277, 11278, 11279, 11280, 11281, 11282, 11283, 11284, 11285, 11286, 11287, 11385, 11386, 11387, 11388, 11389, 11390, 11391, 11392, 11393, 11394, 11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11403, 11404, 11405, 11406, 11407, 11408, 11409, 11410, 11411, 11412, 11413, 11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421, 11422, 11423, 11424, 11425, 11426, 11427, 11428, 11429, 11430, 11431, 11432, 11530, 11531, 11532, 11533, 11534, 11535, 11536, 11537, 11538, 11539, 11540, 11541, 11542, 11543, 11544, 11545, 11546, 11547, 11548, 11549, 11550, 11551, 11552, 11553, 11554, 11555, 11556, 11557, 11558, 11559, 11560, 11561, 11562, 11563, 11564, 11565, 11566, 11567, 11568, 11569, 11570, 11571, 11572, 11573, 11574, 11575, 11576, 11577, 11674, 11675, 11676, 11677, 11678, 11679, 11680, 11681, 11682, 11683, 11684, 11685, 11686, 11687, 11688, 11689, 11690, 11691, 11692, 11693, 11694, 11695, 11696, 11697, 11698, 11699, 11700, 11701, 11702, 11703, 11704, 11705, 11706, 11707, 11708, 11709, 11710, 11711, 11712, 11713, 11714, 11715, 11716, 11717, 11718, 11719, 11720, 11721, 11819, 11820, 11821, 11822, 11823, 11824, 11825, 11826, 11827, 11828, 11829, 11830, 11831, 11832, 11833, 11834, 11835, 11836, 11837, 11838, 11839, 11840, 11841, 11842, 11843, 11844, 11845, 11846, 11847, 11848, 11849, 11850, 11851, 11852, 11853, 11854, 11855, 11856, 11857, 11858, 11859, 11860, 11861, 11862, 11863, 11864, 11865, 11866, 11963, 11964, 11965, 11966, 11967, 11968, 11969, 11970, 11971, 11972, 11973, 11974, 11975, 11976, 11977, 11978, 11979, 11980, 11981, 11982, 11983, 11984, 11985, 11986, 11987, 11988, 11989, 11990, 11991, 11992, 11993, 11994, 11995, 11996, 11997, 11998, 11999, 12000, 12001, 12002, 12003, 12004, 12005, 12006, 12007, 12008, 12009, 12010, 12106, 12107, 12108, 12109, 12110, 12111, 12112, 12113, 12114, 12115, 12116, 12117, 12118, 12119, 12120, 12121, 12122, 12123, 12124, 12125, 12126, 12127, 12128, 12129, 12130, 12131, 12132, 12133, 12134, 12135, 12136, 12137, 12138, 12139, 12140, 12141, 12142, 12143, 12144, 12145, 12146, 12147, 12148, 12149, 12150, 12151, 12152, 12153, 12201, 12202, 12203, 12205, 12206, 12207, 12209, 12211, 12224, 12226, 12227, 12228, 12230, 12231, 12232, 12234, 12309, 12320, 12323, 12354, 12364, 12367, 12371, 12372, 12373, 12375, 12376, 12377, 12379, 12381, 12393, 12395, 12396, 12397, 12399, 12400, 12401, 12403, 12597, 12607, 12610, 12642, 12652, 12655, 12971, 12972, 12973, 12974, 12975, 12976, 12977, 12978, 12979, 12980, 12981, 12982, 12983, 12984, 12985, 12986, 12987, 12988, 12989, 12990, 12991, 12992, 12993, 12994, 12995, 12996, 12997, 12998, 12999, 13000, 13001, 13002, 13003, 13004, 13005, 13006, 13007, 13008, 13009, 13010, 13011, 13012, 13013, 13014, 13015, 13016, 13017, 13018, 13115, 13116, 13117, 13118, 13119, 13120, 13121, 13122, 13123, 13124, 13125, 13126, 13127, 13128, 13129, 13130, 13131, 13132, 13133, 13134, 13135, 13136, 13137, 13138, 13139, 13140, 13141, 13142, 13143, 13144, 13145, 13146, 13147, 13148, 13149, 13150, 13151, 13152, 13153, 13154, 13155, 13156, 13157, 13158, 13159, 13160, 13161, 13162, 13260, 13261, 13262, 13263, 13264, 13265, 13266, 13267, 13268, 13269, 13270, 13271, 13272, 13273, 13274, 13275, 13276, 13277, 13278, 13279, 13280, 13281, 13282, 13283, 13284, 13285, 13286, 13287, 13288, 13289, 13290, 13291, 13292, 13293, 13294, 13295, 13296, 13297, 13298, 13299, 13300, 13301, 13302, 13303, 13304, 13305, 13306, 13307, 13544, 13545, 13546, 13547, 13548, 13549, 13550, 13551, 13552, 13553, 13554, 13555, 13556, 13557, 13558, 13559, 13560, 13561, 13562, 13563, 13564, 13565, 13566, 13567, 13568, 13569, 13570, 13571, 13572, 13573, 13574, 13575, 13576, 13577, 13578, 13579, 13580, 13581, 13582, 13583, 13584, 13585, 13586, 13587, 13588, 13589, 13590, 13591, 13829, 13830, 13831, 13832, 13833, 13834, 13835, 13836, 13837, 13838, 13839, 13840, 13841, 13842, 13843, 13844, 13845, 13846, 13847, 13848, 13849, 13850, 13851, 13852, 13853, 13854, 13855, 13856, 13857, 13858, 13859, 13860, 13861, 13862, 13863, 13864, 13865, 13866, 13867, 13868, 13869, 13870, 13871, 13872, 13873, 13874, 13875, 13876, 13959, 13963, 13965, 13968, 13974, 13980, 14053, 14060, 14062, 14069, 14071, 14077, 14152, 14156, 14158, 14161, 14167, 14173, 14245, 14252, 14254, 14261, 14263, 14269, 14344, 14348, 14350, 14353, 14359, 14365, 14441, 14445, 14447, 14450, 14456, 14462, 14534, 14541, 14543, 14550, 14552, 14558, 14630, 14637, 14639, 14646, 14648, 14654, 14729, 14733, 14735, 14738, 14744, 14750, 14825, 14829, 14831, 14834, 14840, 14846, 14918, 14925, 14927, 14934, 14936, 14942, 15014, 15021, 15023, 15030, 15032, 15038, 15114, 15118, 15120, 15123, 15129, 15135, 15205, 15212, 15214, 15221, 15223, 15229, 15305, 15309, 15311, 15314, 15320, 15326, 15397, 15404, 15406, 15413, 15415, 15421, 15461, 15464, 15466, 15477, 15485, 15487, 15558, 15562, 15563, 15605, 15607, 15610, 15846, 15849, 15851, 15862, 15870, 15872, 15943, 15947, 15948, 15975, 15991, 15993, 16230, 16248, 16256, 16334, 16361, 16377, 16558, 16562, 16564, 16567, 16573, 16579, 16657, 16659, 16662, 16749, 16753, 16755, 16758, 16764, 16770, 16943, 16945, 16948, 17022, 17026, 17034, 17049, 17143, 17147, 17161, 17167, 17172, 17198, 17200, 17205, 17323, 17327, 17329, 17332, 17338, 17344, 17415, 17420, 17424, 17429, 17433, 17438, 17516, 17520, 17522, 17525, 17531, 17537, 17606, 17611, 17624, 17626, 17702, 17707, 17711, 17716, 17720, 17722, 17772, 17783, 17791, 17998, 18000, 18001, 18078, 18080, 18088, 18108, 18184, 18188, 18199, 18204, 18279, 18283, 18285, 18288, 18294, 18296, 18382, 18385, 18387, 18479, 18485, 18486, 18575, 18578, 18580, 18672, 18675, 18677, 18768, 18774, 18775, 18864, 18870, 18871, 18961, 18964, 18966, 19055, 19061, 19062, 19113, 19136, 19207, 19257, 19826, 19829, 19831, 19912, 19917, 19921, 19926, 19930, 19935, 20019, 20022, 20024, 20196, 20201, 20205, 20210, 20214, 20216, 20487, 20491, 20493, 20496, 20502, 20507};
			
			//skip1
			int bc[] = {3205, 3234, 3238, 3239, 3265, 3269, 3270, 3301, 3330, 3334, 3335, 3361, 3365, 3366, 3560, 3594, 3601, 3612, 3618, 3620, 3625, 3652, 3657, 3690, 3719, 3723, 3724, 3746, 3750, 3751, 3787, 3794, 3805, 3811, 3813, 3818, 3820, 3842, 3847, 3849, 3887, 3891, 3902, 3908, 3910, 3915, 3937, 3942};
			
			//skip3
			//int [] bc = { 1078, 1090, 1110, 1122, 1198, 1204, 1206, 1219, 1230, 1241, 1250, 1271, 1283, 1297, 1305, 1314};
			//skip5
//			int [] bc = {641, 653, 654, 666, 667, 673, 712, 724, 725, 738, 750, 761, 764, 782, 783};
			//skip 10
			//int [] bc = {327, 333, 356, 362, 369, 375, 382, 391};
			//skip20
//			int[] bc = {178, 181, 191};
			
			System.out.println(bc.length);
			System.out.println(np.length);
			
			for (int i = 1; i <= 20544; i++) {
				String sp = path + "test"+i+"/in/";
				String tp = path + "test"+i+"/out/jrrt/";
				
				for (int j : np) {
					if (j == i) {
						jrrt.calculate(new ImpactAnalysis(sp,tp,""), i);
					}
				}
			}
			
			System.out.println("introduceImplicitCast "+jrrt.introduceImplicitCast.size());
			System.out.println(jrrt.introduceImplicitCast.toString());
			System.out.println("removeImplicitCast "+jrrt.removeImplicitCast.size());
			System.out.println(jrrt.removeImplicitCast.toString());
			System.out.println("enableOverloading "+jrrt.enableOverloading.size());
			System.out.println(jrrt.enableOverloading.toString());
			System.out.println("enableOverriding "+jrrt.enableOverriding.size());
			System.out.println(jrrt.enableOverriding.toString());
			System.out.println("enableOverloading without shadow "+jrrt.enableOverloadingWithoutShadow.size());
			System.out.println(jrrt.enableOverloadingWithoutShadow.toString());
			System.out.println("enableOverriding without shadow "+jrrt.enableOverridingWithoutShadow.size());
			System.out.println(jrrt.enableOverridingWithoutShadow.toString());
			System.out.println("Outros: "+jrrt.outros.size());
			System.out.println(jrrt.outros.toString());
			
		}
}
