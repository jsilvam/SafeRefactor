
import junit.framework.*;

public class RandoopTest3 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(RandoopTest3.class);
  }

  public void test1() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.awt.Rectangle var4 = var2.displayBox();
    org.jhotdraw.util.Bounds var5 = new org.jhotdraw.util.Bounds((java.awt.geom.Rectangle2D)var4);
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    var5.setCenter((java.awt.geom.Point2D)var9);
    double var11 = var5.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);

  }

  public void test2() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var2 = var0.getResource();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test3() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    int var36 = 1;
    int var37 = 0;
    var0.moveBy(var36, var37);
    org.jhotdraw.framework.Locator var39 = org.jhotdraw.standard.RelativeLocator.north();
    org.jhotdraw.standard.LocatorHandle var40 = new org.jhotdraw.standard.LocatorHandle((org.jhotdraw.framework.Figure)var0, var39);
    java.awt.Rectangle var41 = var0.displayBox();
    org.jhotdraw.framework.Figure var42 = var0.peelDecoration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test4() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    var0.updateUI();
    var0.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test5() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    org.jhotdraw.figures.EllipseFigure var56 = new org.jhotdraw.figures.EllipseFigure(var50, var55);
    var56.release();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test6() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.String var1 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    javax.swing.JMenu var4 = var2.createLookAndFeelMenu();
    var2.open();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    org.jhotdraw.util.UndoableAdapter var14 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var12);
    java.awt.Dimension var15 = var12.getPreferredSize();
    var2.setMinimumSize(var15);
    int var17 = 10;
    int var18 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var19 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var2, var17, var18);
    org.jhotdraw.figures.InsertImageCommand var20 = new org.jhotdraw.figures.InsertImageCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    org.jhotdraw.framework.DrawingView[] var21 = var2.views();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test7() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var1 = var0.getObservedFigure();
    java.awt.Font var2 = var0.getFont();
    org.jhotdraw.contrib.TextAreaFigure var3 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var4 = "";
    var3.setText(var4);
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var7 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var6);
    org.jhotdraw.standard.StandardDrawing var8 = new org.jhotdraw.standard.StandardDrawing();
    int var9 = var6.getLayer((org.jhotdraw.framework.Figure)var8);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    int var18 = (-1);
    int var19 = 0;
    org.jhotdraw.standard.StandardDrawingView var20 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var14, var18, var19);
    java.awt.Component var21 = var10.add((java.awt.Component)var20);
    boolean var22 = var20.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    java.awt.Dimension var26 = var23.size();
    var20.removeFromSelection((org.jhotdraw.framework.Figure)var23);
    var23.layout();
    java.lang.Object var29 = var23.clone();
    org.jhotdraw.framework.FigureChangeEvent var30 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var23);
    java.lang.Object var31 = var30.getSource();
    var8.figureInvalidated(var30);
    var3.figureChanged(var30);
    var0.connect((org.jhotdraw.framework.Figure)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test8() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    boolean var10 = var6.isEnabled();
    org.jhotdraw.samples.javadraw.JavaDrawApplet var11 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var11.start();
    org.jhotdraw.framework.Tool var13 = var11.tool();
    javax.swing.TransferHandler var14 = var11.getTransferHandler();
    java.awt.Graphics var15 = var11.getGraphics();
    java.util.Locale var16 = var11.getLocale();
    var6.setLocale(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test9() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var0.setUndecorated(var10);
    int var12 = 10;
    var0.setExtendedState(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    java.awt.Component var25 = var14.add((java.awt.Component)var24);
    org.jhotdraw.framework.Tool var26 = var24.tool();
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    var24.setVisible(var27);
    org.jhotdraw.contrib.dnd.JHDDragSourceListener var29 = new org.jhotdraw.contrib.dnd.JHDDragSourceListener((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.DrawingView)var24);
    var24.updateUI();
    var24.repairDamage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test10() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.util.collections.jdk11.ListWrapper var6 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var1);
    var1.clear();
    org.jhotdraw.contrib.GraphicalCompositeFigure var8 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var9 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var8);
    org.jhotdraw.standard.StandardDrawing var10 = new org.jhotdraw.standard.StandardDrawing();
    int var11 = var8.getLayer((org.jhotdraw.framework.Figure)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    java.awt.Component var23 = var12.add((java.awt.Component)var22);
    boolean var24 = var22.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var27 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var25, (org.jhotdraw.framework.FigureChangeListener)var26);
    java.awt.Dimension var28 = var25.size();
    var22.removeFromSelection((org.jhotdraw.framework.Figure)var25);
    var25.layout();
    java.lang.Object var31 = var25.clone();
    org.jhotdraw.framework.FigureChangeEvent var32 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var25);
    java.lang.Object var33 = var32.getSource();
    var10.figureInvalidated(var32);
    int var35 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var36 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var35);
    java.util.Iterator var37 = var36.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    boolean var40 = var38.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    int var44 = var42.getZValue();
    java.lang.Object var45 = var42.clone();
    org.jhotdraw.standard.CreationTool var46 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var38, (org.jhotdraw.framework.Figure)var42);
    int var47 = 1;
    int var48 = 0;
    org.jhotdraw.standard.StandardDrawingView var49 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var47, var48);
    boolean var50 = var36.contains((java.lang.Object)var48);
    var10.orphanAll((java.util.List)var36);
    int var52 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var53 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var52);
    boolean var54 = var36.removeAll((java.util.Collection)var53);
    boolean var55 = var1.containsAll((java.util.Collection)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test11() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.figures.TextFigure.setCurrentFontName(var0);

  }

  public void test12() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.util.Undoable var27 = var26.getUndoActivity();
    java.awt.Point var28 = var26.locate();
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.util.UndoableAdapter var37 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.html.DisposableResourceHolder var38 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var37);
    boolean var39 = var37.undo();
    java.lang.Boolean var40 = new java.lang.Boolean(true);
    var37.setUndoable(var40);
    var26.setUndoActivity((org.jhotdraw.util.Undoable)var37);
    int var43 = 1;
    int var44 = 1;
    org.jhotdraw.contrib.PolygonFigure var45 = new org.jhotdraw.contrib.PolygonFigure(var43, var44);
    org.jhotdraw.framework.FigureEnumeration var46 = var45.figures();
    var37.setAffectedFigures(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test13() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    var22.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test14() throws Throwable {

    org.jhotdraw.util.collections.jdk11.SetWrapper var0 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    org.jhotdraw.util.collections.jdk11.SetWrapper var1 = new org.jhotdraw.util.collections.jdk11.SetWrapper((java.util.Set)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = 1;
    int var4 = 1;
    org.jhotdraw.contrib.PolygonFigure var5 = new org.jhotdraw.contrib.PolygonFigure(var3, var4);
    org.jhotdraw.framework.FigureEnumeration var6 = var5.figures();
    java.awt.Rectangle var7 = var5.displayBox();
    int var8 = 1;
    int var9 = 1;
    org.jhotdraw.contrib.PolygonFigure var10 = new org.jhotdraw.contrib.PolygonFigure(var8, var9);
    org.jhotdraw.framework.FigureEnumeration var11 = var10.figures();
    java.awt.Rectangle var12 = var10.displayBox();
    org.jhotdraw.framework.Figure var13 = var2.findFigure(var7, (org.jhotdraw.framework.Figure)var10);
    int var14 = 100;
    int var15 = (-1);
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.Figure var25 = var2.findFigureInsideWithout(var14, var15, (org.jhotdraw.framework.Figure)var24);
    java.util.Iterator var26 = var2.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    java.awt.Component var38 = var27.add((java.awt.Component)var37);
    boolean var39 = var37.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var42 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var40, (org.jhotdraw.framework.FigureChangeListener)var41);
    java.awt.Dimension var43 = var40.size();
    var37.removeFromSelection((org.jhotdraw.framework.Figure)var40);
    var40.layout();
    java.lang.Object var46 = var40.clone();
    org.jhotdraw.framework.FigureChangeEvent var47 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var40);
    var2.figureRequestUpdate(var47);
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var51 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var49, (org.jhotdraw.framework.FigureChangeListener)var50);
    java.awt.Dimension var52 = var49.size();
    var2.sendToBack((org.jhotdraw.framework.Figure)var49);
    int var54 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var55 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var54);
    java.util.Iterator var56 = var55.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    boolean var59 = var57.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var60 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var62 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var60, (org.jhotdraw.framework.FigureChangeListener)var61);
    int var63 = var61.getZValue();
    java.lang.Object var64 = var61.clone();
    org.jhotdraw.standard.CreationTool var65 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var57, (org.jhotdraw.framework.Figure)var61);
    int var66 = 1;
    int var67 = 0;
    org.jhotdraw.standard.StandardDrawingView var68 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var66, var67);
    boolean var69 = var55.contains((java.lang.Object)var67);
    var49.addAll((java.util.List)var55);
    boolean var71 = var0.containsAll((java.util.Collection)var55);
    int var72 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test15() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    java.awt.Point var49 = org.jhotdraw.util.Geom.topRightCorner(var48);
    org.jhotdraw.figures.LineFigure var50 = new org.jhotdraw.figures.LineFigure();
    int var51 = (-1);
    int var52 = 10;
    var50.startPoint(var51, var52);
    java.awt.Point var54 = var50.startPoint();
    org.jhotdraw.contrib.html.DiamondFigureGeometricAdapter var55 = new org.jhotdraw.contrib.html.DiamondFigureGeometricAdapter(var49, var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test16() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    org.jhotdraw.contrib.html.DisposableResourceHolder var9 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var8);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    int var14 = (-1);
    int var15 = 0;
    org.jhotdraw.standard.StandardDrawingView var16 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var14, var15);
    var16.clearSelection();
    org.jhotdraw.util.UndoableAdapter var18 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var16);
    boolean var19 = var18.undo();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.standard.StandardDrawing var23 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var24 = new java.lang.Double((-1.0d));
    java.lang.Double var25 = new java.lang.Double(100.0d);
    java.lang.Double var26 = new java.lang.Double(1.0d);
    java.awt.Point var27 = org.jhotdraw.util.Geom.polarToPoint(var24, var25, var26);
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    org.jhotdraw.contrib.DiamondFigure var32 = new org.jhotdraw.contrib.DiamondFigure(var27, var31);
    org.jhotdraw.framework.HandleEnumeration var33 = var32.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var36 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var34, (org.jhotdraw.framework.FigureChangeListener)var35);
    org.jhotdraw.framework.Figure var37 = var23.replace((org.jhotdraw.framework.Figure)var32, (org.jhotdraw.framework.Figure)var34);
    org.jhotdraw.framework.Handle var38 = org.jhotdraw.standard.BoxHandleKit.north(var37);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    var45.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var47 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var45.removeForeground((org.jhotdraw.framework.Painter)var47);
    org.jhotdraw.util.UndoableHandle var49 = new org.jhotdraw.util.UndoableHandle(var38, (org.jhotdraw.framework.DrawingView)var45);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    var63.clearSelection();
    java.awt.Color var65 = var63.getForeground();
    var56.setBackground(var65);
    org.jhotdraw.framework.FigureEnumeration var67 = var56.selectionZOrdered();
    var67.reset();
    var45.addToSelectionAll(var67);
    var20.orphanAll(var67);
    var18.setAffectedFigures(var67);
    var9.setResource((java.lang.Object)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test17() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.String var1 = "";
    java.lang.String var2 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var3 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var3.start();
    org.jhotdraw.standard.CopyCommand var5 = new org.jhotdraw.standard.CopyCommand(var2, (org.jhotdraw.framework.DrawingEditor)var3);
    java.lang.Object var6 = var3.getTreeLock();
    org.jhotdraw.figures.InsertImageCommand var7 = new org.jhotdraw.figures.InsertImageCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var3);

  }

  public void test18() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.Boolean var1 = new java.lang.Boolean(false);
    var0.setReadOnly(var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var12 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var10.removeForeground((org.jhotdraw.framework.Painter)var12);
    boolean var14 = var10.isEnabled();
    float var15 = var10.getAlignmentX();
    var0.setAttribute(var3, (java.lang.Object)var10);
    int var17 = 1;
    int var18 = 1;
    org.jhotdraw.contrib.PolygonFigure var19 = new org.jhotdraw.contrib.PolygonFigure(var17, var18);
    org.jhotdraw.framework.FigureEnumeration var20 = var19.figures();
    java.awt.Rectangle var21 = var19.displayBox();
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.east((org.jhotdraw.framework.Figure)var19);
    int var23 = 0;
    java.awt.Point var24 = var19.pointAt(var23);
    boolean var25 = var19.isEmpty();
    var0.connect((org.jhotdraw.framework.Figure)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test19() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.standard.PasteCommand var5 = new org.jhotdraw.standard.PasteCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test20() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    int var4 = 100;
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.util.PaletteLayout var9 = new org.jhotdraw.util.PaletteLayout(var4, var8);
    var1.setLayout((java.awt.LayoutManager)var9);

  }

  public void test21() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    java.lang.Boolean var9 = new java.lang.Boolean(true);
    var0.setEnabled(var9);
    org.jhotdraw.util.CommandChoice var11 = new org.jhotdraw.util.CommandChoice();
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    boolean var17 = var13.remove((java.lang.Object)var14);
    org.jhotdraw.contrib.StandardLayouter var18 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var14);
    var11.removeItem((java.lang.Object)var14);
    org.jhotdraw.standard.StandardDrawing var20 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    org.jhotdraw.contrib.DiamondFigure var29 = new org.jhotdraw.contrib.DiamondFigure(var24, var28);
    org.jhotdraw.framework.HandleEnumeration var30 = var29.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    org.jhotdraw.framework.Figure var34 = var20.replace((org.jhotdraw.framework.Figure)var29, (org.jhotdraw.framework.Figure)var31);
    var11.removeItem((java.lang.Object)var20);
    java.awt.event.ItemListener var36 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var0, (java.awt.event.ItemListener)var11);
    int var37 = 0;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeItemAt(var37);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test22() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    java.awt.Color var8 = var6.getForeground();
    org.jhotdraw.framework.Tool var9 = var6.tool();
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    int var18 = 0;
    int var19 = 0;
    org.jhotdraw.standard.StandardDrawingView var20 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var18, var19);
    org.jhotdraw.util.RedoCommand var21 = new org.jhotdraw.util.RedoCommand(var10, (org.jhotdraw.framework.DrawingEditor)var11);
    int var22 = var6.getComponentZOrder((java.awt.Component)var11);
    java.lang.String var23 = var6.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23.equals("PanelUI"));

  }

  public void test23() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var0.setUndecorated(var10);
    int var12 = 10;
    var0.setExtendedState(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    java.awt.Component var25 = var14.add((java.awt.Component)var24);
    org.jhotdraw.framework.Tool var26 = var24.tool();
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    var24.setVisible(var27);
    org.jhotdraw.contrib.dnd.JHDDragSourceListener var29 = new org.jhotdraw.contrib.dnd.JHDDragSourceListener((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.DrawingView)var24);
    java.lang.String var30 = "hi!";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.applyResourceBundle(var30);
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test24() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.HandleEnumeration var21 = var0.handles();
    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var22 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    org.jhotdraw.framework.HandleEnumeration var23 = var22.handles();
    org.jhotdraw.standard.HandleAndEnumerator var24 = new org.jhotdraw.standard.HandleAndEnumerator(var21, var23);

  }

  public void test25() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.framework.Figure var26 = var17.findFigureInside(var24, var25);
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    int var28 = 1;
    int var29 = 1;
    org.jhotdraw.contrib.PolygonFigure var30 = new org.jhotdraw.contrib.PolygonFigure(var28, var29);
    org.jhotdraw.framework.FigureEnumeration var31 = var30.figures();
    java.awt.Rectangle var32 = var30.displayBox();
    int var33 = 1;
    int var34 = 1;
    org.jhotdraw.contrib.PolygonFigure var35 = new org.jhotdraw.contrib.PolygonFigure(var33, var34);
    org.jhotdraw.framework.FigureEnumeration var36 = var35.figures();
    java.awt.Rectangle var37 = var35.displayBox();
    org.jhotdraw.framework.Figure var38 = var27.findFigure(var32, (org.jhotdraw.framework.Figure)var35);
    int var39 = 100;
    int var40 = (-1);
    java.lang.Double var41 = new java.lang.Double((-1.0d));
    java.lang.Double var42 = new java.lang.Double(100.0d);
    java.lang.Double var43 = new java.lang.Double(1.0d);
    java.awt.Point var44 = org.jhotdraw.util.Geom.polarToPoint(var41, var42, var43);
    java.lang.Double var45 = new java.lang.Double((-1.0d));
    java.lang.Double var46 = new java.lang.Double(100.0d);
    java.lang.Double var47 = new java.lang.Double(1.0d);
    java.awt.Point var48 = org.jhotdraw.util.Geom.polarToPoint(var45, var46, var47);
    org.jhotdraw.contrib.DiamondFigure var49 = new org.jhotdraw.contrib.DiamondFigure(var44, var48);
    org.jhotdraw.framework.Figure var50 = var27.findFigureInsideWithout(var39, var40, (org.jhotdraw.framework.Figure)var49);
    int var51 = var17.getLayer((org.jhotdraw.framework.Figure)var49);
    int var52 = var17.figureCount();
    var17.release();
    org.jhotdraw.contrib.MDI_DrawApplication var54 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var55 = var54.isDoubleBuffered();
    javax.swing.JRootPane var56 = var54.getRootPane();
    javax.swing.JLayeredPane var57 = var54.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var58 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var59 = var58.isDoubleBuffered();
    javax.swing.JRootPane var60 = var58.getRootPane();
    javax.swing.JLayeredPane var61 = var58.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var62 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var63 = var62.isDoubleBuffered();
    javax.swing.JRootPane var64 = var62.getRootPane();
    javax.swing.JLayeredPane var65 = var62.getLayeredPane();
    int var66 = (-1);
    int var67 = 0;
    org.jhotdraw.standard.StandardDrawingView var68 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var62, var66, var67);
    java.awt.Component var69 = var58.add((java.awt.Component)var68);
    boolean var70 = var68.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var72 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var73 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var71, (org.jhotdraw.framework.FigureChangeListener)var72);
    java.awt.Dimension var74 = var71.size();
    var68.removeFromSelection((org.jhotdraw.framework.Figure)var71);
    var71.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var77 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var54, (org.jhotdraw.framework.Figure)var71);
    org.jhotdraw.contrib.Layouter var78 = var71.getLayouter();
    var17.setLayouter(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test26() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    var0.firePopupMenuWillBecomeVisible();
    int var36 = var0.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test27() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    var7.clearSelection();
    java.awt.Color var9 = var7.getForeground();
    org.jhotdraw.framework.Tool var10 = var7.tool();
    java.lang.String var11 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    int var16 = (-1);
    int var17 = 0;
    org.jhotdraw.standard.StandardDrawingView var18 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var16, var17);
    int var19 = 0;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var19, var20);
    org.jhotdraw.util.RedoCommand var22 = new org.jhotdraw.util.RedoCommand(var11, (org.jhotdraw.framework.DrawingEditor)var12);
    int var23 = var7.getComponentZOrder((java.awt.Component)var12);
    org.jhotdraw.standard.SendToBackCommand var24 = new org.jhotdraw.standard.SendToBackCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));

  }

  public void test28() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.standard.StandardDrawingView var27 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var21, var25, var26);
    java.awt.Component var28 = var17.add((java.awt.Component)var27);
    boolean var29 = var27.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var32 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var30, (org.jhotdraw.framework.FigureChangeListener)var31);
    java.awt.Dimension var33 = var30.size();
    var27.removeFromSelection((org.jhotdraw.framework.Figure)var30);
    var16.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var27);
    org.jhotdraw.contrib.CommandMenuItem var36 = new org.jhotdraw.contrib.CommandMenuItem((org.jhotdraw.util.Command)var16);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    java.awt.Color var45 = var43.getForeground();
    var36.setForeground(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test29() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    java.awt.Rectangle var36 = var0.displayBox();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    boolean var39 = var37.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var42 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var40, (org.jhotdraw.framework.FigureChangeListener)var41);
    int var43 = var41.getZValue();
    java.lang.Object var44 = var41.clone();
    org.jhotdraw.standard.CreationTool var45 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var37, (org.jhotdraw.framework.Figure)var41);
    java.lang.String var46 = "hi!";
    java.lang.String var47 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    java.awt.Graphics var52 = var48.getGraphics();
    java.lang.Boolean var53 = new java.lang.Boolean(true);
    var48.setLocationByPlatform(var53);
    org.jhotdraw.standard.StandardDrawing var55 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    org.jhotdraw.contrib.DiamondFigure var64 = new org.jhotdraw.contrib.DiamondFigure(var59, var63);
    org.jhotdraw.framework.HandleEnumeration var65 = var64.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var67 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var68 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var66, (org.jhotdraw.framework.FigureChangeListener)var67);
    org.jhotdraw.framework.Figure var69 = var55.replace((org.jhotdraw.framework.Figure)var64, (org.jhotdraw.framework.Figure)var66);
    org.jhotdraw.framework.Handle var70 = org.jhotdraw.standard.BoxHandleKit.north(var69);
    org.jhotdraw.standard.HandleTracker var71 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var48, var70);
    org.jhotdraw.standard.ToolButton var72 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var37, var46, var47, (org.jhotdraw.framework.Tool)var71);
    org.jhotdraw.contrib.MDI_DrawApplication var73 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var74 = var73.isDoubleBuffered();
    javax.swing.JRootPane var75 = var73.getRootPane();
    javax.swing.JLayeredPane var76 = var73.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var77 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var78 = var77.isDoubleBuffered();
    javax.swing.JRootPane var79 = var77.getRootPane();
    javax.swing.JLayeredPane var80 = var77.getLayeredPane();
    int var81 = (-1);
    int var82 = 0;
    org.jhotdraw.standard.StandardDrawingView var83 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var77, var81, var82);
    java.awt.Component var84 = var73.add((java.awt.Component)var83);
    boolean var85 = var83.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var86 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var87 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var88 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var86, (org.jhotdraw.framework.FigureChangeListener)var87);
    java.awt.Dimension var89 = var86.size();
    var83.removeFromSelection((org.jhotdraw.framework.Figure)var86);
    var86.layout();
    java.lang.Object var92 = var86.clone();
    org.jhotdraw.framework.FigureChangeEvent var93 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var86);
    var72.toolDisabled((java.util.EventObject)var93);
    var0.figureInvalidated(var93);
    java.awt.Point var96 = var0.getBorderOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test30() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    int var44 = 10;
    org.jhotdraw.framework.FigureAttributeConstant var45 = org.jhotdraw.framework.FigureAttributeConstant.getConstant(var44);
    org.jhotdraw.figures.PolyLineFigure var46 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var47 = var46.handles();
    java.lang.String var48 = "hi!";
    java.lang.Object var49 = var46.getAttribute(var48);
    java.util.Iterator var50 = var46.points();
    var2.setAttribute(var45, (java.lang.Object)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test31() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    int var89 = 0;
    var35.setHorizontalTextPosition(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test32() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    boolean var18 = var10.isReadOnly();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.util.UndoableAdapter var27 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var25);
    java.awt.Dimension var28 = var25.getPreferredSize();
    java.awt.Dimension var29 = var10.getSize(var28);
    var10.updateUI();
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JMenu var33 = var31.createLookAndFeelMenu();
    java.lang.String var34 = var33.getName();
    java.awt.Dimension var35 = var33.getPreferredSize();
    java.awt.Dimension var36 = var10.getSize(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test33() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    org.jhotdraw.figures.TextFigure var2 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var3 = var2.getObservedFigure();
    org.jhotdraw.framework.Figure var4 = var2.getRepresentingFigure();
    boolean var5 = var0.includes((org.jhotdraw.framework.Figure)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test34() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    int var44 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var45 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var44);
    boolean var46 = var28.removeAll((java.util.Collection)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var49 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var48);
    org.jhotdraw.standard.StandardDrawing var50 = new org.jhotdraw.standard.StandardDrawing();
    int var51 = var48.getLayer((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    int var60 = (-1);
    int var61 = 0;
    org.jhotdraw.standard.StandardDrawingView var62 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var56, var60, var61);
    java.awt.Component var63 = var52.add((java.awt.Component)var62);
    boolean var64 = var62.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var65 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var67 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var65, (org.jhotdraw.framework.FigureChangeListener)var66);
    java.awt.Dimension var68 = var65.size();
    var62.removeFromSelection((org.jhotdraw.framework.Figure)var65);
    var65.layout();
    java.lang.Object var71 = var65.clone();
    org.jhotdraw.framework.FigureChangeEvent var72 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var65);
    java.lang.Object var73 = var72.getSource();
    var50.figureInvalidated(var72);
    org.jhotdraw.contrib.ChopPolygonConnector var75 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    int var76 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var77 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var76);
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    boolean var81 = var77.remove((java.lang.Object)var78);
    var50.orphanAll((java.util.List)var77);
    boolean var83 = var45.removeAll((java.util.Collection)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test35() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.contrib.FloatingTextArea var14 = new org.jhotdraw.contrib.FloatingTextArea();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    java.awt.Component var26 = var15.add((java.awt.Component)var25);
    boolean var27 = var25.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    java.awt.Dimension var31 = var28.size();
    var25.removeFromSelection((org.jhotdraw.framework.Figure)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    java.awt.Component var44 = var33.add((java.awt.Component)var43);
    var25.setEditor((org.jhotdraw.framework.DrawingEditor)var33);
    java.awt.Dimension var46 = var25.minimumSize();
    java.awt.Font var47 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    var14.createOverlay((java.awt.Container)var25, var47);
    org.jhotdraw.util.UndoableHandle var49 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test36() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = "";
    int var13 = 100;
    var10.insert(var12, var13);
    int var15 = 100;
    int var16 = 0;
    int var17 = 0;
    int var18 = 10;
    var10.reshape(var15, var16, var17, var18);
    org.jhotdraw.standard.StandardDrawing var20 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    org.jhotdraw.contrib.DiamondFigure var29 = new org.jhotdraw.contrib.DiamondFigure(var24, var28);
    org.jhotdraw.framework.HandleEnumeration var30 = var29.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    org.jhotdraw.framework.Figure var34 = var20.replace((org.jhotdraw.framework.Figure)var29, (org.jhotdraw.framework.Figure)var31);
    org.jhotdraw.framework.Handle var35 = org.jhotdraw.standard.BoxHandleKit.north(var34);
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    int var40 = (-1);
    int var41 = 0;
    org.jhotdraw.standard.StandardDrawingView var42 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var36, var40, var41);
    var42.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var44 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var42.removeForeground((org.jhotdraw.framework.Painter)var44);
    org.jhotdraw.util.UndoableHandle var46 = new org.jhotdraw.util.UndoableHandle(var35, (org.jhotdraw.framework.DrawingView)var42);
    org.jhotdraw.util.Undoable var47 = var46.getUndoActivity();
    java.awt.Rectangle var48 = var46.displayBox();
    var10.computeVisibleRect(var48);
    java.lang.Double var50 = new java.lang.Double(10.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.angleToPoint(var48, var50);
    org.jhotdraw.standard.ToggleGridCommand var52 = new org.jhotdraw.standard.ToggleGridCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1, var51);
    java.lang.String var53 = "";
    var52.setName(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test37() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    java.lang.String var13 = "";
    java.lang.Character var14 = new java.lang.Character('4');
    java.lang.Character var15 = new java.lang.Character('4');
    var10.firePropertyChange(var13, var14, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test38() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    java.lang.String var15 = var0.getTitle();
    int var16 = 1;
    int var17 = 100;
    org.jhotdraw.figures.NumberTextFigure var18 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var19 = var18.getText();
    int var20 = var18.overlayColumns();
    int var21 = var18.getValue();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    java.awt.Component var37 = var26.add((java.awt.Component)var36);
    boolean var38 = var36.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var41 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var39, (org.jhotdraw.framework.FigureChangeListener)var40);
    java.awt.Dimension var42 = var39.size();
    var36.removeFromSelection((org.jhotdraw.framework.Figure)var39);
    var39.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var45 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var22, (org.jhotdraw.framework.Figure)var39);
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.framework.Figure var48 = var39.findFigureInside(var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    java.awt.Component var60 = var49.add((java.awt.Component)var59);
    boolean var61 = var59.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var63 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var64 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var62, (org.jhotdraw.framework.FigureChangeListener)var63);
    java.awt.Dimension var65 = var62.size();
    var59.removeFromSelection((org.jhotdraw.framework.Figure)var62);
    var62.layout();
    java.lang.Object var68 = var62.clone();
    int var69 = 1;
    int var70 = 1;
    org.jhotdraw.contrib.PolygonFigure var71 = new org.jhotdraw.contrib.PolygonFigure(var69, var70);
    org.jhotdraw.framework.FigureEnumeration var72 = var71.figures();
    java.awt.Rectangle var73 = var71.displayBox();
    org.jhotdraw.framework.Figure var74 = var39.replace((org.jhotdraw.framework.Figure)var62, (org.jhotdraw.framework.Figure)var71);
    var18.addDependendFigure((org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.framework.Figure var76 = var0.findFigureWithout(var16, var17, (org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.contrib.MDI_DrawApplication var77 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var78 = var77.isDoubleBuffered();
    javax.swing.JRootPane var79 = var77.getRootPane();
    javax.swing.JLayeredPane var80 = var77.getLayeredPane();
    int var81 = (-1);
    int var82 = 0;
    org.jhotdraw.standard.StandardDrawingView var83 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var77, var81, var82);
    var83.clearSelection();
    var83.requestFocus();
    boolean var86 = var83.isDoubleBuffered();
    var0.removeDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var83);
    java.lang.Boolean var88 = new java.lang.Boolean(false);
    var83.enable(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);

  }

  public void test39() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    javax.swing.JMenuBar var4 = var1.getJMenuBar();
    java.awt.Font var5 = var1.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test40() throws Throwable {

    org.jhotdraw.figures.NullFigure var0 = new org.jhotdraw.figures.NullFigure();
    java.lang.Object var1 = var0.clone();
    int var2 = 10;
    org.jhotdraw.framework.FigureAttributeConstant var3 = org.jhotdraw.framework.FigureAttributeConstant.getConstant(var2);
    java.lang.Object var4 = var0.getAttribute(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test41() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    java.lang.Boolean var9 = new java.lang.Boolean(true);
    var0.setEnabled(var9);
    org.jhotdraw.util.CommandChoice var11 = new org.jhotdraw.util.CommandChoice();
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    boolean var17 = var13.remove((java.lang.Object)var14);
    org.jhotdraw.contrib.StandardLayouter var18 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var14);
    var11.removeItem((java.lang.Object)var14);
    org.jhotdraw.standard.StandardDrawing var20 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    org.jhotdraw.contrib.DiamondFigure var29 = new org.jhotdraw.contrib.DiamondFigure(var24, var28);
    org.jhotdraw.framework.HandleEnumeration var30 = var29.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    org.jhotdraw.framework.Figure var34 = var20.replace((org.jhotdraw.framework.Figure)var29, (org.jhotdraw.framework.Figure)var31);
    var11.removeItem((java.lang.Object)var20);
    java.awt.event.ItemListener var36 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var0, (java.awt.event.ItemListener)var11);
    int var37 = (-1);
    java.lang.Object var38 = var0.getItemAt(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test42() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    java.util.Iterator var2 = var1.iterator();
    var1.clear();

  }

  public void test43() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    int var18 = 100;
    int var19 = 100;
    var17.setUserSize(var18, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test44() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    int var13 = 0;
    int var14 = (-1);
    org.jhotdraw.framework.Connector var15 = var2.connectorAt(var13, var14);
    int var16 = 0;
    int var17 = (-1);
    var2.addPoint(var16, var17);

  }

  public void test45() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    int var49 = 0;
    int var50 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var51 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var52 = var51.isDoubleBuffered();
    javax.swing.JRootPane var53 = var51.getRootPane();
    javax.swing.JLayeredPane var54 = var51.getLayeredPane();
    int var55 = (-1);
    int var56 = 0;
    org.jhotdraw.standard.StandardDrawingView var57 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var51, var55, var56);
    var57.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var59 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var57.removeForeground((org.jhotdraw.framework.Painter)var59);
    int var61 = 100;
    int var62 = 100;
    org.jhotdraw.standard.GridConstrainer var63 = new org.jhotdraw.standard.GridConstrainer(var61, var62);
    var57.setConstrainer((org.jhotdraw.framework.PointConstrainer)var63);
    java.lang.Long var65 = new java.lang.Long(1L);
    int var66 = 10;
    int var67 = 1;
    int var68 = 10;
    int var69 = 0;
    var57.repaint(var65, var66, var67, var68, var69);
    var17.invokeStart(var49, var50, (org.jhotdraw.framework.DrawingView)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test46() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var17 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var17.start();
    java.awt.Color var19 = var17.getForeground();
    var17.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    java.lang.String var28 = var27.getUIClassID();
    java.awt.Insets var29 = var27.getInsets();
    int var30 = (-1);
    var24.setPosition((java.awt.Component)var27, var30);
    int var32 = var24.highestLayer();
    var24.disable();
    var17.setLayeredPane(var24);
    var12.remove((java.awt.Component)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.promptOpen();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-30000));

  }

  public void test47() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    int var18 = (-1);
    int var19 = 0;
    org.jhotdraw.standard.StandardDrawingView var20 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var14, var18, var19);
    java.awt.Component var21 = var10.add((java.awt.Component)var20);
    boolean var22 = var20.getInheritsPopupMenu();
    boolean var23 = var20.requestDefaultFocus();
    boolean var24 = var20.getAutoscrolls();
    int var25 = 100;
    int var26 = (-1);
    var20.setLocation(var25, var26);
    var0.setLocationRelativeTo((java.awt.Component)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test48() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var1 = var0.handles();
    java.lang.String var2 = "hi!";
    java.lang.Object var3 = var0.getAttribute(var2);
    java.util.Iterator var4 = var0.points();
    org.jhotdraw.figures.ArrowTip var5 = new org.jhotdraw.figures.ArrowTip();
    int var6 = 1;
    int var7 = 1;
    int var8 = 10;
    int var9 = 0;
    java.awt.Polygon var10 = var5.outline(var6, var7, var8, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    var17.clearSelection();
    java.awt.Color var19 = var17.getForeground();
    var5.setFillColor(var19);
    java.awt.Rectangle var21 = var5.displayBox();
    var0.setStartDecoration((org.jhotdraw.figures.LineDecoration)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test49() throws Throwable {

    org.jhotdraw.util.collections.jdk11.SetWrapper var0 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    org.jhotdraw.util.collections.jdk11.SetWrapper var1 = new org.jhotdraw.util.collections.jdk11.SetWrapper((java.util.Set)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = 1;
    int var4 = 1;
    org.jhotdraw.contrib.PolygonFigure var5 = new org.jhotdraw.contrib.PolygonFigure(var3, var4);
    org.jhotdraw.framework.FigureEnumeration var6 = var5.figures();
    java.awt.Rectangle var7 = var5.displayBox();
    int var8 = 1;
    int var9 = 1;
    org.jhotdraw.contrib.PolygonFigure var10 = new org.jhotdraw.contrib.PolygonFigure(var8, var9);
    org.jhotdraw.framework.FigureEnumeration var11 = var10.figures();
    java.awt.Rectangle var12 = var10.displayBox();
    org.jhotdraw.framework.Figure var13 = var2.findFigure(var7, (org.jhotdraw.framework.Figure)var10);
    int var14 = 100;
    int var15 = (-1);
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.Figure var25 = var2.findFigureInsideWithout(var14, var15, (org.jhotdraw.framework.Figure)var24);
    java.util.Iterator var26 = var2.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    java.awt.Component var38 = var27.add((java.awt.Component)var37);
    boolean var39 = var37.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var42 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var40, (org.jhotdraw.framework.FigureChangeListener)var41);
    java.awt.Dimension var43 = var40.size();
    var37.removeFromSelection((org.jhotdraw.framework.Figure)var40);
    var40.layout();
    java.lang.Object var46 = var40.clone();
    org.jhotdraw.framework.FigureChangeEvent var47 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var40);
    var2.figureRequestUpdate(var47);
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var51 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var49, (org.jhotdraw.framework.FigureChangeListener)var50);
    java.awt.Dimension var52 = var49.size();
    var2.sendToBack((org.jhotdraw.framework.Figure)var49);
    int var54 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var55 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var54);
    java.util.Iterator var56 = var55.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    boolean var59 = var57.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var60 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var62 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var60, (org.jhotdraw.framework.FigureChangeListener)var61);
    int var63 = var61.getZValue();
    java.lang.Object var64 = var61.clone();
    org.jhotdraw.standard.CreationTool var65 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var57, (org.jhotdraw.framework.Figure)var61);
    int var66 = 1;
    int var67 = 0;
    org.jhotdraw.standard.StandardDrawingView var68 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var66, var67);
    boolean var69 = var55.contains((java.lang.Object)var67);
    var49.addAll((java.util.List)var55);
    boolean var71 = var0.containsAll((java.util.Collection)var55);
    int var72 = var0.size();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test50() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.north((org.jhotdraw.framework.Figure)var1);

  }

  public void test51() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    boolean var11 = var3.isDisplayable();
    java.lang.Boolean var12 = new java.lang.Boolean(true);
    var3.enable(var12);
    java.lang.String var14 = var3.getToolTipText();
    int var15 = 10;
    int var16 = 1;
    boolean var17 = var3.contains(var15, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test52() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    javax.swing.JRootPane var4 = var2.getRootPane();
    javax.swing.JLayeredPane var5 = var2.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    java.awt.Component var13 = var2.add((java.awt.Component)var12);
    boolean var14 = var12.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var17 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var15, (org.jhotdraw.framework.FigureChangeListener)var16);
    java.awt.Dimension var18 = var15.size();
    var12.removeFromSelection((org.jhotdraw.framework.Figure)var15);
    var15.layout();
    java.lang.Object var21 = var15.clone();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    java.awt.Component var37 = var26.add((java.awt.Component)var36);
    boolean var38 = var36.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var41 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var39, (org.jhotdraw.framework.FigureChangeListener)var40);
    java.awt.Dimension var42 = var39.size();
    var36.removeFromSelection((org.jhotdraw.framework.Figure)var39);
    var39.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var45 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var22, (org.jhotdraw.framework.Figure)var39);
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.framework.Figure var48 = var39.findFigureInside(var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    java.awt.Component var60 = var49.add((java.awt.Component)var59);
    boolean var61 = var59.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var63 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var64 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var62, (org.jhotdraw.framework.FigureChangeListener)var63);
    java.awt.Dimension var65 = var62.size();
    var59.removeFromSelection((org.jhotdraw.framework.Figure)var62);
    var62.layout();
    java.lang.Object var68 = var62.clone();
    int var69 = 1;
    int var70 = 1;
    org.jhotdraw.contrib.PolygonFigure var71 = new org.jhotdraw.contrib.PolygonFigure(var69, var70);
    org.jhotdraw.framework.FigureEnumeration var72 = var71.figures();
    java.awt.Rectangle var73 = var71.displayBox();
    org.jhotdraw.framework.Figure var74 = var39.replace((org.jhotdraw.framework.Figure)var62, (org.jhotdraw.framework.Figure)var71);
    var15.bringToFront((org.jhotdraw.framework.Figure)var62);
    org.jhotdraw.contrib.NestedCreationTool var76 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test53() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    int var10 = 100;
    int var11 = (-1);
    int var12 = (-1);
    int var13 = (-1);
    var2.reshape(var10, var11, var12, var13);
    boolean var15 = var2.isContentAreaFilled();
    javax.swing.InputVerifier var16 = var2.getInputVerifier();
    boolean var17 = var2.isMaximumSizeSet();
    java.awt.Dimension var18 = var2.getPreferredSize();
    int var19 = 1;
    int var20 = 1;
    int var21 = 1;
    int var22 = 1;
    var2.reshape(var19, var20, var21, var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test54() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    java.awt.event.MouseListener[] var7 = var0.getMouseListeners();
    int var8 = (-1);
    int var9 = 1;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var10 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var8, var9);
    boolean var11 = var10.isReadOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test55() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 100;
    int var34 = 0;
    int var35 = 100;
    int var36 = 10;
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    var43.requestFocus();
    java.lang.Boolean var46 = new java.lang.Boolean(false);
    var43.setDoubleBuffered(var46);
    var17.invokeEnd(var33, var34, var35, var36, (org.jhotdraw.framework.DrawingView)var43);
    java.awt.Rectangle var49 = var17.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test56() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    org.jhotdraw.framework.Handle var18 = org.jhotdraw.standard.BoxHandleKit.north(var17);
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var27 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var25.removeForeground((org.jhotdraw.framework.Painter)var27);
    org.jhotdraw.util.UndoableHandle var29 = new org.jhotdraw.util.UndoableHandle(var18, (org.jhotdraw.framework.DrawingView)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    java.awt.Color var45 = var43.getForeground();
    var36.setBackground(var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var36.selectionZOrdered();
    var47.reset();
    var25.addToSelectionAll(var47);
    var0.orphanAll(var47);
    var0.willChange();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test57() throws Throwable {

    org.jhotdraw.contrib.html.ResourceManagerNotSetException var0 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    org.jhotdraw.contrib.html.ResourceManagerNotSetException var1 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    java.lang.Throwable var2 = var0.initCause((java.lang.Throwable)var1);
    var0.printStackTrace();

  }

  public void test58() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.framework.JHotDrawRuntimeException var1 = new org.jhotdraw.framework.JHotDrawRuntimeException(var0);
    org.jhotdraw.framework.JHotDrawException var2 = new org.jhotdraw.framework.JHotDrawException((java.lang.Exception)var1);
    java.lang.StackTraceElement[] var3 = var1.getStackTrace();

  }

  public void test59() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    javax.swing.JInternalFrame var10 = var9.getSelectedFrame();
    var9.tileFrames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);

  }

  public void test60() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    java.lang.String var17 = "hi!";
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    org.jhotdraw.standard.StandardDrawing var21 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    org.jhotdraw.framework.Figure var35 = var21.replace((org.jhotdraw.framework.Figure)var30, (org.jhotdraw.framework.Figure)var32);
    org.jhotdraw.framework.Handle var36 = org.jhotdraw.standard.BoxHandleKit.north(var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var45 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var43.removeForeground((org.jhotdraw.framework.Painter)var45);
    org.jhotdraw.util.UndoableHandle var47 = new org.jhotdraw.util.UndoableHandle(var36, (org.jhotdraw.framework.DrawingView)var43);
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.standard.StandardDrawingView var54 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var48, var52, var53);
    org.jhotdraw.contrib.MDI_DrawApplication var55 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var56 = var55.isDoubleBuffered();
    javax.swing.JRootPane var57 = var55.getRootPane();
    javax.swing.JLayeredPane var58 = var55.getLayeredPane();
    int var59 = (-1);
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var55, var59, var60);
    var61.clearSelection();
    java.awt.Color var63 = var61.getForeground();
    var54.setBackground(var63);
    org.jhotdraw.framework.FigureEnumeration var65 = var54.selectionZOrdered();
    var65.reset();
    var43.addToSelectionAll(var65);
    var18.orphanAll(var65);
    var0.setAttribute(var17, (java.lang.Object)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test61() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var6.selectionZOrdered();
    java.awt.dnd.DragSourceListener var18 = var6.getDragSourceListener();
    boolean var19 = var6.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test62() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var17 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var17.start();
    java.awt.Color var19 = var17.getForeground();
    var17.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    java.lang.String var28 = var27.getUIClassID();
    java.awt.Insets var29 = var27.getInsets();
    int var30 = (-1);
    var24.setPosition((java.awt.Component)var27, var30);
    int var32 = var24.highestLayer();
    var24.disable();
    var17.setLayeredPane(var24);
    var12.remove((java.awt.Component)var17);
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var37 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var36);
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var39 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var38);
    var36.addDependendFigure((org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.framework.Handle var41 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.contrib.CompositeFigureCreationTool var42 = new org.jhotdraw.contrib.CompositeFigureCreationTool((org.jhotdraw.framework.DrawingEditor)var12, (org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.standard.CompositeFigure var43 = var42.getContainerFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-30000));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);

  }

  public void test63() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    int var9 = 1;
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var9, var10);
    java.awt.Component var12 = var0.getGlassPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test64() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    java.lang.Boolean var9 = new java.lang.Boolean(true);
    var0.setEnabled(var9);
    int var11 = var0.getSelectedIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test65() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var3 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    int var4 = 1;
    int var5 = 0;
    boolean var6 = var3.containsPoint(var4, var5);
    org.jhotdraw.contrib.TextAreaTool var7 = new org.jhotdraw.contrib.TextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var3);
    boolean var8 = var7.isUsable();
    boolean var9 = var7.isActivated();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.activate();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test66() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    int var3 = var0.getValue();
    org.jhotdraw.contrib.html.TextHolderContentProducer var4 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var0);
    org.jhotdraw.standard.StandardDrawing var5 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    org.jhotdraw.contrib.DiamondFigure var14 = new org.jhotdraw.contrib.DiamondFigure(var9, var13);
    org.jhotdraw.framework.HandleEnumeration var15 = var14.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    org.jhotdraw.framework.Figure var19 = var5.replace((org.jhotdraw.framework.Figure)var14, (org.jhotdraw.framework.Figure)var16);
    org.jhotdraw.framework.Handle var20 = org.jhotdraw.standard.BoxHandleKit.north(var19);
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.standard.StandardDrawingView var27 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var21, var25, var26);
    var27.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var29 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var27.removeForeground((org.jhotdraw.framework.Painter)var29);
    org.jhotdraw.util.UndoableHandle var31 = new org.jhotdraw.util.UndoableHandle(var20, (org.jhotdraw.framework.DrawingView)var27);
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    var45.clearSelection();
    java.awt.Color var47 = var45.getForeground();
    var38.setBackground(var47);
    org.jhotdraw.framework.FigureEnumeration var49 = var38.selectionZOrdered();
    var49.reset();
    var27.addToSelectionAll(var49);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.awt.Point var56 = var27.getLocation(var55);
    java.lang.Double var57 = new java.lang.Double((-1.0d));
    java.lang.Double var58 = new java.lang.Double(100.0d);
    java.lang.Double var59 = new java.lang.Double(1.0d);
    java.awt.Point var60 = org.jhotdraw.util.Geom.polarToPoint(var57, var58, var59);
    org.jhotdraw.figures.EllipseFigure var61 = new org.jhotdraw.figures.EllipseFigure(var55, var60);
    var0.connect((org.jhotdraw.framework.Figure)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test67() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    int var17 = (-1);
    org.jhotdraw.contrib.CommandMenuItem var18 = new org.jhotdraw.contrib.CommandMenuItem((org.jhotdraw.util.Command)var16, var17);
    org.jhotdraw.util.CommandButton var19 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var16);
    org.jhotdraw.util.Undoable var20 = var16.getUndoActivity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);

  }

  public void test68() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.lang.Double var3 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var4 = new org.jhotdraw.standard.RelativeLocator(var2, var3);
    int var5 = 100;
    org.jhotdraw.figures.PolyLineHandle var6 = new org.jhotdraw.figures.PolyLineHandle(var0, (org.jhotdraw.framework.Locator)var4, var5);
    org.jhotdraw.framework.Cursor var7 = var6.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test69() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    boolean var14 = var11.isContentAreaFilled();
    javax.swing.Action var15 = var11.getAction();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JMenu var18 = var16.createLookAndFeelMenu();
    var16.open();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.util.UndoableAdapter var28 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var26);
    java.awt.Dimension var29 = var26.getPreferredSize();
    var16.setMinimumSize(var29);
    int var31 = 10;
    int var32 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var33 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var31, var32);
    org.jhotdraw.figures.ScribbleTool var34 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var16);
    var7.add((java.awt.Component)var11, (java.lang.Object)var16);
    boolean var36 = var7.isPreferredSizeSet();
    boolean var37 = var7.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test70() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    var10.transferFocusUpCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.unfreezeView();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test71() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.lang.Double var20 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var21 = new org.jhotdraw.standard.RelativeLocator(var19, var20);
    int var22 = (-1);
    org.jhotdraw.figures.PolyLineHandle var23 = new org.jhotdraw.figures.PolyLineHandle(var17, (org.jhotdraw.framework.Locator)var21, var22);
    int var24 = 100;
    int var25 = 100;
    var17.addPoint(var24, var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test72() throws Throwable {

    org.jhotdraw.util.ColorMap var0 = new org.jhotdraw.util.ColorMap();

  }

  public void test73() throws Throwable {

    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    int var1 = 1;
    int var2 = 0;
    boolean var3 = var0.containsPoint(var1, var2);
    int var4 = var0.getZValue();
    org.jhotdraw.framework.HandleEnumeration var5 = var0.handles();
    java.awt.Shape var6 = var0.getShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test74() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    int var5 = 100;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setHorizontalAlignment(var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test75() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    long var1 = var0.getLastTimeAccessed();
    var0.dispose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);

  }

  public void test76() throws Throwable {

    org.jhotdraw.contrib.html.ETSLADisposalStrategy var0 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    java.lang.Long var1 = new java.lang.Long(100L);
    var0.stopDisposing(var1);
    org.jhotdraw.contrib.html.DisposableResourceManager var3 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.getManager();
    var0.setManager(var3);

  }

  public void test77() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    var25.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test78() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    org.jhotdraw.util.Undoable var19 = var16.getUndoActivity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test79() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    java.lang.String var17 = "hi!";
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    org.jhotdraw.standard.StandardDrawing var21 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    org.jhotdraw.framework.Figure var35 = var21.replace((org.jhotdraw.framework.Figure)var30, (org.jhotdraw.framework.Figure)var32);
    org.jhotdraw.framework.Handle var36 = org.jhotdraw.standard.BoxHandleKit.north(var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var45 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var43.removeForeground((org.jhotdraw.framework.Painter)var45);
    org.jhotdraw.util.UndoableHandle var47 = new org.jhotdraw.util.UndoableHandle(var36, (org.jhotdraw.framework.DrawingView)var43);
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.standard.StandardDrawingView var54 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var48, var52, var53);
    org.jhotdraw.contrib.MDI_DrawApplication var55 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var56 = var55.isDoubleBuffered();
    javax.swing.JRootPane var57 = var55.getRootPane();
    javax.swing.JLayeredPane var58 = var55.getLayeredPane();
    int var59 = (-1);
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var55, var59, var60);
    var61.clearSelection();
    java.awt.Color var63 = var61.getForeground();
    var54.setBackground(var63);
    org.jhotdraw.framework.FigureEnumeration var65 = var54.selectionZOrdered();
    var65.reset();
    var43.addToSelectionAll(var65);
    var18.orphanAll(var65);
    var0.setAttribute(var17, (java.lang.Object)var65);
    var65.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test80() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    java.awt.image.BufferStrategy var18 = var0.getBufferStrategy();
    org.jhotdraw.contrib.CustomSelectionTool var19 = new org.jhotdraw.contrib.CustomSelectionTool((org.jhotdraw.framework.DrawingEditor)var0);
    var0.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test81() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    var4.deactivate();
    boolean var6 = var4.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test82() throws Throwable {

    org.jhotdraw.util.UndoManager var0 = new org.jhotdraw.util.UndoManager();

  }

  public void test83() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.standard.SelectAreaTracker var17 = new org.jhotdraw.standard.SelectAreaTracker((org.jhotdraw.framework.DrawingEditor)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test84() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    java.lang.String var17 = "hi!";
    var0.setText(var17);
    java.awt.Rectangle var19 = var0.displayBox();
    org.jhotdraw.contrib.html.TextHolderContentProducer var20 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test85() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    javax.swing.InputVerifier var31 = var10.getInputVerifier();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    java.lang.String var39 = var38.getUIClassID();
    java.awt.Insets var40 = var38.getInsets();
    int var41 = (-1);
    var35.setPosition((java.awt.Component)var38, var41);
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    int var45 = 0;
    var35.setLayer((java.awt.Component)var43, var45);
    java.awt.event.HierarchyListener[] var47 = var43.getHierarchyListeners();
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var43);
    javax.swing.JRootPane var49 = var43.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test86() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    boolean var4 = var2.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var7 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var5, (org.jhotdraw.framework.FigureChangeListener)var6);
    int var8 = var6.getZValue();
    java.lang.Object var9 = var6.clone();
    org.jhotdraw.standard.CreationTool var10 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var2, (org.jhotdraw.framework.Figure)var6);
    java.lang.String var11 = "hi!";
    java.lang.String var12 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    javax.swing.JLayeredPane var16 = var13.getLayeredPane();
    java.awt.Graphics var17 = var13.getGraphics();
    java.lang.Boolean var18 = new java.lang.Boolean(true);
    var13.setLocationByPlatform(var18);
    org.jhotdraw.standard.StandardDrawing var20 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    org.jhotdraw.contrib.DiamondFigure var29 = new org.jhotdraw.contrib.DiamondFigure(var24, var28);
    org.jhotdraw.framework.HandleEnumeration var30 = var29.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    org.jhotdraw.framework.Figure var34 = var20.replace((org.jhotdraw.framework.Figure)var29, (org.jhotdraw.framework.Figure)var31);
    org.jhotdraw.framework.Handle var35 = org.jhotdraw.standard.BoxHandleKit.north(var34);
    org.jhotdraw.standard.HandleTracker var36 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var13, var35);
    org.jhotdraw.standard.ToolButton var37 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var2, var11, var12, (org.jhotdraw.framework.Tool)var36);
    org.jhotdraw.figures.TextFigure var38 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var39 = var38.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var40 = new org.jhotdraw.standard.StandardDrawing();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    int var46 = 1;
    int var47 = 1;
    org.jhotdraw.contrib.PolygonFigure var48 = new org.jhotdraw.contrib.PolygonFigure(var46, var47);
    org.jhotdraw.framework.FigureEnumeration var49 = var48.figures();
    java.awt.Rectangle var50 = var48.displayBox();
    org.jhotdraw.framework.Figure var51 = var40.findFigure(var45, (org.jhotdraw.framework.Figure)var48);
    int var52 = 100;
    int var53 = (-1);
    java.lang.Double var54 = new java.lang.Double((-1.0d));
    java.lang.Double var55 = new java.lang.Double(100.0d);
    java.lang.Double var56 = new java.lang.Double(1.0d);
    java.awt.Point var57 = org.jhotdraw.util.Geom.polarToPoint(var54, var55, var56);
    java.lang.Double var58 = new java.lang.Double((-1.0d));
    java.lang.Double var59 = new java.lang.Double(100.0d);
    java.lang.Double var60 = new java.lang.Double(1.0d);
    java.awt.Point var61 = org.jhotdraw.util.Geom.polarToPoint(var58, var59, var60);
    org.jhotdraw.contrib.DiamondFigure var62 = new org.jhotdraw.contrib.DiamondFigure(var57, var61);
    org.jhotdraw.framework.Figure var63 = var40.findFigureInsideWithout(var52, var53, (org.jhotdraw.framework.Figure)var62);
    java.util.Iterator var64 = var40.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var65 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var66 = var65.isDoubleBuffered();
    javax.swing.JRootPane var67 = var65.getRootPane();
    javax.swing.JLayeredPane var68 = var65.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var69 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var70 = var69.isDoubleBuffered();
    javax.swing.JRootPane var71 = var69.getRootPane();
    javax.swing.JLayeredPane var72 = var69.getLayeredPane();
    int var73 = (-1);
    int var74 = 0;
    org.jhotdraw.standard.StandardDrawingView var75 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var69, var73, var74);
    java.awt.Component var76 = var65.add((java.awt.Component)var75);
    boolean var77 = var75.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    java.awt.Dimension var81 = var78.size();
    var75.removeFromSelection((org.jhotdraw.framework.Figure)var78);
    var78.layout();
    java.lang.Object var84 = var78.clone();
    org.jhotdraw.framework.FigureChangeEvent var85 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var78);
    var40.figureRequestUpdate(var85);
    java.awt.Rectangle var87 = var85.getInvalidatedRectangle();
    var38.figureRequestUpdate(var85);
    var37.toolActivated((java.util.EventObject)var85);
    var0.figureRemoved(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test87() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    int var2 = 1;
    int var3 = (-1);
    org.jhotdraw.framework.Connector var4 = var0.connectorAt(var2, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test88() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    int var7 = 100;
    int var8 = 0;
    int var9 = 0;
    int var10 = 10;
    var2.reshape(var7, var8, var9, var10);
    org.jhotdraw.standard.StandardDrawing var12 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var13 = new java.lang.Double((-1.0d));
    java.lang.Double var14 = new java.lang.Double(100.0d);
    java.lang.Double var15 = new java.lang.Double(1.0d);
    java.awt.Point var16 = org.jhotdraw.util.Geom.polarToPoint(var13, var14, var15);
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.lang.Double var18 = new java.lang.Double(100.0d);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.awt.Point var20 = org.jhotdraw.util.Geom.polarToPoint(var17, var18, var19);
    org.jhotdraw.contrib.DiamondFigure var21 = new org.jhotdraw.contrib.DiamondFigure(var16, var20);
    org.jhotdraw.framework.HandleEnumeration var22 = var21.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    org.jhotdraw.framework.Figure var26 = var12.replace((org.jhotdraw.framework.Figure)var21, (org.jhotdraw.framework.Figure)var23);
    org.jhotdraw.framework.Handle var27 = org.jhotdraw.standard.BoxHandleKit.north(var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    var34.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var36 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var34.removeForeground((org.jhotdraw.framework.Painter)var36);
    org.jhotdraw.util.UndoableHandle var38 = new org.jhotdraw.util.UndoableHandle(var27, (org.jhotdraw.framework.DrawingView)var34);
    org.jhotdraw.util.Undoable var39 = var38.getUndoActivity();
    java.awt.Rectangle var40 = var38.displayBox();
    var2.computeVisibleRect(var40);
    int var42 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.insertSeparator(var42);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test89() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);
    var6.checkEnabled();

  }

  public void test90() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var6 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter(var5);
    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var7 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter(var5);
    java.awt.Shape var8 = var7.getShape();

  }

  public void test91() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    java.awt.event.ActionListener[] var6 = var2.getActionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test92() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    boolean var19 = var18.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test93() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    java.awt.Point var49 = org.jhotdraw.util.Geom.east(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test94() throws Throwable {

    int var0 = 1;
    org.jhotdraw.util.UndoManager var1 = new org.jhotdraw.util.UndoManager(var0);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    javax.swing.JRootPane var4 = var2.getRootPane();
    javax.swing.JLayeredPane var5 = var2.getLayeredPane();
    int var6 = (-1);
    int var7 = 0;
    org.jhotdraw.standard.StandardDrawingView var8 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var2, var6, var7);
    var8.clearSelection();
    org.jhotdraw.util.UndoableAdapter var10 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var8);
    boolean var11 = var10.undo();
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    var10.setUndoable(var12);
    boolean var14 = var10.undo();
    org.jhotdraw.util.Undoable var15 = org.jhotdraw.util.UndoRedoActivity.createUndoRedoActivity((org.jhotdraw.util.Undoable)var10);
    var1.pushUndo(var15);
    var1.clearRedos();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test95() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var6.selectionZOrdered();
    boolean var18 = var17.hasNextFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test96() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.framework.Tool var3 = var1.tool();
    java.awt.FocusTraversalPolicy var4 = var1.getFocusTraversalPolicy();
    org.jhotdraw.util.UndoManager var5 = var1.getUndoManager();
    org.jhotdraw.util.RedoCommand var6 = new org.jhotdraw.util.RedoCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    java.lang.String var10 = var9.getUIClassID();
    boolean var11 = var9.isRequestFocusEnabled();
    java.awt.Dimension var12 = var9.getSize();
    var1.setGlassPane((java.awt.Component)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test97() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    boolean var11 = var3.isDisplayable();
    java.awt.Component[] var12 = var3.getComponents();
    int var13 = (-1);
    int var14 = 0;
    int var15 = 10;
    int var16 = 1;
    var3.reshape(var13, var14, var15, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test98() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.Float var1 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    java.awt.Container var4 = var2.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var5 = new org.jhotdraw.contrib.zoom.ZoomCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    float var6 = var5.getScale();
    float var7 = var5.getScale();
    float var8 = var5.getScale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0f);

  }

  public void test99() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);
    javax.swing.InputMap var8 = var6.getInputMap();
    java.lang.String var9 = "";
    var6.setLabel(var9);
    org.jhotdraw.figures.NumberTextFigure var11 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var12 = var11.getText();
    int var13 = var11.overlayColumns();
    int var14 = var11.getValue();
    org.jhotdraw.contrib.html.TextHolderContentProducer var15 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var11);
    java.awt.Rectangle var16 = var11.textDisplayBox();
    java.lang.Boolean var17 = new java.lang.Boolean(false);
    var11.setReadOnly(var17);
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    int var27 = (-1);
    int var28 = 0;
    org.jhotdraw.standard.StandardDrawingView var29 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var23, var27, var28);
    java.awt.Component var30 = var19.add((java.awt.Component)var29);
    boolean var31 = var29.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    java.awt.Dimension var35 = var32.size();
    var29.removeFromSelection((org.jhotdraw.framework.Figure)var32);
    var32.layout();
    java.lang.Object var38 = var32.clone();
    org.jhotdraw.framework.FigureChangeEvent var39 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var32);
    java.lang.Object var40 = var39.getSource();
    var11.figureChanged(var39);
    var6.commandExecutable((java.util.EventObject)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test100() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    java.awt.Color var14 = var12.getForeground();
    var0.setFillColor(var14);
    java.awt.Rectangle var16 = var0.displayBox();
    java.awt.Color var17 = var0.getFillColor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test101() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var2.layout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var4 = var2.isTearOff();
      fail("Expected exception of type java.lang.Error");
    } catch (java.lang.Error e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test102() throws Throwable {

    int var0 = 100;
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.figures.PolyLineFigure.locator(var0);
    org.jhotdraw.standard.OffsetLocator var2 = new org.jhotdraw.standard.OffsetLocator(var1);

  }

  public void test103() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    var25.requestFocus();
    var25.firePopupMenuCanceled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test104() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    var3.list();
    var3.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test105() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    org.jhotdraw.figures.ArrowTip var12 = new org.jhotdraw.figures.ArrowTip();
    int var13 = 1;
    int var14 = 1;
    int var15 = 10;
    int var16 = 0;
    java.awt.Polygon var17 = var12.outline(var13, var14, var15, var16);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    var24.clearSelection();
    java.awt.Color var26 = var24.getForeground();
    var12.setFillColor(var26);
    java.awt.Rectangle var28 = var12.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var29 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var0, var28);
    java.awt.Rectangle var30 = var29.getInvalidatedRectangle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test106() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    boolean var2 = var0.isTextDirty();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    boolean var15 = var13.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var13.removeFromSelection((org.jhotdraw.framework.Figure)var16);
    var16.layout();
    java.lang.Object var22 = var16.clone();
    org.jhotdraw.framework.FigureChangeEvent var23 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var16);
    java.lang.Object var24 = var23.getSource();
    var0.figureInvalidated(var23);
    java.lang.Boolean var26 = new java.lang.Boolean(false);
    var0.setReadOnly(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test107() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var6.selectionZOrdered();
    java.awt.dnd.DragSourceListener var18 = var6.getDragSourceListener();
    boolean var19 = var6.isMaximumSizeSet();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var28 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var26.removeForeground((org.jhotdraw.framework.Painter)var28);
    int var30 = 100;
    int var31 = 100;
    org.jhotdraw.standard.GridConstrainer var32 = new org.jhotdraw.standard.GridConstrainer(var30, var31);
    var26.setConstrainer((org.jhotdraw.framework.PointConstrainer)var32);
    int var34 = var32.getStepY();
    int var35 = var32.getStepY();
    int var36 = var32.getStepX();
    var6.setConstrainer((org.jhotdraw.framework.PointConstrainer)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 100);

  }

  public void test108() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    int var10 = 1;
    int var11 = 1;
    org.jhotdraw.contrib.PolygonFigure var12 = new org.jhotdraw.contrib.PolygonFigure(var10, var11);
    org.jhotdraw.framework.FigureEnumeration var13 = var12.figures();
    java.awt.Rectangle var14 = var12.displayBox();
    int var15 = 1;
    int var16 = 1;
    org.jhotdraw.contrib.PolygonFigure var17 = new org.jhotdraw.contrib.PolygonFigure(var15, var16);
    org.jhotdraw.framework.FigureEnumeration var18 = var17.figures();
    java.awt.Rectangle var19 = var17.displayBox();
    org.jhotdraw.framework.Figure var20 = var9.findFigure(var14, (org.jhotdraw.framework.Figure)var17);
    int var21 = 100;
    int var22 = (-1);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    org.jhotdraw.contrib.DiamondFigure var31 = new org.jhotdraw.contrib.DiamondFigure(var26, var30);
    org.jhotdraw.framework.Figure var32 = var9.findFigureInsideWithout(var21, var22, (org.jhotdraw.framework.Figure)var31);
    java.util.Iterator var33 = var9.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    java.awt.Component var45 = var34.add((java.awt.Component)var44);
    boolean var46 = var44.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var49 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var47, (org.jhotdraw.framework.FigureChangeListener)var48);
    java.awt.Dimension var50 = var47.size();
    var44.removeFromSelection((org.jhotdraw.framework.Figure)var47);
    var47.layout();
    java.lang.Object var53 = var47.clone();
    org.jhotdraw.framework.FigureChangeEvent var54 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var47);
    var9.figureRequestUpdate(var54);
    var3.figureChanged(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test109() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    javax.accessibility.AccessibleContext var2 = var0.getAccessibleContext();
    java.lang.String var3 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var4 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var4.start();
    org.jhotdraw.standard.CopyCommand var6 = new org.jhotdraw.standard.CopyCommand(var3, (org.jhotdraw.framework.DrawingEditor)var4);
    var6.dispose();
    java.lang.String var8 = "";
    org.jhotdraw.util.CommandMenu var9 = new org.jhotdraw.util.CommandMenu(var8);
    var6.addCommandListener((org.jhotdraw.util.CommandListener)var9);
    javax.swing.InputMap var11 = var9.getInputMap();
    java.awt.event.ActionListener var12 = java.awt.AWTEventMulticaster.add((java.awt.event.ActionListener)var0, (java.awt.event.ActionListener)var9);
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    java.awt.Dimension var17 = var14.size();
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    org.jhotdraw.figures.EllipseFigure var26 = new org.jhotdraw.figures.EllipseFigure(var21, var25);
    java.awt.Rectangle var27 = var26.displayBox();
    org.jhotdraw.standard.StandardDrawing var28 = new org.jhotdraw.standard.StandardDrawing();
    int var29 = 1;
    int var30 = 1;
    org.jhotdraw.contrib.PolygonFigure var31 = new org.jhotdraw.contrib.PolygonFigure(var29, var30);
    org.jhotdraw.framework.FigureEnumeration var32 = var31.figures();
    java.awt.Rectangle var33 = var31.displayBox();
    int var34 = 1;
    int var35 = 1;
    org.jhotdraw.contrib.PolygonFigure var36 = new org.jhotdraw.contrib.PolygonFigure(var34, var35);
    org.jhotdraw.framework.FigureEnumeration var37 = var36.figures();
    java.awt.Rectangle var38 = var36.displayBox();
    org.jhotdraw.framework.Figure var39 = var28.findFigure(var33, (org.jhotdraw.framework.Figure)var36);
    int var40 = 100;
    int var41 = (-1);
    java.lang.Double var42 = new java.lang.Double((-1.0d));
    java.lang.Double var43 = new java.lang.Double(100.0d);
    java.lang.Double var44 = new java.lang.Double(1.0d);
    java.awt.Point var45 = org.jhotdraw.util.Geom.polarToPoint(var42, var43, var44);
    java.lang.Double var46 = new java.lang.Double((-1.0d));
    java.lang.Double var47 = new java.lang.Double(100.0d);
    java.lang.Double var48 = new java.lang.Double(1.0d);
    java.awt.Point var49 = org.jhotdraw.util.Geom.polarToPoint(var46, var47, var48);
    org.jhotdraw.contrib.DiamondFigure var50 = new org.jhotdraw.contrib.DiamondFigure(var45, var49);
    org.jhotdraw.framework.Figure var51 = var28.findFigureInsideWithout(var40, var41, (org.jhotdraw.framework.Figure)var50);
    java.util.Iterator var52 = var28.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    java.awt.Component var64 = var53.add((java.awt.Component)var63);
    boolean var65 = var63.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var67 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var68 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var66, (org.jhotdraw.framework.FigureChangeListener)var67);
    java.awt.Dimension var69 = var66.size();
    var63.removeFromSelection((org.jhotdraw.framework.Figure)var66);
    var66.layout();
    java.lang.Object var72 = var66.clone();
    org.jhotdraw.framework.FigureChangeEvent var73 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var66);
    var28.figureRequestUpdate(var73);
    org.jhotdraw.framework.FigureChangeEvent var75 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var14, var27, var73);
    var13.figureRequestRemove(var75);
    var9.commandExecutable((java.util.EventObject)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test110() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var17 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var17.start();
    java.awt.Color var19 = var17.getForeground();
    var17.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    java.lang.String var28 = var27.getUIClassID();
    java.awt.Insets var29 = var27.getInsets();
    int var30 = (-1);
    var24.setPosition((java.awt.Component)var27, var30);
    int var32 = var24.highestLayer();
    var24.disable();
    var17.setLayeredPane(var24);
    var12.remove((java.awt.Component)var17);
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    int var40 = (-1);
    int var41 = 0;
    org.jhotdraw.standard.StandardDrawingView var42 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var36, var40, var41);
    var42.clearSelection();
    var42.layout();
    int var45 = var42.getHeight();
    int var46 = var17.getComponentZOrder((java.awt.Component)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-30000));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));

  }

  public void test111() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.standard.AWTCursor var1 = new org.jhotdraw.standard.AWTCursor(var0);
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2.equals("org.jhotdraw.standard.AWTCursor[hi!]"));

  }

  public void test112() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var6.selectionZOrdered();
    var17.reset();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    var32.clearSelection();
    java.awt.Color var34 = var32.getForeground();
    var25.setBackground(var34);
    org.jhotdraw.framework.FigureEnumeration var36 = var25.selectionZOrdered();
    var36.reset();
    org.jhotdraw.standard.FigureAndEnumerator var38 = new org.jhotdraw.standard.FigureAndEnumerator(var17, var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test113() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    int var8 = 0;
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var8, var9);
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    var1.setUndecorated(var11);
    int var13 = 10;
    var1.setExtendedState(var13);
    java.lang.Object var15 = org.jhotdraw.figures.AttributeFigure.initDefaultAttribute(var0, (java.lang.Object)var1);
    org.jhotdraw.contrib.zoom.ZoomDrawingView var16 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test114() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var2 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    int var4 = var1.getLayer((org.jhotdraw.framework.Figure)var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    java.awt.Component var16 = var5.add((java.awt.Component)var15);
    boolean var17 = var15.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    java.awt.Dimension var21 = var18.size();
    var15.removeFromSelection((org.jhotdraw.framework.Figure)var18);
    var18.layout();
    java.lang.Object var24 = var18.clone();
    org.jhotdraw.framework.FigureChangeEvent var25 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var18);
    java.lang.Object var26 = var25.getSource();
    var3.figureInvalidated(var25);
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    org.jhotdraw.figures.EllipseFigure var36 = new org.jhotdraw.figures.EllipseFigure(var31, var35);
    boolean var37 = var3.containsFigure((org.jhotdraw.framework.Figure)var36);
    org.jhotdraw.figures.ArrowTip var38 = new org.jhotdraw.figures.ArrowTip();
    int var39 = 1;
    int var40 = 1;
    int var41 = 10;
    int var42 = 0;
    java.awt.Polygon var43 = var38.outline(var39, var40, var41, var42);
    org.jhotdraw.contrib.MDI_DrawApplication var44 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var45 = var44.isDoubleBuffered();
    javax.swing.JRootPane var46 = var44.getRootPane();
    javax.swing.JLayeredPane var47 = var44.getLayeredPane();
    int var48 = (-1);
    int var49 = 0;
    org.jhotdraw.standard.StandardDrawingView var50 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var44, var48, var49);
    var50.clearSelection();
    java.awt.Color var52 = var50.getForeground();
    var38.setFillColor(var52);
    java.awt.Rectangle var54 = var38.displayBox();
    org.jhotdraw.framework.FigureChangeEvent var55 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var3, var54);
    var0.figureChanged(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test115() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var1 = var0.listener();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    java.lang.String var5 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    java.lang.String var9 = "hi!";
    java.lang.Long var10 = new java.lang.Long(100L);
    java.lang.Long var11 = new java.lang.Long(1L);
    var8.firePropertyChange(var9, var10, var11);
    int var13 = var8.getX();
    var4.setAttribute(var5, (java.lang.Object)var13);
    org.jhotdraw.standard.StandardDrawing var15 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.HandleEnumeration var25 = var24.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var28 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var26, (org.jhotdraw.framework.FigureChangeListener)var27);
    org.jhotdraw.framework.Figure var29 = var15.replace((org.jhotdraw.framework.Figure)var24, (org.jhotdraw.framework.Figure)var26);
    org.jhotdraw.framework.Handle var30 = org.jhotdraw.standard.BoxHandleKit.north(var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    var37.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var39 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var37.removeForeground((org.jhotdraw.framework.Painter)var39);
    org.jhotdraw.util.UndoableHandle var41 = new org.jhotdraw.util.UndoableHandle(var30, (org.jhotdraw.framework.DrawingView)var37);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    int var53 = (-1);
    int var54 = 0;
    org.jhotdraw.standard.StandardDrawingView var55 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var49, var53, var54);
    var55.clearSelection();
    java.awt.Color var57 = var55.getForeground();
    var48.setBackground(var57);
    org.jhotdraw.framework.FigureEnumeration var59 = var48.selectionZOrdered();
    var59.reset();
    var37.addToSelectionAll(var59);
    java.lang.Double var62 = new java.lang.Double((-1.0d));
    java.lang.Double var63 = new java.lang.Double(100.0d);
    java.lang.Double var64 = new java.lang.Double(1.0d);
    java.awt.Point var65 = org.jhotdraw.util.Geom.polarToPoint(var62, var63, var64);
    java.awt.Point var66 = var37.getLocation(var65);
    java.awt.Point var67 = var4.chop(var66);
    var4.willChange();
    java.lang.Double var69 = new java.lang.Double((-1.0d));
    java.lang.Double var70 = new java.lang.Double(100.0d);
    java.lang.Double var71 = new java.lang.Double(1.0d);
    java.awt.Point var72 = org.jhotdraw.util.Geom.polarToPoint(var69, var70, var71);
    java.lang.Double var73 = new java.lang.Double((-1.0d));
    java.lang.Double var74 = new java.lang.Double(100.0d);
    java.lang.Double var75 = new java.lang.Double(1.0d);
    java.awt.Point var76 = org.jhotdraw.util.Geom.polarToPoint(var73, var74, var75);
    org.jhotdraw.figures.EllipseFigure var77 = new org.jhotdraw.figures.EllipseFigure(var72, var76);
    java.awt.Rectangle var78 = var77.displayBox();
    org.jhotdraw.framework.FigureChangeEvent var79 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var4, var78);
    var0.figureRequestRemove(var79);
    int var81 = (-1);
    int var82 = 10;
    org.jhotdraw.framework.Connector var83 = var0.connectorAt(var81, var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test116() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    org.jhotdraw.util.StandardStorageFormat var2 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var3 = "hi!";
    org.jhotdraw.standard.StandardDrawing var4 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var5 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var6 = var5.handles();
    org.jhotdraw.framework.Figure var7 = var4.remove((org.jhotdraw.framework.Figure)var5);
    java.lang.String var8 = var2.store(var3, (org.jhotdraw.framework.Drawing)var4);
    var0.addFigureChangeListener((org.jhotdraw.framework.FigureChangeListener)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("hi!.draw"));

  }

  public void test117() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    java.awt.Component var46 = var35.add((java.awt.Component)var45);
    boolean var47 = var45.getInheritsPopupMenu();
    boolean var48 = var45.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var49 = var45.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var53 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var52);
    var50.addDependendFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.framework.Handle var55 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var52);
    var45.removeFromSelection((org.jhotdraw.framework.Figure)var52);
    var25.removeItem((java.lang.Object)var52);
    org.jhotdraw.util.CommandChoice var58 = new org.jhotdraw.util.CommandChoice();
    int var59 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var60 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var59);
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    boolean var64 = var60.remove((java.lang.Object)var61);
    org.jhotdraw.contrib.StandardLayouter var65 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var61);
    var58.removeItem((java.lang.Object)var61);
    org.jhotdraw.standard.StandardDrawing var67 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.lang.Double var72 = new java.lang.Double((-1.0d));
    java.lang.Double var73 = new java.lang.Double(100.0d);
    java.lang.Double var74 = new java.lang.Double(1.0d);
    java.awt.Point var75 = org.jhotdraw.util.Geom.polarToPoint(var72, var73, var74);
    org.jhotdraw.contrib.DiamondFigure var76 = new org.jhotdraw.contrib.DiamondFigure(var71, var75);
    org.jhotdraw.framework.HandleEnumeration var77 = var76.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    org.jhotdraw.framework.Figure var81 = var67.replace((org.jhotdraw.framework.Figure)var76, (org.jhotdraw.framework.Figure)var78);
    var58.removeItem((java.lang.Object)var67);
    org.jhotdraw.util.CommandChoice var83 = new org.jhotdraw.util.CommandChoice();
    int var84 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var85 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var84);
    org.jhotdraw.contrib.GraphicalCompositeFigure var86 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var87 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var88 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var86, (org.jhotdraw.framework.FigureChangeListener)var87);
    boolean var89 = var85.remove((java.lang.Object)var86);
    org.jhotdraw.contrib.StandardLayouter var90 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var86);
    var83.removeItem((java.lang.Object)var86);
    var58.removeItemListener((java.awt.event.ItemListener)var83);
    var58.firePopupMenuWillBecomeVisible();
    int var94 = var58.getItemCount();
    java.awt.event.ItemListener var95 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var25, (java.awt.event.ItemListener)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test118() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 0;
    int var19 = 100;
    org.jhotdraw.samples.javadraw.BouncingDrawing var20 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    var20.animationStep();
    var20.animationStep();
    var20.animationStep();
    org.jhotdraw.figures.PolyLineFigure var24 = new org.jhotdraw.figures.PolyLineFigure();
    int var25 = var24.getZValue();
    org.jhotdraw.figures.ShortestDistanceConnector var26 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Figure var27 = var20.add((org.jhotdraw.framework.Figure)var24);
    var17.invokeEnd(var18, var19, (org.jhotdraw.framework.Drawing)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test119() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var1 = var0.handles();
    java.lang.String var2 = "hi!";
    java.lang.Object var3 = var0.getAttribute(var2);
    java.util.Iterator var4 = var0.points();
    org.jhotdraw.figures.ArrowTip var5 = new org.jhotdraw.figures.ArrowTip();
    int var6 = 1;
    int var7 = 1;
    int var8 = 10;
    int var9 = 0;
    java.awt.Polygon var10 = var5.outline(var6, var7, var8, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    var17.clearSelection();
    java.awt.Color var19 = var17.getForeground();
    var5.setFillColor(var19);
    java.awt.Rectangle var21 = var5.displayBox();
    var0.setStartDecoration((org.jhotdraw.figures.LineDecoration)var5);
    int var23 = 0;
    int var24 = 100;
    int var25 = 10;
    int var26 = 1;
    java.awt.Polygon var27 = var5.outline(var23, var24, var25, var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test120() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.event.MouseMotionListener[] var2 = var0.getMouseMotionListeners();
    boolean var3 = var0.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test121() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.Float var1 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    java.awt.Container var4 = var2.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var5 = new org.jhotdraw.contrib.zoom.ZoomCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    float var6 = var5.getScale();
    float var7 = var5.getScale();
    float var8 = var5.getScale();
    java.lang.String var9 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var10 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var10.start();
    org.jhotdraw.standard.CopyCommand var12 = new org.jhotdraw.standard.CopyCommand(var9, (org.jhotdraw.framework.DrawingEditor)var10);
    var12.dispose();
    java.lang.String var14 = "";
    org.jhotdraw.util.CommandMenu var15 = new org.jhotdraw.util.CommandMenu(var14);
    var12.addCommandListener((org.jhotdraw.util.CommandListener)var15);
    javax.swing.InputMap var17 = var15.getInputMap();
    java.awt.Point var18 = var15.getMousePosition();
    var5.addCommandListener((org.jhotdraw.util.CommandListener)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test122() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.standard.PasteCommand var5 = new org.jhotdraw.standard.PasteCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    boolean var6 = var5.isExecutableWithView();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test123() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var7 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var8 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var6, (org.jhotdraw.framework.FigureChangeListener)var7);
    int var9 = var7.getZValue();
    java.lang.Object var10 = var7.clone();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var7);
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    var2.displayBox(var15, var24);
    org.jhotdraw.framework.Figure var26 = var2.getPresentationFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test124() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    int var3 = 0;
    var2.removeAllFromDesktop(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    int var9 = (-1);
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var5, var9, var10);
    var11.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var13 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var11.removeForeground((org.jhotdraw.framework.Painter)var13);
    org.jhotdraw.framework.DrawingEditor var15 = var11.editor();
    int var16 = var11.getComponentCount();
    java.awt.im.InputContext var17 = var11.getInputContext();
    int var18 = (-1);
    var2.removeFromDesktop((org.jhotdraw.framework.DrawingView)var11, var18);
    org.jhotdraw.figures.TextFigure var20 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var21 = var20.textDisplayBox();
    var11.repaint(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);

  }

  public void test125() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    var4.deactivate();
    var4.activate();
    java.lang.Boolean var7 = new java.lang.Boolean(true);
    var4.setUsable(var7);
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    var15.clearSelection();
    org.jhotdraw.util.UndoableAdapter var17 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var15);
    boolean var18 = var17.isUndoable();
    var4.setUndoActivity((org.jhotdraw.util.Undoable)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test126() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    java.awt.Component var46 = var35.add((java.awt.Component)var45);
    boolean var47 = var45.getInheritsPopupMenu();
    boolean var48 = var45.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var49 = var45.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var53 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var52);
    var50.addDependendFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.framework.Handle var55 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var52);
    var45.removeFromSelection((org.jhotdraw.framework.Figure)var52);
    var25.removeItem((java.lang.Object)var52);
    org.jhotdraw.util.CommandChoice var58 = new org.jhotdraw.util.CommandChoice();
    int var59 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var60 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var59);
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    boolean var64 = var60.remove((java.lang.Object)var61);
    org.jhotdraw.contrib.StandardLayouter var65 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var61);
    var58.removeItem((java.lang.Object)var61);
    org.jhotdraw.standard.StandardDrawing var67 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.lang.Double var72 = new java.lang.Double((-1.0d));
    java.lang.Double var73 = new java.lang.Double(100.0d);
    java.lang.Double var74 = new java.lang.Double(1.0d);
    java.awt.Point var75 = org.jhotdraw.util.Geom.polarToPoint(var72, var73, var74);
    org.jhotdraw.contrib.DiamondFigure var76 = new org.jhotdraw.contrib.DiamondFigure(var71, var75);
    org.jhotdraw.framework.HandleEnumeration var77 = var76.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    org.jhotdraw.framework.Figure var81 = var67.replace((org.jhotdraw.framework.Figure)var76, (org.jhotdraw.framework.Figure)var78);
    var58.removeItem((java.lang.Object)var67);
    org.jhotdraw.util.CommandChoice var83 = new org.jhotdraw.util.CommandChoice();
    int var84 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var85 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var84);
    org.jhotdraw.contrib.GraphicalCompositeFigure var86 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var87 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var88 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var86, (org.jhotdraw.framework.FigureChangeListener)var87);
    boolean var89 = var85.remove((java.lang.Object)var86);
    org.jhotdraw.contrib.StandardLayouter var90 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var86);
    var83.removeItem((java.lang.Object)var86);
    var58.removeItemListener((java.awt.event.ItemListener)var83);
    var58.firePopupMenuWillBecomeVisible();
    int var94 = var58.getItemCount();
    java.awt.event.ItemListener var95 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var25, (java.awt.event.ItemListener)var58);
    int var96 = 100;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var25.setSelectedIndex(var96);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test127() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.awt.Font var89 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var90 = var35.getFontMetrics(var89);
    int var91 = var35.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);

  }

  public void test128() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    javax.accessibility.AccessibleContext var2 = var0.getAccessibleContext();
    java.awt.Rectangle var3 = var0.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test129() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    int var15 = 100;
    int var16 = (-1);
    int var17 = 10;
    int var18 = 0;
    int var19 = 100;
    int var20 = (-1);
    int var21 = 1;
    int var22 = 1;
    java.awt.Point var23 = org.jhotdraw.util.Geom.intersect(var15, var16, var17, var18, var19, var20, var21, var22);
    int var24 = 100;
    int var25 = (-1);
    int var26 = 10;
    int var27 = 0;
    int var28 = 100;
    int var29 = (-1);
    int var30 = 1;
    int var31 = 1;
    java.awt.Point var32 = org.jhotdraw.util.Geom.intersect(var24, var25, var26, var27, var28, var29, var30, var31);
    var0.basicDisplayBox(var23, var32);
    var0.release();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test130() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    int var17 = var6.getX();
    boolean var18 = var6.requestDefaultFocus();
    org.jhotdraw.standard.StandardDrawing var19 = new org.jhotdraw.standard.StandardDrawing();
    int var20 = 1;
    int var21 = 1;
    org.jhotdraw.contrib.PolygonFigure var22 = new org.jhotdraw.contrib.PolygonFigure(var20, var21);
    org.jhotdraw.framework.FigureEnumeration var23 = var22.figures();
    java.awt.Rectangle var24 = var22.displayBox();
    int var25 = 1;
    int var26 = 1;
    org.jhotdraw.contrib.PolygonFigure var27 = new org.jhotdraw.contrib.PolygonFigure(var25, var26);
    org.jhotdraw.framework.FigureEnumeration var28 = var27.figures();
    java.awt.Rectangle var29 = var27.displayBox();
    org.jhotdraw.framework.Figure var30 = var19.findFigure(var24, (org.jhotdraw.framework.Figure)var27);
    int var31 = 100;
    int var32 = (-1);
    java.lang.Double var33 = new java.lang.Double((-1.0d));
    java.lang.Double var34 = new java.lang.Double(100.0d);
    java.lang.Double var35 = new java.lang.Double(1.0d);
    java.awt.Point var36 = org.jhotdraw.util.Geom.polarToPoint(var33, var34, var35);
    java.lang.Double var37 = new java.lang.Double((-1.0d));
    java.lang.Double var38 = new java.lang.Double(100.0d);
    java.lang.Double var39 = new java.lang.Double(1.0d);
    java.awt.Point var40 = org.jhotdraw.util.Geom.polarToPoint(var37, var38, var39);
    org.jhotdraw.contrib.DiamondFigure var41 = new org.jhotdraw.contrib.DiamondFigure(var36, var40);
    org.jhotdraw.framework.Figure var42 = var19.findFigureInsideWithout(var31, var32, (org.jhotdraw.framework.Figure)var41);
    java.util.Iterator var43 = var19.drawingChangeListeners();
    var6.setDrawing((org.jhotdraw.framework.Drawing)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test131() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    int var17 = (-1);
    org.jhotdraw.contrib.CommandMenuItem var18 = new org.jhotdraw.contrib.CommandMenuItem((org.jhotdraw.util.Command)var16, var17);
    org.jhotdraw.util.CommandButton var19 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var16);
    java.lang.Boolean var20 = new java.lang.Boolean(false);
    var19.setDefaultCapable(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test132() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    java.lang.String var17 = "hi!";
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    org.jhotdraw.standard.StandardDrawing var21 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    org.jhotdraw.framework.Figure var35 = var21.replace((org.jhotdraw.framework.Figure)var30, (org.jhotdraw.framework.Figure)var32);
    org.jhotdraw.framework.Handle var36 = org.jhotdraw.standard.BoxHandleKit.north(var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var45 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var43.removeForeground((org.jhotdraw.framework.Painter)var45);
    org.jhotdraw.util.UndoableHandle var47 = new org.jhotdraw.util.UndoableHandle(var36, (org.jhotdraw.framework.DrawingView)var43);
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.standard.StandardDrawingView var54 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var48, var52, var53);
    org.jhotdraw.contrib.MDI_DrawApplication var55 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var56 = var55.isDoubleBuffered();
    javax.swing.JRootPane var57 = var55.getRootPane();
    javax.swing.JLayeredPane var58 = var55.getLayeredPane();
    int var59 = (-1);
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var55, var59, var60);
    var61.clearSelection();
    java.awt.Color var63 = var61.getForeground();
    var54.setBackground(var63);
    org.jhotdraw.framework.FigureEnumeration var65 = var54.selectionZOrdered();
    var65.reset();
    var43.addToSelectionAll(var65);
    var18.orphanAll(var65);
    var0.setAttribute(var17, (java.lang.Object)var65);
    int var70 = var0.overlayColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 20);

  }

  public void test133() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.TextAreaFigure var4 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var5 = "";
    var4.setText(var5);
    org.jhotdraw.figures.TextFigure var7 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var8 = var7.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    int var10 = 1;
    int var11 = 1;
    org.jhotdraw.contrib.PolygonFigure var12 = new org.jhotdraw.contrib.PolygonFigure(var10, var11);
    org.jhotdraw.framework.FigureEnumeration var13 = var12.figures();
    java.awt.Rectangle var14 = var12.displayBox();
    int var15 = 1;
    int var16 = 1;
    org.jhotdraw.contrib.PolygonFigure var17 = new org.jhotdraw.contrib.PolygonFigure(var15, var16);
    org.jhotdraw.framework.FigureEnumeration var18 = var17.figures();
    java.awt.Rectangle var19 = var17.displayBox();
    org.jhotdraw.framework.Figure var20 = var9.findFigure(var14, (org.jhotdraw.framework.Figure)var17);
    int var21 = 100;
    int var22 = (-1);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    org.jhotdraw.contrib.DiamondFigure var31 = new org.jhotdraw.contrib.DiamondFigure(var26, var30);
    org.jhotdraw.framework.Figure var32 = var9.findFigureInsideWithout(var21, var22, (org.jhotdraw.framework.Figure)var31);
    java.util.Iterator var33 = var9.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    java.awt.Component var45 = var34.add((java.awt.Component)var44);
    boolean var46 = var44.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var49 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var47, (org.jhotdraw.framework.FigureChangeListener)var48);
    java.awt.Dimension var50 = var47.size();
    var44.removeFromSelection((org.jhotdraw.framework.Figure)var47);
    var47.layout();
    java.lang.Object var53 = var47.clone();
    org.jhotdraw.framework.FigureChangeEvent var54 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var47);
    var9.figureRequestUpdate(var54);
    java.awt.Rectangle var56 = var54.getInvalidatedRectangle();
    var7.figureRequestUpdate(var54);
    var4.figureRequestUpdate(var54);
    var2.removeDependendFigure((org.jhotdraw.framework.Figure)var4);
    boolean var60 = var4.acceptsTyping();
    java.awt.Font var61 = var4.createFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test134() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    int var44 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var45 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var44);
    boolean var46 = var28.removeAll((java.util.Collection)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var49 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var48);
    org.jhotdraw.standard.StandardDrawing var50 = new org.jhotdraw.standard.StandardDrawing();
    int var51 = var48.getLayer((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    int var60 = (-1);
    int var61 = 0;
    org.jhotdraw.standard.StandardDrawingView var62 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var56, var60, var61);
    java.awt.Component var63 = var52.add((java.awt.Component)var62);
    boolean var64 = var62.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var65 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var67 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var65, (org.jhotdraw.framework.FigureChangeListener)var66);
    java.awt.Dimension var68 = var65.size();
    var62.removeFromSelection((org.jhotdraw.framework.Figure)var65);
    var65.layout();
    java.lang.Object var71 = var65.clone();
    org.jhotdraw.framework.FigureChangeEvent var72 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var65);
    java.lang.Object var73 = var72.getSource();
    var50.figureInvalidated(var72);
    org.jhotdraw.contrib.ChopPolygonConnector var75 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    int var76 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var77 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var76);
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    boolean var81 = var77.remove((java.lang.Object)var78);
    var50.orphanAll((java.util.List)var77);
    boolean var83 = var45.removeAll((java.util.Collection)var77);
    boolean var84 = var45.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test135() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    java.awt.Font var17 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    var0.setFont(var17);
    java.lang.String var19 = var0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.equals(""));

  }

  public void test136() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    var2.removeNotify();
    java.lang.String var6 = var2.getUIClassID();
    org.jhotdraw.util.CommandChoice var7 = new org.jhotdraw.util.CommandChoice();
    int var8 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var9 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var8);
    org.jhotdraw.contrib.GraphicalCompositeFigure var10 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var12 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var10, (org.jhotdraw.framework.FigureChangeListener)var11);
    boolean var13 = var9.remove((java.lang.Object)var10);
    org.jhotdraw.contrib.StandardLayouter var14 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var10);
    var7.removeItem((java.lang.Object)var10);
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var7.setEnabled(var16);
    org.jhotdraw.util.CommandChoice var18 = new org.jhotdraw.util.CommandChoice();
    int var19 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var20 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var19);
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var22 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var23 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var21, (org.jhotdraw.framework.FigureChangeListener)var22);
    boolean var24 = var20.remove((java.lang.Object)var21);
    org.jhotdraw.contrib.StandardLayouter var25 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var21);
    var18.removeItem((java.lang.Object)var21);
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    org.jhotdraw.contrib.DiamondFigure var36 = new org.jhotdraw.contrib.DiamondFigure(var31, var35);
    org.jhotdraw.framework.HandleEnumeration var37 = var36.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    org.jhotdraw.framework.Figure var41 = var27.replace((org.jhotdraw.framework.Figure)var36, (org.jhotdraw.framework.Figure)var38);
    var18.removeItem((java.lang.Object)var27);
    java.awt.event.ItemListener var43 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var7, (java.awt.event.ItemListener)var18);
    int var44 = (-1);
    java.lang.Object var45 = var7.getItemAt(var44);
    var2.removeItemListener((java.awt.event.ItemListener)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.equals("MenuUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);

  }

  public void test137() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    javax.swing.ComboBoxEditor var2 = var0.getEditor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test138() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    int var9 = 1;
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var9, var10);
    org.jhotdraw.framework.FigureSelection var12 = var11.getFigureSelection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test139() throws Throwable {

    int var0 = 0;
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.contrib.PolygonFigure.locator(var0);

  }

  public void test140() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    boolean var4 = var0.isResizable();
    int var5 = var0.getCursorType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test141() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = "hi!";
    java.lang.Long var8 = new java.lang.Long(100L);
    java.lang.Long var9 = new java.lang.Long(1L);
    var6.firePropertyChange(var7, var8, var9);
    int var11 = var6.getX();
    var2.setAttribute(var3, (java.lang.Object)var11);
    org.jhotdraw.standard.StandardDrawing var13 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.HandleEnumeration var23 = var22.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    org.jhotdraw.framework.Figure var27 = var13.replace((org.jhotdraw.framework.Figure)var22, (org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Handle var28 = org.jhotdraw.standard.BoxHandleKit.north(var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var37 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var35.removeForeground((org.jhotdraw.framework.Painter)var37);
    org.jhotdraw.util.UndoableHandle var39 = new org.jhotdraw.util.UndoableHandle(var28, (org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    javax.swing.JLayeredPane var50 = var47.getLayeredPane();
    int var51 = (-1);
    int var52 = 0;
    org.jhotdraw.standard.StandardDrawingView var53 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var47, var51, var52);
    var53.clearSelection();
    java.awt.Color var55 = var53.getForeground();
    var46.setBackground(var55);
    org.jhotdraw.framework.FigureEnumeration var57 = var46.selectionZOrdered();
    var57.reset();
    var35.addToSelectionAll(var57);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.awt.Point var64 = var35.getLocation(var63);
    java.awt.Point var65 = var2.chop(var64);
    java.lang.Double var66 = new java.lang.Double((-1.0d));
    java.lang.Double var67 = new java.lang.Double(100.0d);
    java.lang.Double var68 = new java.lang.Double(1.0d);
    java.awt.Point var69 = org.jhotdraw.util.Geom.polarToPoint(var66, var67, var68);
    org.jhotdraw.util.Bounds var70 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var65, (java.awt.geom.Point2D)var69);
    java.lang.Double var71 = new java.lang.Double((-1.0d));
    java.lang.Double var72 = new java.lang.Double(100.0d);
    java.lang.Double var73 = new java.lang.Double(1.0d);
    java.awt.Point var74 = org.jhotdraw.util.Geom.polarToPoint(var71, var72, var73);
    var70.setCenter((java.awt.geom.Point2D)var74);
    double var76 = var70.getEast();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 80.5d);

  }

  public void test142() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    int var4 = (-1);
    int var5 = 10;
    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var6 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    java.awt.Insets var7 = var6.connectionInsets();
    org.jhotdraw.framework.HandleEnumeration var8 = var6.handles();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.String var12 = var11.getName();
    java.lang.String var13 = "";
    int var14 = 100;
    var11.insert(var13, var14);
    int var16 = 100;
    int var17 = 0;
    int var18 = 0;
    int var19 = 10;
    var11.reshape(var16, var17, var18, var19);
    org.jhotdraw.standard.StandardDrawing var21 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    org.jhotdraw.framework.Figure var35 = var21.replace((org.jhotdraw.framework.Figure)var30, (org.jhotdraw.framework.Figure)var32);
    org.jhotdraw.framework.Handle var36 = org.jhotdraw.standard.BoxHandleKit.north(var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var45 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var43.removeForeground((org.jhotdraw.framework.Painter)var45);
    org.jhotdraw.util.UndoableHandle var47 = new org.jhotdraw.util.UndoableHandle(var36, (org.jhotdraw.framework.DrawingView)var43);
    org.jhotdraw.util.Undoable var48 = var47.getUndoActivity();
    java.awt.Rectangle var49 = var47.displayBox();
    var11.computeVisibleRect(var49);
    java.lang.Double var51 = new java.lang.Double(10.0d);
    java.awt.Point var52 = org.jhotdraw.util.Geom.angleToPoint(var49, var51);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    java.lang.Double var54 = new java.lang.Double(100.0d);
    java.lang.Double var55 = new java.lang.Double(1.0d);
    java.awt.Point var56 = org.jhotdraw.util.Geom.polarToPoint(var53, var54, var55);
    var6.basicDisplayBox(var52, var56);
    org.jhotdraw.framework.Figure var58 = var2.findFigureWithout(var4, var5, (org.jhotdraw.framework.Figure)var6);
    org.jhotdraw.contrib.MDI_DrawApplication var59 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var60 = var59.isDoubleBuffered();
    javax.swing.JRootPane var61 = var59.getRootPane();
    javax.swing.JLayeredPane var62 = var59.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    java.lang.String var66 = var65.getUIClassID();
    java.awt.Insets var67 = var65.getInsets();
    int var68 = (-1);
    var62.setPosition((java.awt.Component)var65, var68);
    org.jhotdraw.contrib.MDI_DrawApplication var70 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var71 = var70.isDoubleBuffered();
    int var72 = 0;
    var62.setLayer((java.awt.Component)var70, var72);
    java.awt.event.HierarchyListener[] var74 = var70.getHierarchyListeners();
    java.lang.String[] var75 = var70.getRequiredVersions();
    java.awt.Window[] var76 = var70.getOwnedWindows();
    int var77 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var78 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var77);
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var80 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var81 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var79, (org.jhotdraw.framework.FigureChangeListener)var80);
    boolean var82 = var78.remove((java.lang.Object)var79);
    org.jhotdraw.contrib.MDI_DrawApplication var83 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var84 = var83.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var85 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var83);
    boolean var86 = var83.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var87 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var83);
    var87.deactivate();
    int var89 = var78.indexOf((java.lang.Object)var87);
    var70.setIconImages((java.util.List)var78);
    var2.orphanAll((java.util.List)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));

  }

  public void test143() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.lang.Double var20 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var21 = new org.jhotdraw.standard.RelativeLocator(var19, var20);
    int var22 = (-1);
    org.jhotdraw.figures.PolyLineHandle var23 = new org.jhotdraw.figures.PolyLineHandle(var17, (org.jhotdraw.framework.Locator)var21, var22);
    int var24 = (-1);
    int var25 = 10;
    int var26 = 1;
    int var27 = 10;
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    int var39 = (-1);
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var35, var39, var40);
    var41.clearSelection();
    java.awt.Color var43 = var41.getForeground();
    var34.setBackground(var43);
    int var45 = var34.getX();
    boolean var46 = var34.requestDefaultFocus();
    org.jhotdraw.standard.StandardDrawing var47 = new org.jhotdraw.standard.StandardDrawing();
    int var48 = 1;
    int var49 = 1;
    org.jhotdraw.contrib.PolygonFigure var50 = new org.jhotdraw.contrib.PolygonFigure(var48, var49);
    org.jhotdraw.framework.FigureEnumeration var51 = var50.figures();
    java.awt.Rectangle var52 = var50.displayBox();
    int var53 = 1;
    int var54 = 1;
    org.jhotdraw.contrib.PolygonFigure var55 = new org.jhotdraw.contrib.PolygonFigure(var53, var54);
    org.jhotdraw.framework.FigureEnumeration var56 = var55.figures();
    java.awt.Rectangle var57 = var55.displayBox();
    org.jhotdraw.framework.Figure var58 = var47.findFigure(var52, (org.jhotdraw.framework.Figure)var55);
    int var59 = 100;
    int var60 = (-1);
    java.lang.Double var61 = new java.lang.Double((-1.0d));
    java.lang.Double var62 = new java.lang.Double(100.0d);
    java.lang.Double var63 = new java.lang.Double(1.0d);
    java.awt.Point var64 = org.jhotdraw.util.Geom.polarToPoint(var61, var62, var63);
    java.lang.Double var65 = new java.lang.Double((-1.0d));
    java.lang.Double var66 = new java.lang.Double(100.0d);
    java.lang.Double var67 = new java.lang.Double(1.0d);
    java.awt.Point var68 = org.jhotdraw.util.Geom.polarToPoint(var65, var66, var67);
    org.jhotdraw.contrib.DiamondFigure var69 = new org.jhotdraw.contrib.DiamondFigure(var64, var68);
    org.jhotdraw.framework.Figure var70 = var47.findFigureInsideWithout(var59, var60, (org.jhotdraw.framework.Figure)var69);
    java.util.Iterator var71 = var47.drawingChangeListeners();
    var34.setDrawing((org.jhotdraw.framework.Drawing)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.invokeStep(var24, var25, var26, var27, (org.jhotdraw.framework.DrawingView)var34);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == null);

  }

  public void test144() throws Throwable {

    int var0 = (-1);
    org.jhotdraw.util.PaletteLayout var1 = new org.jhotdraw.util.PaletteLayout(var0);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var2 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var2.start();
    org.jhotdraw.framework.Tool var4 = var2.tool();
    var2.transferFocus();
    var1.removeLayoutComponent((java.awt.Component)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.applet.AppletContext var7 = var2.getAppletContext();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test145() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    org.jhotdraw.util.UndoManager var15 = var0.getUndoManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test146() throws Throwable {

    org.jhotdraw.samples.javadraw.BouncingDrawing var0 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    java.awt.Component var16 = var5.add((java.awt.Component)var15);
    boolean var17 = var15.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    java.awt.Dimension var21 = var18.size();
    var15.removeFromSelection((org.jhotdraw.framework.Figure)var18);
    var18.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var24 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var1, (org.jhotdraw.framework.Figure)var18);
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.framework.Figure var27 = var18.findFigureInside(var25, var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    var41.layout();
    java.lang.Object var47 = var41.clone();
    int var48 = 1;
    int var49 = 1;
    org.jhotdraw.contrib.PolygonFigure var50 = new org.jhotdraw.contrib.PolygonFigure(var48, var49);
    org.jhotdraw.framework.FigureEnumeration var51 = var50.figures();
    java.awt.Rectangle var52 = var50.displayBox();
    org.jhotdraw.framework.Figure var53 = var18.replace((org.jhotdraw.framework.Figure)var41, (org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.framework.Figure var54 = var0.remove((org.jhotdraw.framework.Figure)var18);
    var0.release();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test147() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    java.awt.Color var14 = var12.getForeground();
    var0.setFillColor(var14);
    java.awt.Rectangle var16 = var0.displayBox();
    java.awt.Color var17 = var0.getFillColor();
    java.awt.Rectangle var18 = var0.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test148() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    boolean var3 = var1.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var6 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var4, (org.jhotdraw.framework.FigureChangeListener)var5);
    int var7 = var5.getZValue();
    java.lang.Object var8 = var5.clone();
    org.jhotdraw.standard.CreationTool var9 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var1, (org.jhotdraw.framework.Figure)var5);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var1.setFocusTraversalPolicyProvider(var10);
    org.jhotdraw.standard.CutCommand var12 = new org.jhotdraw.standard.CutCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test149() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    int var18 = (-1);
    int var19 = 0;
    org.jhotdraw.standard.StandardDrawingView var20 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var14, var18, var19);
    java.awt.Component var21 = var10.add((java.awt.Component)var20);
    boolean var22 = var20.getInheritsPopupMenu();
    javax.swing.InputMap var23 = var20.getInputMap();
    java.lang.Boolean var24 = new java.lang.Boolean(false);
    var20.setReadOnly(var24);
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    var32.clearSelection();
    java.awt.Color var34 = var32.getForeground();
    org.jhotdraw.contrib.DesktopEvent var35 = new org.jhotdraw.contrib.DesktopEvent((org.jhotdraw.contrib.Desktop)var9, (org.jhotdraw.framework.DrawingView)var20, (org.jhotdraw.framework.DrawingView)var32);
    java.awt.Component[] var36 = var32.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test150() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.south((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.standard.StandardDrawing var4 = new org.jhotdraw.standard.StandardDrawing();
    int var5 = 1;
    int var6 = 1;
    org.jhotdraw.contrib.PolygonFigure var7 = new org.jhotdraw.contrib.PolygonFigure(var5, var6);
    org.jhotdraw.framework.FigureEnumeration var8 = var7.figures();
    java.awt.Rectangle var9 = var7.displayBox();
    int var10 = 1;
    int var11 = 1;
    org.jhotdraw.contrib.PolygonFigure var12 = new org.jhotdraw.contrib.PolygonFigure(var10, var11);
    org.jhotdraw.framework.FigureEnumeration var13 = var12.figures();
    java.awt.Rectangle var14 = var12.displayBox();
    org.jhotdraw.framework.Figure var15 = var4.findFigure(var9, (org.jhotdraw.framework.Figure)var12);
    int var16 = 100;
    int var17 = (-1);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    org.jhotdraw.contrib.DiamondFigure var26 = new org.jhotdraw.contrib.DiamondFigure(var21, var25);
    org.jhotdraw.framework.Figure var27 = var4.findFigureInsideWithout(var16, var17, (org.jhotdraw.framework.Figure)var26);
    java.util.Iterator var28 = var4.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    java.awt.Component var40 = var29.add((java.awt.Component)var39);
    boolean var41 = var39.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var43 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var44 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var42, (org.jhotdraw.framework.FigureChangeListener)var43);
    java.awt.Dimension var45 = var42.size();
    var39.removeFromSelection((org.jhotdraw.framework.Figure)var42);
    var42.layout();
    java.lang.Object var48 = var42.clone();
    org.jhotdraw.framework.FigureChangeEvent var49 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var42);
    var4.figureRequestUpdate(var49);
    java.awt.Rectangle var51 = var49.getInvalidatedRectangle();
    var1.figureInvalidated(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test151() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    boolean var7 = var2.isFocusPainted();
    java.lang.String var8 = "";
    var2.setLabel(var8);
    javax.swing.ButtonModel var10 = var2.getModel();
    java.awt.Dimension var11 = var2.getMinimumSize();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JMenu var14 = var12.createLookAndFeelMenu();
    javax.swing.Icon var15 = var14.getRolloverIcon();
    java.lang.String var16 = "hi!";
    var14.setText(var16);
    boolean var18 = var14.isLightweight();
    boolean var19 = var14.isPopupMenuVisible();
    boolean var20 = var14.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JMenu var23 = var21.createLookAndFeelMenu();
    java.lang.Character var24 = new java.lang.Character('a');
    var23.setMnemonic(var24);
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JMenu var28 = var26.createLookAndFeelMenu();
    java.lang.String var29 = var28.getName();
    boolean var30 = var23.isMenuComponent((java.awt.Component)var28);
    java.lang.Boolean var31 = new java.lang.Boolean(true);
    var28.setBorderPainted(var31);
    javax.swing.JMenuItem var33 = var14.add((javax.swing.JMenuItem)var28);
    var28.removeNotify();
    java.lang.Boolean var35 = new java.lang.Boolean(false);
    var28.setEnabled(var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JMenu var39 = var37.createLookAndFeelMenu();
    java.lang.String var40 = var39.getName();
    var39.revalidate();
    int var42 = var39.getIconTextGap();
    int var43 = 1;
    javax.swing.JMenuItem var44 = var39.getItem(var43);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JMenu var47 = var45.createLookAndFeelMenu();
    java.lang.String var48 = var47.getName();
    java.lang.String var49 = "";
    int var50 = 100;
    var47.insert(var49, var50);
    boolean var52 = var47.isFocusPainted();
    java.lang.String var53 = "";
    var47.setLabel(var53);
    javax.swing.ButtonModel var55 = var47.getModel();
    var39.setModel(var55);
    var28.setModel(var55);
    var2.setModel(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test152() throws Throwable {

    org.jhotdraw.contrib.html.DisposableResourceManager var0 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.getManager();
    org.jhotdraw.contrib.html.DisposableResourceManager var1 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.getManager();
    java.lang.Character var2 = new java.lang.Character(' ');
    org.jhotdraw.contrib.html.DisposableResourceHolder var3 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var2);
    boolean var4 = var1.managesResource(var3);
    var0.registerResource(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test153() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    java.awt.Rectangle var7 = var0.getBounds();
    java.lang.String var8 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("JHotDraw"));

  }

  public void test154() throws Throwable {

    int var0 = (-1);
    int var1 = 10;
    int var2 = 0;
    int var3 = 100;
    long var4 = org.jhotdraw.util.Geom.length2(var0, var1, var2, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 8101L);

  }

  public void test155() throws Throwable {

    org.jhotdraw.contrib.html.ETSLADisposalStrategy var0 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    org.jhotdraw.contrib.html.StandardDisposableResourceManager var1 = new org.jhotdraw.contrib.html.StandardDisposableResourceManager((org.jhotdraw.contrib.html.ResourceDisposabilityStrategy)var0);

  }

  public void test156() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    var0.setEnabled(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test157() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    org.jhotdraw.contrib.GraphicalCompositeFigure var8 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var9 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var8);
    int var10 = 1;
    int var11 = (-1);
    boolean var12 = var8.containsPoint(var10, var11);
    org.jhotdraw.contrib.html.HTMLTextAreaTool var13 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test158() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    org.jhotdraw.framework.Tool var89 = var35.tool();
    int var90 = var35.countComponents();
    java.lang.String var91 = var35.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91.equals(""));

  }

  public void test159() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var1 = var0.getObservedFigure();
    java.awt.Font var2 = var0.getFont();
    int var3 = 1;
    var0.setZValue(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test160() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var17 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var17.start();
    java.awt.Color var19 = var17.getForeground();
    var17.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    java.lang.String var28 = var27.getUIClassID();
    java.awt.Insets var29 = var27.getInsets();
    int var30 = (-1);
    var24.setPosition((java.awt.Component)var27, var30);
    int var32 = var24.highestLayer();
    var24.disable();
    var17.setLayeredPane(var24);
    var12.remove((java.awt.Component)var17);
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var37 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var36);
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var39 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var38);
    var36.addDependendFigure((org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.framework.Handle var41 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.contrib.CompositeFigureCreationTool var42 = new org.jhotdraw.contrib.CompositeFigureCreationTool((org.jhotdraw.framework.DrawingEditor)var12, (org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.samples.javadraw.URLTool var43 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-30000));

  }

  public void test161() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.awt.Font var89 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var90 = var35.getFontMetrics(var89);
    java.lang.Boolean var91 = new java.lang.Boolean(true);
    var35.setEnabled(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test162() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    var0.updateUI();
    boolean var3 = var0.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test163() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    org.jhotdraw.figures.TextFigure var2 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var2);
    var0.setResource((java.lang.Object)var2);
    org.jhotdraw.standard.SingleFigureEnumerator var5 = new org.jhotdraw.standard.SingleFigureEnumerator((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.standard.StandardDrawing var6 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var7 = new java.lang.Double((-1.0d));
    java.lang.Double var8 = new java.lang.Double(100.0d);
    java.lang.Double var9 = new java.lang.Double(1.0d);
    java.awt.Point var10 = org.jhotdraw.util.Geom.polarToPoint(var7, var8, var9);
    java.lang.Double var11 = new java.lang.Double((-1.0d));
    java.lang.Double var12 = new java.lang.Double(100.0d);
    java.lang.Double var13 = new java.lang.Double(1.0d);
    java.awt.Point var14 = org.jhotdraw.util.Geom.polarToPoint(var11, var12, var13);
    org.jhotdraw.contrib.DiamondFigure var15 = new org.jhotdraw.contrib.DiamondFigure(var10, var14);
    org.jhotdraw.framework.HandleEnumeration var16 = var15.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    org.jhotdraw.framework.Figure var20 = var6.replace((org.jhotdraw.framework.Figure)var15, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.framework.Handle var21 = org.jhotdraw.standard.BoxHandleKit.north(var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var30 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var28.removeForeground((org.jhotdraw.framework.Painter)var30);
    org.jhotdraw.util.UndoableHandle var32 = new org.jhotdraw.util.UndoableHandle(var21, (org.jhotdraw.framework.DrawingView)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    var46.clearSelection();
    java.awt.Color var48 = var46.getForeground();
    var39.setBackground(var48);
    org.jhotdraw.framework.FigureEnumeration var50 = var39.selectionZOrdered();
    var50.reset();
    var28.addToSelectionAll(var50);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    java.lang.Double var54 = new java.lang.Double(100.0d);
    java.lang.Double var55 = new java.lang.Double(1.0d);
    java.awt.Point var56 = org.jhotdraw.util.Geom.polarToPoint(var53, var54, var55);
    java.awt.Point var57 = var28.getLocation(var56);
    java.lang.Double var58 = new java.lang.Double((-1.0d));
    java.lang.Double var59 = new java.lang.Double(100.0d);
    java.lang.Double var60 = new java.lang.Double(1.0d);
    java.awt.Point var61 = org.jhotdraw.util.Geom.polarToPoint(var58, var59, var60);
    var2.basicDisplayBox(var57, var61);
    org.jhotdraw.contrib.html.TextHolderContentProducer var63 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test164() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    boolean var2 = var0.isFocusTraversalPolicySet();
    var0.destroy();
    javax.swing.TransferHandler var4 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test165() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    int var17 = var6.getX();
    boolean var18 = var6.requestDefaultFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Dimension var19 = var6.getMinimumSize();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test166() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.application.DrawApplication var1 = new org.jhotdraw.application.DrawApplication(var0);
    boolean var2 = var1.isFocused();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test167() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    javax.swing.JInternalFrame var10 = var9.getSelectedFrame();
    var9.tileFramesVertically();
    var9.arrangeFramesHorizontally();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);

  }

  public void test168() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    java.awt.Dimension var18 = var17.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test169() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    java.awt.Color var14 = var12.getForeground();
    var0.setFillColor(var14);
    java.awt.Color var16 = var0.getBorderColor();
    java.awt.Color var17 = var0.getFillColor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test170() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    int var35 = var0.getMaximumRowCount();
    var0.firePopupMenuWillBecomeVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 8);

  }

  public void test171() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    java.lang.String var4 = "";
    java.lang.Character var5 = new java.lang.Character('#');
    java.lang.Character var6 = new java.lang.Character('a');
    var0.firePropertyChange(var4, var5, var6);
    int var8 = var0.getState();
    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var9 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();
    int var10 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var11 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    boolean var15 = var11.remove((java.lang.Object)var12);
    org.jhotdraw.util.collections.jdk11.ListWrapper var16 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var11);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JMenu var19 = var17.createLookAndFeelMenu();
    var17.open();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    javax.swing.JLayeredPane var28 = var25.getLayeredPane();
    int var29 = (-1);
    int var30 = 0;
    org.jhotdraw.standard.StandardDrawingView var31 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var25, var29, var30);
    java.awt.Component var32 = var21.add((java.awt.Component)var31);
    boolean var33 = var31.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var36 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var34, (org.jhotdraw.framework.FigureChangeListener)var35);
    java.awt.Dimension var37 = var34.size();
    var31.removeFromSelection((org.jhotdraw.framework.Figure)var34);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    javax.swing.JRootPane var45 = var43.getRootPane();
    javax.swing.JLayeredPane var46 = var43.getLayeredPane();
    int var47 = (-1);
    int var48 = 0;
    org.jhotdraw.standard.StandardDrawingView var49 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var43, var47, var48);
    java.awt.Component var50 = var39.add((java.awt.Component)var49);
    var31.setEditor((org.jhotdraw.framework.DrawingEditor)var39);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    java.lang.String var59 = var58.getUIClassID();
    java.awt.Insets var60 = var58.getInsets();
    int var61 = (-1);
    var55.setPosition((java.awt.Component)var58, var61);
    boolean var63 = var55.isDisplayable();
    boolean var64 = var31.isFocusCycleRoot((java.awt.Container)var55);
    var17.setLayeredPane(var55);
    boolean var66 = var16.remove((java.lang.Object)var55);
    java.util.List var67 = var9.createList((java.util.Collection)var16);
    var0.setIconImages((java.util.List)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test172() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    java.lang.String var4 = var0.getApplicationName();
    org.jhotdraw.contrib.zoom.ZoomDrawingView var5 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    java.lang.Float var6 = new java.lang.Float(10.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.zoom(var6);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.equals("JHotDraw"));

  }

  public void test173() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    java.util.List var18 = var0.getIconImages();
    org.jhotdraw.standard.FigureEnumerator var19 = new org.jhotdraw.standard.FigureEnumerator((java.util.Collection)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Figure var20 = var19.nextFigure();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test174() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    boolean var9 = var8.undo();
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var8.setUndoable(var10);
    boolean var12 = var8.redo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test175() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    boolean var4 = var0.isFocusTraversalPolicyProvider();
    boolean var5 = var0.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test176() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    boolean var22 = var16.getInheritsPopupMenu();
    java.lang.Boolean var23 = new java.lang.Boolean(true);
    var16.setIgnoreRepaint(var23);
    java.lang.String var25 = var16.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.equals("MenuUI"));

  }

  public void test177() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    org.jhotdraw.figures.ArrowTip var12 = new org.jhotdraw.figures.ArrowTip();
    int var13 = 1;
    int var14 = 1;
    int var15 = 10;
    int var16 = 0;
    java.awt.Polygon var17 = var12.outline(var13, var14, var15, var16);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    var24.clearSelection();
    java.awt.Color var26 = var24.getForeground();
    var12.setFillColor(var26);
    java.awt.Rectangle var28 = var12.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var29 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var0, var28);
    int var30 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var31 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var30);
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    boolean var35 = var31.remove((java.lang.Object)var32);
    org.jhotdraw.util.collections.jdk11.ListWrapper var36 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var31);
    var31.clear();
    var0.orphanAll((java.util.List)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test178() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    int var55 = 100;
    int var56 = (-1);
    int var57 = 10;
    int var58 = 0;
    int var59 = 100;
    int var60 = (-1);
    int var61 = 1;
    int var62 = 1;
    java.awt.Point var63 = org.jhotdraw.util.Geom.intersect(var55, var56, var57, var58, var59, var60, var61, var62);
    var54.setCenter((java.awt.geom.Point2D)var63);
    java.lang.Double var65 = new java.lang.Double(0.0d);
    java.lang.Double var66 = new java.lang.Double(1.0d);
    var54.includePoint(var65, var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test179() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    org.jhotdraw.contrib.html.DisposableResourceHolder var9 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var8);
    boolean var10 = var8.undo();
    org.jhotdraw.framework.DrawingView var11 = var8.getDrawingView();
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    var8.setRedoable(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    java.awt.Component var25 = var14.add((java.awt.Component)var24);
    boolean var26 = var24.getInheritsPopupMenu();
    java.lang.Boolean var27 = new java.lang.Boolean(true);
    var24.setEnabled(var27);
    org.jhotdraw.standard.StandardDrawing var29 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var30 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.framework.Figure var32 = var29.remove((org.jhotdraw.framework.Figure)var30);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    var46.clearSelection();
    java.awt.Color var48 = var46.getForeground();
    var39.setBackground(var48);
    org.jhotdraw.framework.FigureEnumeration var50 = var39.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var51 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var52 = var51.isDoubleBuffered();
    javax.swing.JRootPane var53 = var51.getRootPane();
    javax.swing.JLayeredPane var54 = var51.getLayeredPane();
    int var55 = (-1);
    int var56 = 0;
    org.jhotdraw.standard.StandardDrawingView var57 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var51, var55, var56);
    org.jhotdraw.contrib.MDI_DrawApplication var58 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var59 = var58.isDoubleBuffered();
    javax.swing.JRootPane var60 = var58.getRootPane();
    javax.swing.JLayeredPane var61 = var58.getLayeredPane();
    int var62 = (-1);
    int var63 = 0;
    org.jhotdraw.standard.StandardDrawingView var64 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var58, var62, var63);
    var64.clearSelection();
    java.awt.Color var66 = var64.getForeground();
    var57.setBackground(var66);
    org.jhotdraw.framework.FigureEnumeration var68 = var57.selectionZOrdered();
    var39.addToSelectionAll(var68);
    var29.orphanAll(var68);
    int var71 = 1;
    int var72 = 100;
    java.lang.Boolean var73 = new java.lang.Boolean(false);
    org.jhotdraw.framework.FigureEnumeration var74 = var24.insertFigures(var68, var71, var72, var73);
    var8.setAffectedFigures(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test180() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.figures.ArrowTip var16 = new org.jhotdraw.figures.ArrowTip();
    int var17 = 1;
    int var18 = 1;
    int var19 = 10;
    int var20 = 0;
    java.awt.Polygon var21 = var16.outline(var17, var18, var19, var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    java.awt.Color var30 = var28.getForeground();
    var16.setFillColor(var30);
    java.awt.Rectangle var32 = var16.displayBox();
    var0.init(var32);
    java.lang.String var34 = "hi!";
    var0.setTitle(var34);
    org.jhotdraw.figures.LineFigure var36 = new org.jhotdraw.figures.LineFigure();
    int var37 = 100;
    int var38 = 1;
    boolean var39 = var36.joinSegments(var37, var38);
    int var40 = 100;
    var0.sendToLayer((org.jhotdraw.framework.Figure)var36, var40);
    java.lang.String var42 = "";
    org.jhotdraw.framework.FigureAttributeConstant var43 = new org.jhotdraw.framework.FigureAttributeConstant(var42);
    java.lang.Object var44 = var36.getAttribute(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);

  }

  public void test181() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication(var0);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var2 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var2.start();
    java.awt.Color var4 = var2.getForeground();
    org.jhotdraw.standard.SelectAreaTracker var5 = new org.jhotdraw.standard.SelectAreaTracker((org.jhotdraw.framework.DrawingEditor)var1, var4);

  }

  public void test182() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    java.awt.Component.BaselineResizeBehavior var44 = var10.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test183() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 100;
    int var13 = (-1);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.Figure var23 = var0.findFigureInsideWithout(var12, var13, (org.jhotdraw.framework.Figure)var22);
    java.util.Iterator var24 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    javax.swing.JLayeredPane var28 = var25.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    java.awt.Component var36 = var25.add((java.awt.Component)var35);
    boolean var37 = var35.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    java.awt.Dimension var41 = var38.size();
    var35.removeFromSelection((org.jhotdraw.framework.Figure)var38);
    var38.layout();
    java.lang.Object var44 = var38.clone();
    org.jhotdraw.framework.FigureChangeEvent var45 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var38);
    var0.figureRequestUpdate(var45);
    org.jhotdraw.figures.ShortestDistanceConnector var47 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test184() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    int var9 = (-1);
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var5, var9, var10);
    var11.clearSelection();
    org.jhotdraw.util.UndoableAdapter var13 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var11);
    org.jhotdraw.contrib.html.DisposableResourceHolder var14 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var13);
    boolean var15 = var13.undo();
    var4.setUndoActivity((org.jhotdraw.util.Undoable)var13);
    var4.deactivate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test185() throws Throwable {

    org.jhotdraw.figures.NullFigure var0 = new org.jhotdraw.figures.NullFigure();
    java.lang.String var1 = "hi!";
    java.lang.Object var2 = var0.getAttribute(var1);
    boolean var3 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test186() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    java.awt.Point var22 = var2.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test187() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    java.util.List var18 = var0.getIconImages();
    org.jhotdraw.standard.HandleEnumerator var19 = new org.jhotdraw.standard.HandleEnumerator((java.util.Collection)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Handle var20 = var19.nextHandle();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test188() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    java.awt.event.MouseListener[] var7 = var0.getMouseListeners();
    org.jhotdraw.standard.StandardDrawing var8 = new org.jhotdraw.standard.StandardDrawing();
    int var9 = 1;
    int var10 = 1;
    org.jhotdraw.contrib.PolygonFigure var11 = new org.jhotdraw.contrib.PolygonFigure(var9, var10);
    org.jhotdraw.framework.FigureEnumeration var12 = var11.figures();
    java.awt.Rectangle var13 = var11.displayBox();
    int var14 = 1;
    int var15 = 1;
    org.jhotdraw.contrib.PolygonFigure var16 = new org.jhotdraw.contrib.PolygonFigure(var14, var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var16.figures();
    java.awt.Rectangle var18 = var16.displayBox();
    org.jhotdraw.framework.Figure var19 = var8.findFigure(var13, (org.jhotdraw.framework.Figure)var16);
    int var20 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var21 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var20);
    var8.orphanAll((java.util.List)var21);
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var24 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var23);
    org.jhotdraw.standard.StandardDrawing var25 = new org.jhotdraw.standard.StandardDrawing();
    int var26 = var23.getLayer((org.jhotdraw.framework.Figure)var25);
    java.awt.Rectangle var27 = var25.displayBox();
    org.jhotdraw.framework.Figure var28 = var8.orphan((org.jhotdraw.framework.Figure)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.newWindow((org.jhotdraw.framework.Drawing)var25);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test189() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.framework.Tool var12 = var10.tool();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    java.lang.String var16 = var15.getUIClassID();
    java.awt.Insets var17 = var15.getInsets();
    java.awt.Insets var18 = var10.getInsets(var17);
    org.jhotdraw.standard.StandardDrawing var19 = new org.jhotdraw.standard.StandardDrawing();
    int var20 = 1;
    int var21 = 1;
    org.jhotdraw.contrib.PolygonFigure var22 = new org.jhotdraw.contrib.PolygonFigure(var20, var21);
    org.jhotdraw.framework.FigureEnumeration var23 = var22.figures();
    java.awt.Rectangle var24 = var22.displayBox();
    int var25 = 1;
    int var26 = 1;
    org.jhotdraw.contrib.PolygonFigure var27 = new org.jhotdraw.contrib.PolygonFigure(var25, var26);
    org.jhotdraw.framework.FigureEnumeration var28 = var27.figures();
    java.awt.Rectangle var29 = var27.displayBox();
    org.jhotdraw.framework.Figure var30 = var19.findFigure(var24, (org.jhotdraw.framework.Figure)var27);
    org.jhotdraw.figures.ArrowTip var31 = new org.jhotdraw.figures.ArrowTip();
    int var32 = 1;
    int var33 = 1;
    int var34 = 10;
    int var35 = 0;
    java.awt.Polygon var36 = var31.outline(var32, var33, var34, var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    java.awt.Color var45 = var43.getForeground();
    var31.setFillColor(var45);
    java.awt.Rectangle var47 = var31.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var48 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var19, var47);
    var10.drawingTitleChanged(var48);
    java.lang.String var50 = var10.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);

  }

  public void test190() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    var17.repairDamage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test191() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    javax.swing.event.AncestorListener[] var37 = var33.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test192() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    org.jhotdraw.util.Command var25 = var18.getCommand();
    float var26 = var18.getAlignmentY();
    int var27 = 1;
    int var28 = 10;
    int var29 = 10;
    int var30 = (-1);
    var18.reshape(var27, var28, var29, var30);
    java.lang.String var32 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.standard.PasteCommand var37 = new org.jhotdraw.standard.PasteCommand(var32, (org.jhotdraw.framework.DrawingEditor)var33);
    var18.setCommand((org.jhotdraw.util.Command)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test193() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var1 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var2 = var1.handles();
    org.jhotdraw.framework.Figure var3 = var0.remove((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var5 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var4);
    int var6 = 1;
    int var7 = (-1);
    boolean var8 = var4.containsPoint(var6, var7);
    var1.addFigureChangeListener((org.jhotdraw.framework.FigureChangeListener)var4);
    int var10 = 0;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var11 = var1.pointAt(var10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test194() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    var13.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var15);
    boolean var18 = var13.requestFocusInWindow();
    java.lang.String var19 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    java.lang.String var27 = var26.getUIClassID();
    java.awt.Insets var28 = var26.getInsets();
    int var29 = (-1);
    var23.setPosition((java.awt.Component)var26, var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    int var33 = 0;
    var23.setLayer((java.awt.Component)var31, var33);
    org.jhotdraw.figures.UngroupCommand var35 = new org.jhotdraw.figures.UngroupCommand(var19, (org.jhotdraw.framework.DrawingEditor)var31);
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    java.awt.Component var47 = var36.add((java.awt.Component)var46);
    boolean var48 = var46.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var51 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var49, (org.jhotdraw.framework.FigureChangeListener)var50);
    java.awt.Dimension var52 = var49.size();
    var46.removeFromSelection((org.jhotdraw.framework.Figure)var49);
    var35.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var46);
    boolean var55 = var35.isExecutable();
    var13.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var35);
    java.lang.String var57 = "";
    var35.setName(var57);
    var0.setAttribute(var2, (java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test195() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.String var1 = "";
    java.lang.String var2 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var3 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var3.start();
    org.jhotdraw.standard.CopyCommand var5 = new org.jhotdraw.standard.CopyCommand(var2, (org.jhotdraw.framework.DrawingEditor)var3);
    java.lang.Object var6 = var3.getTreeLock();
    org.jhotdraw.figures.InsertImageCommand var7 = new org.jhotdraw.figures.InsertImageCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }

  }

  public void test196() throws Throwable {

    org.jhotdraw.contrib.html.DisposableResourceManager var0 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.getManager();
    java.util.Iterator var1 = var0.getResources();

  }

  public void test197() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    java.lang.String var11 = var10.getUIClassID();
    java.awt.Insets var12 = var10.getInsets();
    int var13 = (-1);
    var7.setPosition((java.awt.Component)var10, var13);
    int var15 = var7.highestLayer();
    var7.disable();
    var0.setLayeredPane(var7);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JMenu var20 = var18.createLookAndFeelMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var22 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var23 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var21, (org.jhotdraw.framework.FigureChangeListener)var22);
    java.awt.Dimension var24 = var21.size();
    var20.setPreferredSize(var24);
    int var26 = var7.getLayer((java.awt.Component)var20);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JMenu var29 = var27.createLookAndFeelMenu();
    java.lang.String var30 = var29.getName();
    java.lang.String var31 = "";
    int var32 = 100;
    var29.insert(var31, var32);
    boolean var34 = var29.isFocusPainted();
    java.lang.String var35 = "";
    var29.setLabel(var35);
    javax.swing.ButtonModel var37 = var29.getModel();
    var20.setModel(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-30000));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test198() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    java.awt.Rectangle var36 = var0.displayBox();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var38 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var37);
    org.jhotdraw.standard.StandardDrawing var39 = new org.jhotdraw.standard.StandardDrawing();
    int var40 = var37.getLayer((org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    javax.swing.JLayeredPane var44 = var41.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    java.awt.Component var52 = var41.add((java.awt.Component)var51);
    boolean var53 = var51.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var56 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var54, (org.jhotdraw.framework.FigureChangeListener)var55);
    java.awt.Dimension var57 = var54.size();
    var51.removeFromSelection((org.jhotdraw.framework.Figure)var54);
    var54.layout();
    java.lang.Object var60 = var54.clone();
    org.jhotdraw.framework.FigureChangeEvent var61 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var54);
    java.lang.Object var62 = var61.getSource();
    var39.figureInvalidated(var61);
    int var64 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var65 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var64);
    java.util.Iterator var66 = var65.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    boolean var69 = var67.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    int var73 = var71.getZValue();
    java.lang.Object var74 = var71.clone();
    org.jhotdraw.standard.CreationTool var75 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var67, (org.jhotdraw.framework.Figure)var71);
    int var76 = 1;
    int var77 = 0;
    org.jhotdraw.standard.StandardDrawingView var78 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var76, var77);
    boolean var79 = var65.contains((java.lang.Object)var77);
    var39.orphanAll((java.util.List)var65);
    int var81 = 1;
    int var82 = 100;
    boolean var83 = var39.containsPoint(var81, var82);
    var0.addDependendFigure((org.jhotdraw.framework.Figure)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test199() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);
    javax.swing.event.MenuListener[] var8 = var6.getMenuListeners();

  }

  public void test200() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.Float var1 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    java.awt.Container var4 = var2.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var5 = new org.jhotdraw.contrib.zoom.ZoomCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    org.jhotdraw.framework.DrawingEditor var6 = var5.getDrawingEditor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test201() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JMenu var3 = var1.createLookAndFeelMenu();
    javax.swing.Icon var4 = var3.getRolloverIcon();
    java.lang.String var5 = "hi!";
    var3.setText(var5);
    boolean var7 = var3.isLightweight();
    boolean var8 = var3.isPopupMenuVisible();
    boolean var9 = var3.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JMenu var12 = var10.createLookAndFeelMenu();
    java.lang.Character var13 = new java.lang.Character('a');
    var12.setMnemonic(var13);
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JMenu var17 = var15.createLookAndFeelMenu();
    java.lang.String var18 = var17.getName();
    boolean var19 = var12.isMenuComponent((java.awt.Component)var17);
    java.lang.Boolean var20 = new java.lang.Boolean(true);
    var17.setBorderPainted(var20);
    javax.swing.JMenuItem var22 = var3.add((javax.swing.JMenuItem)var17);
    var17.removeNotify();
    java.lang.Boolean var24 = new java.lang.Boolean(false);
    var17.setEnabled(var24);
    boolean var26 = var17.isArmed();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    boolean var29 = var27.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var32 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var30, (org.jhotdraw.framework.FigureChangeListener)var31);
    int var33 = var31.getZValue();
    java.lang.Object var34 = var31.clone();
    org.jhotdraw.standard.CreationTool var35 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var27, (org.jhotdraw.framework.Figure)var31);
    int var36 = 1;
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var36, var37);
    boolean var39 = var17.isMenuComponent((java.awt.Component)var27);
    org.jhotdraw.util.RedoCommand var40 = new org.jhotdraw.util.RedoCommand(var0, (org.jhotdraw.framework.DrawingEditor)var27);
    org.jhotdraw.util.Undoable var41 = var40.getUndoActivity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);

  }

  public void test202() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    java.lang.Boolean var10 = new java.lang.Boolean(true);
    var2.setFocusTraversalPolicyProvider(var10);
    var2.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test203() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.framework.Tool var5 = var0.getDefaultTool();
    var0.open();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test204() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = var2.getLabel();
    java.lang.Boolean var5 = new java.lang.Boolean(false);
    var2.setContentAreaFilled(var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JMenu var9 = var7.createLookAndFeelMenu();
    javax.swing.Icon var10 = var9.getRolloverIcon();
    javax.swing.JPopupMenu var11 = var9.getComponentPopupMenu();
    java.lang.Boolean var12 = new java.lang.Boolean(true);
    var9.setSelected(var12);
    var2.remove((javax.swing.JMenuItem)var9);
    java.awt.Cursor var15 = var2.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.equals("Look'n'Feel"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test205() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    int var48 = 10;
    int var49 = (-1);
    org.jhotdraw.util.StandardStorageFormat var50 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var51 = "hi!";
    org.jhotdraw.standard.StandardDrawing var52 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var53 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var54 = var53.handles();
    org.jhotdraw.framework.Figure var55 = var52.remove((org.jhotdraw.framework.Figure)var53);
    java.lang.String var56 = var50.store(var51, (org.jhotdraw.framework.Drawing)var52);
    java.util.Iterator var57 = var52.drawingChangeListeners();
    org.jhotdraw.figures.PolyLineFigure var58 = new org.jhotdraw.figures.PolyLineFigure();
    var52.sendToBack((org.jhotdraw.framework.Figure)var58);
    var17.invokeStep(var48, var49, (org.jhotdraw.framework.Drawing)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56.equals("hi!.draw"));

  }

  public void test206() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var1 = var0.textDisplayBox();
    int var2 = var0.overlayColumns();
    java.lang.String var3 = var0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.equals(""));

  }

  public void test207() throws Throwable {

    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    java.awt.Insets var1 = var0.connectionInsets();
    org.jhotdraw.framework.HandleEnumeration var2 = var0.handles();
    int var3 = 0;
    int var4 = (-1);
    org.jhotdraw.framework.Connector var5 = var0.connectorAt(var3, var4);
    var0.invalidate();

  }

  public void test208() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.figures.ArrowTip var16 = new org.jhotdraw.figures.ArrowTip();
    int var17 = 1;
    int var18 = 1;
    int var19 = 10;
    int var20 = 0;
    java.awt.Polygon var21 = var16.outline(var17, var18, var19, var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    java.awt.Color var30 = var28.getForeground();
    var16.setFillColor(var30);
    java.awt.Rectangle var32 = var16.displayBox();
    var0.init(var32);
    java.lang.String var34 = "hi!";
    var0.setTitle(var34);
    org.jhotdraw.figures.LineFigure var36 = new org.jhotdraw.figures.LineFigure();
    int var37 = 100;
    int var38 = 1;
    boolean var39 = var36.joinSegments(var37, var38);
    int var40 = 100;
    var0.sendToLayer((org.jhotdraw.framework.Figure)var36, var40);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    var48.clearSelection();
    var48.requestFocus();
    var48.repairDamage();
    var0.addDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var48);
    int var53 = (-1);
    int var54 = 0;
    org.jhotdraw.framework.Figure var55 = var0.findFigure(var53, var54);
    java.lang.String var56 = "";
    var0.setTitle(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);

  }

  public void test209() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.framework.Tool var5 = var0.getDefaultTool();
    var0.open();
    org.jhotdraw.framework.Tool var7 = var0.tool();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test210() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    java.lang.Boolean var10 = new java.lang.Boolean(true);
    var2.setFocusTraversalPolicyProvider(var10);
    var2.repaint();
    javax.swing.Icon var13 = var2.getRolloverSelectedIcon();
    javax.swing.Icon var14 = var2.getDisabledSelectedIcon();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test211() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    java.lang.String var13 = "";
    java.lang.Character var14 = new java.lang.Character('4');
    java.lang.Character var15 = new java.lang.Character('4');
    var10.firePropertyChange(var13, var14, var15);
    org.jhotdraw.util.UndoableAdapter var17 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test212() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.awt.Graphics var4 = var0.getGraphics();
    int var5 = 10;
    int var6 = (-1);
    var0.resize(var5, var6);
    int var8 = 0;
    int var9 = 1;
    java.awt.Component var10 = var0.getComponentAt(var8, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);

  }

  public void test213() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.lang.String var4 = var0.getAppletInfo();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.net.URL var5 = var0.getCodeBase();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test214() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    int var9 = (-1);
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var5, var9, var10);
    java.awt.Component var12 = var1.add((java.awt.Component)var11);
    boolean var13 = var11.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    java.awt.Dimension var17 = var14.size();
    var11.removeFromSelection((org.jhotdraw.framework.Figure)var14);
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    int var27 = (-1);
    int var28 = 0;
    org.jhotdraw.standard.StandardDrawingView var29 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var23, var27, var28);
    java.awt.Component var30 = var19.add((java.awt.Component)var29);
    var11.setEditor((org.jhotdraw.framework.DrawingEditor)var19);
    org.jhotdraw.framework.Tool var32 = var19.getDefaultTool();
    org.jhotdraw.standard.CopyCommand var33 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var19);
    java.lang.String var34 = var33.name();
    org.jhotdraw.util.Undoable var35 = var33.getUndoActivity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test215() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = var2.getUIClassID();
    boolean var4 = var2.isRequestFocusEnabled();
    java.awt.Dimension var5 = var2.getSize();
    int var6 = 0;
    int var7 = (-1);
    int var8 = 100;
    int var9 = 10;
    var2.reshape(var6, var7, var8, var9);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var11 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var11.start();
    java.awt.Color var13 = var11.getForeground();
    var2.setBackground(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test216() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.lang.String var89 = var35.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89.equals("hi!"));

  }

  public void test217() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    boolean var9 = var8.undo();
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var8.setUndoable(var10);
    boolean var12 = var8.undo();
    var8.release();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test218() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    javax.swing.KeyStroke[] var6 = var2.getRegisteredKeyStrokes();
    java.lang.Boolean var7 = new java.lang.Boolean(true);
    var2.setRolloverEnabled(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);

  }

  public void test219() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    var22.dispose();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);

  }

  public void test220() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JMenu var3 = var1.createLookAndFeelMenu();
    java.lang.Character var4 = new java.lang.Character('a');
    var3.setMnemonic(var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JMenu var8 = var6.createLookAndFeelMenu();
    java.lang.String var9 = var8.getName();
    boolean var10 = var3.isMenuComponent((java.awt.Component)var8);
    int var11 = 100;
    int var12 = (-1);
    int var13 = (-1);
    int var14 = (-1);
    var3.reshape(var11, var12, var13, var14);
    boolean var16 = var3.isContentAreaFilled();
    javax.swing.InputVerifier var17 = var3.getInputVerifier();
    javax.swing.KeyStroke var18 = var3.getAccelerator();
    javax.swing.MenuElement[] var19 = var3.getSubElements();
    java.lang.Object var20 = org.jhotdraw.figures.AttributeFigure.setDefaultAttribute(var0, (java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test221() throws Throwable {

    org.jhotdraw.contrib.html.ColorContentProducer var0 = new org.jhotdraw.contrib.html.ColorContentProducer();

  }

  public void test222() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    boolean var15 = var13.getInheritsPopupMenu();
    boolean var16 = var13.requestDefaultFocus();
    java.lang.String var17 = "hi!";
    java.lang.Character var18 = new java.lang.Character(' ');
    java.lang.Character var19 = new java.lang.Character(' ');
    var13.firePropertyChange(var17, var18, var19);
    boolean var21 = var13.isReadOnly();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    java.awt.Dimension var32 = var13.getSize(var31);
    var13.updateUI();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JMenu var36 = var34.createLookAndFeelMenu();
    java.lang.String var37 = var36.getName();
    java.awt.Dimension var38 = var36.getPreferredSize();
    java.awt.Dimension var39 = var13.getSize(var38);
    var2.deactivate((org.jhotdraw.framework.DrawingView)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);

  }

  public void test223() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.standard.StandardDrawing var12 = new org.jhotdraw.standard.StandardDrawing();
    int var13 = 1;
    int var14 = 1;
    org.jhotdraw.contrib.PolygonFigure var15 = new org.jhotdraw.contrib.PolygonFigure(var13, var14);
    org.jhotdraw.framework.FigureEnumeration var16 = var15.figures();
    java.awt.Rectangle var17 = var15.displayBox();
    int var18 = 1;
    int var19 = 1;
    org.jhotdraw.contrib.PolygonFigure var20 = new org.jhotdraw.contrib.PolygonFigure(var18, var19);
    org.jhotdraw.framework.FigureEnumeration var21 = var20.figures();
    java.awt.Rectangle var22 = var20.displayBox();
    org.jhotdraw.framework.Figure var23 = var12.findFigure(var17, (org.jhotdraw.framework.Figure)var20);
    org.jhotdraw.figures.ArrowTip var24 = new org.jhotdraw.figures.ArrowTip();
    int var25 = 1;
    int var26 = 1;
    int var27 = 10;
    int var28 = 0;
    java.awt.Polygon var29 = var24.outline(var25, var26, var27, var28);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    var36.clearSelection();
    java.awt.Color var38 = var36.getForeground();
    var24.setFillColor(var38);
    java.awt.Rectangle var40 = var24.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var41 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var12, var40);
    var10.drawingInvalidated(var41);
    javax.swing.plaf.PanelUI var43 = var10.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test224() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    boolean var3 = var1.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var6 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var4, (org.jhotdraw.framework.FigureChangeListener)var5);
    int var7 = var5.getZValue();
    java.lang.Object var8 = var5.clone();
    org.jhotdraw.standard.CreationTool var9 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var1, (org.jhotdraw.framework.Figure)var5);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var1.setFocusTraversalPolicyProvider(var10);
    org.jhotdraw.standard.CutCommand var12 = new org.jhotdraw.standard.CutCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var13 = var1.getDefaultDrawingTitle();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test225() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    java.awt.Rectangle var36 = var0.displayBox();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var38 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var37);
    org.jhotdraw.standard.StandardDrawing var39 = new org.jhotdraw.standard.StandardDrawing();
    int var40 = var37.getLayer((org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    javax.swing.JLayeredPane var44 = var41.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    java.awt.Component var52 = var41.add((java.awt.Component)var51);
    boolean var53 = var51.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var56 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var54, (org.jhotdraw.framework.FigureChangeListener)var55);
    java.awt.Dimension var57 = var54.size();
    var51.removeFromSelection((org.jhotdraw.framework.Figure)var54);
    var54.layout();
    java.lang.Object var60 = var54.clone();
    org.jhotdraw.framework.FigureChangeEvent var61 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var54);
    java.lang.Object var62 = var61.getSource();
    var39.figureInvalidated(var61);
    int var64 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var65 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var64);
    java.util.Iterator var66 = var65.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    boolean var69 = var67.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    int var73 = var71.getZValue();
    java.lang.Object var74 = var71.clone();
    org.jhotdraw.standard.CreationTool var75 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var67, (org.jhotdraw.framework.Figure)var71);
    int var76 = 1;
    int var77 = 0;
    org.jhotdraw.standard.StandardDrawingView var78 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var76, var77);
    boolean var79 = var65.contains((java.lang.Object)var77);
    var39.orphanAll((java.util.List)var65);
    int var81 = 1;
    int var82 = 100;
    boolean var83 = var39.containsPoint(var81, var82);
    var0.addDependendFigure((org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.framework.FigureEnumeration var85 = var0.figures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test226() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = var2.getUIClassID();
    java.awt.Insets var4 = var2.getInsets();
    java.awt.peer.ComponentPeer var5 = var2.getPeer();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JMenu var8 = var6.createLookAndFeelMenu();
    java.lang.Character var9 = new java.lang.Character('a');
    var8.setMnemonic(var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JMenu var13 = var11.createLookAndFeelMenu();
    java.lang.String var14 = var13.getName();
    boolean var15 = var8.isMenuComponent((java.awt.Component)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    java.lang.String var19 = var18.getUIClassID();
    java.awt.Insets var20 = var18.getInsets();
    var13.setMargin(var20);
    var2.remove((java.awt.Component)var13);
    java.lang.Boolean var23 = new java.lang.Boolean(false);
    var13.setContentAreaFilled(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.equals("RootPaneUI"));

  }

  public void test227() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    java.awt.Container var2 = var0.getFocusCycleRootAncestor();
    boolean var3 = var0.isFocusTraversalPolicyProvider();
    org.jhotdraw.contrib.zoom.ZoomDrawingView var4 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test228() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    int var18 = (-1);
    int var19 = 0;
    org.jhotdraw.standard.StandardDrawingView var20 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var14, var18, var19);
    java.awt.Component var21 = var10.add((java.awt.Component)var20);
    boolean var22 = var20.getInheritsPopupMenu();
    javax.swing.InputMap var23 = var20.getInputMap();
    java.lang.Boolean var24 = new java.lang.Boolean(false);
    var20.setReadOnly(var24);
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    var32.clearSelection();
    java.awt.Color var34 = var32.getForeground();
    org.jhotdraw.contrib.DesktopEvent var35 = new org.jhotdraw.contrib.DesktopEvent((org.jhotdraw.contrib.Desktop)var9, (org.jhotdraw.framework.DrawingView)var20, (org.jhotdraw.framework.DrawingView)var32);
    int var36 = 10;
    int var37 = 1;
    int var38 = 0;
    int var39 = 10;
    var32.repaint(var36, var37, var38, var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test229() throws Throwable {

    org.jhotdraw.contrib.html.ETSLADisposalStrategy var0 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    org.jhotdraw.contrib.html.StandardDisposableResourceManager var1 = new org.jhotdraw.contrib.html.StandardDisposableResourceManager((org.jhotdraw.contrib.html.ResourceDisposabilityStrategy)var0);
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    var4.basicDisplayBox(var9, var13);
    java.lang.String var15 = "";
    java.lang.Character var16 = new java.lang.Character(' ');
    org.jhotdraw.contrib.html.DisposableResourceHolder var17 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var16);
    var4.setAttribute(var15, (java.lang.Object)var17);
    var1.unregisterResource(var17);

  }

  public void test230() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    int var35 = var0.getMaximumRowCount();
    var0.firePopupMenuWillBecomeVisible();
    java.lang.String var37 = "";
    java.lang.Short var38 = new java.lang.Short((short)100);
    java.lang.Short var39 = new java.lang.Short((short)10);
    var0.firePropertyChange(var37, var38, var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 8);

  }

  public void test231() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = (-1);
    int var19 = 10;
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var21 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var20);
    org.jhotdraw.standard.StandardDrawing var22 = new org.jhotdraw.standard.StandardDrawing();
    int var23 = var20.getLayer((org.jhotdraw.framework.Figure)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    java.awt.Component var35 = var24.add((java.awt.Component)var34);
    boolean var36 = var34.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var34.removeFromSelection((org.jhotdraw.framework.Figure)var37);
    var37.layout();
    java.lang.Object var43 = var37.clone();
    org.jhotdraw.framework.FigureChangeEvent var44 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var37);
    java.lang.Object var45 = var44.getSource();
    var22.figureInvalidated(var44);
    int var47 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var48 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var47);
    java.util.Iterator var49 = var48.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    boolean var52 = var50.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var53 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var55 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var53, (org.jhotdraw.framework.FigureChangeListener)var54);
    int var56 = var54.getZValue();
    java.lang.Object var57 = var54.clone();
    org.jhotdraw.standard.CreationTool var58 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var50, (org.jhotdraw.framework.Figure)var54);
    int var59 = 1;
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var59, var60);
    boolean var62 = var48.contains((java.lang.Object)var60);
    var22.orphanAll((java.util.List)var48);
    var17.invokeStep(var18, var19, (org.jhotdraw.framework.Drawing)var22);
    org.jhotdraw.contrib.TextAreaFigure var65 = new org.jhotdraw.contrib.TextAreaFigure();
    int var66 = var65.overlayColumns();
    org.jhotdraw.framework.Figure var67 = var22.add((org.jhotdraw.framework.Figure)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test232() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var6 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter(var5);
    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var7 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter(var5);
    java.awt.Insets var8 = var7.connectionInsets();
    boolean var9 = var7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test233() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    var9.tileFramesVertically();
    java.lang.String var11 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    int var16 = (-1);
    int var17 = 0;
    org.jhotdraw.standard.StandardDrawingView var18 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var16, var17);
    int var19 = 0;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var19, var20);
    org.jhotdraw.util.RedoCommand var22 = new org.jhotdraw.util.RedoCommand(var11, (org.jhotdraw.framework.DrawingEditor)var12);
    int var23 = 10;
    int var24 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var25 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var23, var24);
    int var26 = 0;
    var9.removeFromDesktop((org.jhotdraw.framework.DrawingView)var25, var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    java.lang.Double var31 = new java.lang.Double((-1.0d));
    java.lang.Double var32 = new java.lang.Double(100.0d);
    java.lang.Double var33 = new java.lang.Double(1.0d);
    java.awt.Point var34 = org.jhotdraw.util.Geom.polarToPoint(var31, var32, var33);
    java.awt.Component var35 = var28.getComponentAt(var34);
    int var36 = var28.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var37 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    java.awt.Component var49 = var38.add((java.awt.Component)var48);
    boolean var50 = var48.getInheritsPopupMenu();
    javax.swing.InputMap var51 = var48.getInputMap();
    java.lang.Boolean var52 = new java.lang.Boolean(false);
    var48.setReadOnly(var52);
    org.jhotdraw.contrib.MDI_DrawApplication var54 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var55 = var54.isDoubleBuffered();
    javax.swing.JRootPane var56 = var54.getRootPane();
    javax.swing.JLayeredPane var57 = var54.getLayeredPane();
    int var58 = (-1);
    int var59 = 0;
    org.jhotdraw.standard.StandardDrawingView var60 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var54, var58, var59);
    var60.clearSelection();
    java.awt.Color var62 = var60.getForeground();
    org.jhotdraw.contrib.DesktopEvent var63 = new org.jhotdraw.contrib.DesktopEvent((org.jhotdraw.contrib.Desktop)var37, (org.jhotdraw.framework.DrawingView)var48, (org.jhotdraw.framework.DrawingView)var60);
    int var64 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.addToDesktop((org.jhotdraw.framework.DrawingView)var60, var64);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test234() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.util.Undoable var27 = var26.getUndoActivity();
    java.awt.Point var28 = var26.locate();
    org.jhotdraw.framework.DrawingView var29 = var26.getDrawingView();
    int var30 = 1;
    int var31 = 1;
    org.jhotdraw.standard.StandardDrawing var32 = new org.jhotdraw.standard.StandardDrawing();
    int var33 = 1;
    int var34 = 1;
    org.jhotdraw.contrib.PolygonFigure var35 = new org.jhotdraw.contrib.PolygonFigure(var33, var34);
    org.jhotdraw.framework.FigureEnumeration var36 = var35.figures();
    java.awt.Rectangle var37 = var35.displayBox();
    int var38 = 1;
    int var39 = 1;
    org.jhotdraw.contrib.PolygonFigure var40 = new org.jhotdraw.contrib.PolygonFigure(var38, var39);
    org.jhotdraw.framework.FigureEnumeration var41 = var40.figures();
    java.awt.Rectangle var42 = var40.displayBox();
    org.jhotdraw.framework.Figure var43 = var32.findFigure(var37, (org.jhotdraw.framework.Figure)var40);
    int var44 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var45 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var44);
    var32.orphanAll((java.util.List)var45);
    org.jhotdraw.framework.Handle var47 = org.jhotdraw.standard.BoxHandleKit.west((org.jhotdraw.framework.Figure)var32);
    org.jhotdraw.util.StandardStorageFormat var48 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var49 = "hi!";
    org.jhotdraw.standard.StandardDrawing var50 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var51 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var52 = var51.handles();
    org.jhotdraw.framework.Figure var53 = var50.remove((org.jhotdraw.framework.Figure)var51);
    java.lang.String var54 = var48.store(var49, (org.jhotdraw.framework.Drawing)var50);
    org.jhotdraw.framework.Locator var55 = var32.connectedTextLocator((org.jhotdraw.framework.Figure)var50);
    var26.invokeEnd(var30, var31, (org.jhotdraw.framework.Drawing)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54.equals("hi!.draw"));

  }

  public void test235() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.HandleEnumeration var21 = var0.handles();
    int var22 = 0;
    int var23 = 100;
    org.jhotdraw.framework.Figure var24 = var0.findFigureInside(var22, var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);

  }

  public void test236() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.String var13 = "";
    java.lang.Character var14 = new java.lang.Character(' ');
    org.jhotdraw.contrib.html.DisposableResourceHolder var15 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var14);
    var2.setAttribute(var13, (java.lang.Object)var15);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    var23.clearSelection();
    org.jhotdraw.util.UndoableAdapter var25 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var23);
    org.jhotdraw.contrib.html.DisposableResourceHolder var26 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var25);
    boolean var27 = var25.undo();
    org.jhotdraw.framework.DrawingView var28 = var25.getDrawingView();
    var15.setResource((java.lang.Object)var28);
    var15.resetDelay();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test237() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "hi!";
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    java.lang.String var18 = var0.store(var2, (org.jhotdraw.framework.Drawing)var3);
    org.jhotdraw.framework.FigureEnumeration var19 = var3.figures();
    org.jhotdraw.standard.InsertIntoDrawingVisitor var20 = new org.jhotdraw.standard.InsertIntoDrawingVisitor((org.jhotdraw.framework.Drawing)var3);
    int var21 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var22 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var21);
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    boolean var26 = var22.remove((java.lang.Object)var23);
    var20.visitFigure((org.jhotdraw.framework.Figure)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test238() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    java.lang.Boolean var9 = new java.lang.Boolean(true);
    var0.setEnabled(var9);
    org.jhotdraw.util.CommandChoice var11 = new org.jhotdraw.util.CommandChoice();
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    boolean var17 = var13.remove((java.lang.Object)var14);
    org.jhotdraw.contrib.StandardLayouter var18 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var14);
    var11.removeItem((java.lang.Object)var14);
    org.jhotdraw.standard.StandardDrawing var20 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    org.jhotdraw.contrib.DiamondFigure var29 = new org.jhotdraw.contrib.DiamondFigure(var24, var28);
    org.jhotdraw.framework.HandleEnumeration var30 = var29.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    org.jhotdraw.framework.Figure var34 = var20.replace((org.jhotdraw.framework.Figure)var29, (org.jhotdraw.framework.Figure)var31);
    var11.removeItem((java.lang.Object)var20);
    java.awt.event.ItemListener var36 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var0, (java.awt.event.ItemListener)var11);
    int var37 = (-1);
    java.lang.Object var38 = var0.getItemAt(var37);
    int var39 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test239() throws Throwable {

    org.jhotdraw.contrib.html.HTMLColorContentProducer var0 = new org.jhotdraw.contrib.html.HTMLColorContentProducer();

  }

  public void test240() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 0;
    int var19 = 100;
    org.jhotdraw.samples.javadraw.BouncingDrawing var20 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    var20.animationStep();
    var20.animationStep();
    var20.animationStep();
    org.jhotdraw.figures.PolyLineFigure var24 = new org.jhotdraw.figures.PolyLineFigure();
    int var25 = var24.getZValue();
    org.jhotdraw.figures.ShortestDistanceConnector var26 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Figure var27 = var20.add((org.jhotdraw.framework.Figure)var24);
    var17.invokeEnd(var18, var19, (org.jhotdraw.framework.Drawing)var20);
    int var29 = (-1);
    int var30 = (-1);
    int var31 = 10;
    int var32 = 10;
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    var39.clearSelection();
    var39.layout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.invokeStep(var29, var30, var31, var32, (org.jhotdraw.framework.DrawingView)var39);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test241() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    java.lang.Double var31 = new java.lang.Double((-1.0d));
    java.lang.Double var32 = new java.lang.Double(100.0d);
    java.lang.Double var33 = new java.lang.Double(1.0d);
    java.awt.Point var34 = org.jhotdraw.util.Geom.polarToPoint(var31, var32, var33);
    org.jhotdraw.figures.EllipseFigure var35 = new org.jhotdraw.figures.EllipseFigure(var30, var34);
    boolean var36 = var2.containsFigure((org.jhotdraw.framework.Figure)var35);
    java.lang.String var37 = "";
    org.jhotdraw.framework.FigureAttributeConstant var38 = new org.jhotdraw.framework.FigureAttributeConstant(var37);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    java.lang.Double var42 = new java.lang.Double((-1.0d));
    java.lang.Double var43 = new java.lang.Double(100.0d);
    java.lang.Double var44 = new java.lang.Double(1.0d);
    java.awt.Point var45 = org.jhotdraw.util.Geom.polarToPoint(var42, var43, var44);
    java.awt.Component var46 = var39.getComponentAt(var45);
    int var47 = var39.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var48 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var39);
    javax.swing.JInternalFrame var49 = var48.getSelectedFrame();
    javax.swing.plaf.DesktopPaneUI var50 = var48.getUI();
    var35.setAttribute(var38, (java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test242() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    java.awt.event.HierarchyBoundsListener[] var25 = var18.getHierarchyBoundsListeners();
    java.lang.String var26 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    int var34 = 0;
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var34, var35);
    org.jhotdraw.util.RedoCommand var37 = new org.jhotdraw.util.RedoCommand(var26, (org.jhotdraw.framework.DrawingEditor)var27);
    int var38 = 10;
    int var39 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var40 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var38, var39);
    var18.setNextFocusableComponent((java.awt.Component)var40);
    int var42 = var18.getIconTextGap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 4);

  }

  public void test243() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    int var9 = (-1);
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var5, var9, var10);
    var11.clearSelection();
    org.jhotdraw.util.UndoableAdapter var13 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var11);
    org.jhotdraw.contrib.html.DisposableResourceHolder var14 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var13);
    boolean var15 = var13.undo();
    var4.setUndoActivity((org.jhotdraw.util.Undoable)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var19 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var17);
    boolean var20 = var17.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var21 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var17);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    org.jhotdraw.contrib.html.DisposableResourceHolder var31 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var30);
    boolean var32 = var30.undo();
    var21.setUndoActivity((org.jhotdraw.util.Undoable)var30);
    var4.setUndoActivity((org.jhotdraw.util.Undoable)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test244() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    var0.nextFocus();
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    java.awt.Component var29 = var0.getComponentAt(var28);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var30 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var30.start();
    java.awt.Color var32 = var30.getForeground();
    var0.setForeground(var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    java.awt.event.MouseListener[] var41 = var34.getMouseListeners();
    int var42 = (-1);
    int var43 = 1;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var44 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var42, var43);
    int var45 = var0.getComponentZOrder((java.awt.Component)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));

  }

  public void test245() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    org.jhotdraw.figures.TextFigure var2 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var2);
    var0.setResource((java.lang.Object)var2);
    boolean var5 = var0.isLocked();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test246() throws Throwable {

    org.jhotdraw.contrib.html.ContentProducerRegistry var0 = new org.jhotdraw.contrib.html.ContentProducerRegistry();
    org.jhotdraw.contrib.html.ContentProducerRegistry var1 = new org.jhotdraw.contrib.html.ContentProducerRegistry(var0);
    org.jhotdraw.contrib.html.ContentProducerRegistry var2 = new org.jhotdraw.contrib.html.ContentProducerRegistry();
    org.jhotdraw.contrib.html.ContentProducerRegistry var3 = new org.jhotdraw.contrib.html.ContentProducerRegistry(var2);
    var0.setParent(var3);
    boolean var5 = var3.isAutonomous();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test247() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    java.awt.Rectangle var36 = var0.displayBox();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var38 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var37);
    org.jhotdraw.standard.StandardDrawing var39 = new org.jhotdraw.standard.StandardDrawing();
    int var40 = var37.getLayer((org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    javax.swing.JLayeredPane var44 = var41.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    java.awt.Component var52 = var41.add((java.awt.Component)var51);
    boolean var53 = var51.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var56 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var54, (org.jhotdraw.framework.FigureChangeListener)var55);
    java.awt.Dimension var57 = var54.size();
    var51.removeFromSelection((org.jhotdraw.framework.Figure)var54);
    var54.layout();
    java.lang.Object var60 = var54.clone();
    org.jhotdraw.framework.FigureChangeEvent var61 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var54);
    java.lang.Object var62 = var61.getSource();
    var39.figureInvalidated(var61);
    int var64 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var65 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var64);
    java.util.Iterator var66 = var65.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    boolean var69 = var67.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    int var73 = var71.getZValue();
    java.lang.Object var74 = var71.clone();
    org.jhotdraw.standard.CreationTool var75 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var67, (org.jhotdraw.framework.Figure)var71);
    int var76 = 1;
    int var77 = 0;
    org.jhotdraw.standard.StandardDrawingView var78 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var76, var77);
    boolean var79 = var65.contains((java.lang.Object)var77);
    var39.orphanAll((java.util.List)var65);
    int var81 = 1;
    int var82 = 100;
    boolean var83 = var39.containsPoint(var81, var82);
    var0.addDependendFigure((org.jhotdraw.framework.Figure)var39);
    var39.release();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test248() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.layout();
    int var9 = var6.getHeight();
    javax.swing.InputMap var10 = var6.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test249() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    var2.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));

  }

  public void test250() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.TextAreaFigure var4 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var5 = "";
    var4.setText(var5);
    org.jhotdraw.figures.TextFigure var7 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var8 = var7.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    int var10 = 1;
    int var11 = 1;
    org.jhotdraw.contrib.PolygonFigure var12 = new org.jhotdraw.contrib.PolygonFigure(var10, var11);
    org.jhotdraw.framework.FigureEnumeration var13 = var12.figures();
    java.awt.Rectangle var14 = var12.displayBox();
    int var15 = 1;
    int var16 = 1;
    org.jhotdraw.contrib.PolygonFigure var17 = new org.jhotdraw.contrib.PolygonFigure(var15, var16);
    org.jhotdraw.framework.FigureEnumeration var18 = var17.figures();
    java.awt.Rectangle var19 = var17.displayBox();
    org.jhotdraw.framework.Figure var20 = var9.findFigure(var14, (org.jhotdraw.framework.Figure)var17);
    int var21 = 100;
    int var22 = (-1);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    org.jhotdraw.contrib.DiamondFigure var31 = new org.jhotdraw.contrib.DiamondFigure(var26, var30);
    org.jhotdraw.framework.Figure var32 = var9.findFigureInsideWithout(var21, var22, (org.jhotdraw.framework.Figure)var31);
    java.util.Iterator var33 = var9.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    java.awt.Component var45 = var34.add((java.awt.Component)var44);
    boolean var46 = var44.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var49 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var47, (org.jhotdraw.framework.FigureChangeListener)var48);
    java.awt.Dimension var50 = var47.size();
    var44.removeFromSelection((org.jhotdraw.framework.Figure)var47);
    var47.layout();
    java.lang.Object var53 = var47.clone();
    org.jhotdraw.framework.FigureChangeEvent var54 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var47);
    var9.figureRequestUpdate(var54);
    java.awt.Rectangle var56 = var54.getInvalidatedRectangle();
    var7.figureRequestUpdate(var54);
    var4.figureRequestUpdate(var54);
    var2.removeDependendFigure((org.jhotdraw.framework.Figure)var4);
    boolean var60 = var4.acceptsTyping();
    java.lang.String var61 = var4.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61.equals(""));

  }

  public void test251() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.figures.NullConnector var21 = new org.jhotdraw.figures.NullConnector((org.jhotdraw.framework.Figure)var16);
    int var22 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var23 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var22);
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    boolean var27 = var23.remove((java.lang.Object)var24);
    org.jhotdraw.contrib.StandardLayouter var28 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var24);
    var16.setLayouter((org.jhotdraw.contrib.Layouter)var28);
    org.jhotdraw.util.StandardStorageFormat var30 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var31 = var30.getFileDescription();
    java.lang.String var32 = "hi!";
    org.jhotdraw.standard.StandardDrawing var33 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var34 = new java.lang.Double((-1.0d));
    java.lang.Double var35 = new java.lang.Double(100.0d);
    java.lang.Double var36 = new java.lang.Double(1.0d);
    java.awt.Point var37 = org.jhotdraw.util.Geom.polarToPoint(var34, var35, var36);
    java.lang.Double var38 = new java.lang.Double((-1.0d));
    java.lang.Double var39 = new java.lang.Double(100.0d);
    java.lang.Double var40 = new java.lang.Double(1.0d);
    java.awt.Point var41 = org.jhotdraw.util.Geom.polarToPoint(var38, var39, var40);
    org.jhotdraw.contrib.DiamondFigure var42 = new org.jhotdraw.contrib.DiamondFigure(var37, var41);
    org.jhotdraw.framework.HandleEnumeration var43 = var42.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var44 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var45 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var46 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var44, (org.jhotdraw.framework.FigureChangeListener)var45);
    org.jhotdraw.framework.Figure var47 = var33.replace((org.jhotdraw.framework.Figure)var42, (org.jhotdraw.framework.Figure)var44);
    java.lang.String var48 = var30.store(var32, (org.jhotdraw.framework.Drawing)var33);
    org.jhotdraw.framework.FigureEnumeration var49 = var33.figures();
    org.jhotdraw.standard.InsertIntoDrawingVisitor var50 = new org.jhotdraw.standard.InsertIntoDrawingVisitor((org.jhotdraw.framework.Drawing)var33);
    int var51 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var52 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var51);
    org.jhotdraw.contrib.GraphicalCompositeFigure var53 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var55 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var53, (org.jhotdraw.framework.FigureChangeListener)var54);
    boolean var56 = var52.remove((java.lang.Object)var53);
    var50.visitFigure((org.jhotdraw.framework.Figure)var53);
    org.jhotdraw.contrib.Layouter var58 = var28.create((org.jhotdraw.contrib.Layoutable)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test252() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    var10.show();
    boolean var38 = var10.getIgnoreRepaint();
    org.jhotdraw.contrib.JPanelDesktop var39 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test253() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    int var14 = (-1);
    int var15 = 0;
    org.jhotdraw.standard.StandardDrawingView var16 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var14, var15);
    var16.clearSelection();
    org.jhotdraw.util.UndoableAdapter var18 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var16);
    boolean var19 = var18.undo();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.standard.StandardDrawing var23 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var24 = new java.lang.Double((-1.0d));
    java.lang.Double var25 = new java.lang.Double(100.0d);
    java.lang.Double var26 = new java.lang.Double(1.0d);
    java.awt.Point var27 = org.jhotdraw.util.Geom.polarToPoint(var24, var25, var26);
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    org.jhotdraw.contrib.DiamondFigure var32 = new org.jhotdraw.contrib.DiamondFigure(var27, var31);
    org.jhotdraw.framework.HandleEnumeration var33 = var32.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var36 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var34, (org.jhotdraw.framework.FigureChangeListener)var35);
    org.jhotdraw.framework.Figure var37 = var23.replace((org.jhotdraw.framework.Figure)var32, (org.jhotdraw.framework.Figure)var34);
    org.jhotdraw.framework.Handle var38 = org.jhotdraw.standard.BoxHandleKit.north(var37);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    var45.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var47 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var45.removeForeground((org.jhotdraw.framework.Painter)var47);
    org.jhotdraw.util.UndoableHandle var49 = new org.jhotdraw.util.UndoableHandle(var38, (org.jhotdraw.framework.DrawingView)var45);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    var63.clearSelection();
    java.awt.Color var65 = var63.getForeground();
    var56.setBackground(var65);
    org.jhotdraw.framework.FigureEnumeration var67 = var56.selectionZOrdered();
    var67.reset();
    var45.addToSelectionAll(var67);
    var20.orphanAll(var67);
    var18.setAffectedFigures(var67);
    var6.addToSelectionAll(var67);
    java.lang.Boolean var73 = new java.lang.Boolean(false);
    var6.setVerifyInputWhenFocusTarget(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test254() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    var0.setEnabled(var2);
    org.jhotdraw.util.CommandChoice var4 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var5 = var4.getAction();
    var4.updateUI();
    var0.removeItemListener((java.awt.event.ItemListener)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test255() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.framework.Tool var31 = var18.getDefaultTool();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JMenu var34 = var32.createLookAndFeelMenu();
    java.lang.String var35 = var34.getName();
    java.lang.String var36 = "";
    int var37 = 100;
    var34.insert(var36, var37);
    int var39 = 100;
    int var40 = 0;
    int var41 = 0;
    int var42 = 10;
    var34.reshape(var39, var40, var41, var42);
    org.jhotdraw.standard.StandardDrawing var44 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var45 = new java.lang.Double((-1.0d));
    java.lang.Double var46 = new java.lang.Double(100.0d);
    java.lang.Double var47 = new java.lang.Double(1.0d);
    java.awt.Point var48 = org.jhotdraw.util.Geom.polarToPoint(var45, var46, var47);
    java.lang.Double var49 = new java.lang.Double((-1.0d));
    java.lang.Double var50 = new java.lang.Double(100.0d);
    java.lang.Double var51 = new java.lang.Double(1.0d);
    java.awt.Point var52 = org.jhotdraw.util.Geom.polarToPoint(var49, var50, var51);
    org.jhotdraw.contrib.DiamondFigure var53 = new org.jhotdraw.contrib.DiamondFigure(var48, var52);
    org.jhotdraw.framework.HandleEnumeration var54 = var53.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var56 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var57 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var55, (org.jhotdraw.framework.FigureChangeListener)var56);
    org.jhotdraw.framework.Figure var58 = var44.replace((org.jhotdraw.framework.Figure)var53, (org.jhotdraw.framework.Figure)var55);
    org.jhotdraw.framework.Handle var59 = org.jhotdraw.standard.BoxHandleKit.north(var58);
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    var66.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var68 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var66.removeForeground((org.jhotdraw.framework.Painter)var68);
    org.jhotdraw.util.UndoableHandle var70 = new org.jhotdraw.util.UndoableHandle(var59, (org.jhotdraw.framework.DrawingView)var66);
    org.jhotdraw.util.Undoable var71 = var70.getUndoActivity();
    java.awt.Rectangle var72 = var70.displayBox();
    var34.computeVisibleRect(var72);
    var18.setMaximizedBounds(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test256() throws Throwable {

    org.jhotdraw.contrib.ChopPolygonConnector var0 = new org.jhotdraw.contrib.ChopPolygonConnector();

  }

  public void test257() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.north((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.framework.Figure var4 = var3.owner();

  }

  public void test258() throws Throwable {

    org.jhotdraw.framework.Locator var0 = org.jhotdraw.standard.RelativeLocator.southEast();

  }

  public void test259() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    java.awt.Dimension var36 = var35.getPreferredSize();
    java.lang.Character var37 = new java.lang.Character('#');
    var35.setMnemonic(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test260() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    org.jhotdraw.samples.javadraw.JavaDrawApplet var3 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var3.start();
    var0.remove((java.awt.Component)var3);
    org.jhotdraw.framework.DrawingView var6 = var0.view();
    int var7 = var0.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);

  }

  public void test261() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var10 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var10.start();
    org.jhotdraw.framework.Tool var12 = var10.tool();
    var10.transferFocus();
    var9.addFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    java.beans.VetoableChangeListener[] var15 = var9.getVetoableChangeListeners();
    org.jhotdraw.standard.StandardDrawing var16 = new org.jhotdraw.standard.StandardDrawing();
    int var17 = 1;
    int var18 = 1;
    org.jhotdraw.contrib.PolygonFigure var19 = new org.jhotdraw.contrib.PolygonFigure(var17, var18);
    org.jhotdraw.framework.FigureEnumeration var20 = var19.figures();
    java.awt.Rectangle var21 = var19.displayBox();
    int var22 = 1;
    int var23 = 1;
    org.jhotdraw.contrib.PolygonFigure var24 = new org.jhotdraw.contrib.PolygonFigure(var22, var23);
    org.jhotdraw.framework.FigureEnumeration var25 = var24.figures();
    java.awt.Rectangle var26 = var24.displayBox();
    org.jhotdraw.framework.Figure var27 = var16.findFigure(var21, (org.jhotdraw.framework.Figure)var24);
    int var28 = 100;
    int var29 = (-1);
    java.lang.Double var30 = new java.lang.Double((-1.0d));
    java.lang.Double var31 = new java.lang.Double(100.0d);
    java.lang.Double var32 = new java.lang.Double(1.0d);
    java.awt.Point var33 = org.jhotdraw.util.Geom.polarToPoint(var30, var31, var32);
    java.lang.Double var34 = new java.lang.Double((-1.0d));
    java.lang.Double var35 = new java.lang.Double(100.0d);
    java.lang.Double var36 = new java.lang.Double(1.0d);
    java.awt.Point var37 = org.jhotdraw.util.Geom.polarToPoint(var34, var35, var36);
    org.jhotdraw.contrib.DiamondFigure var38 = new org.jhotdraw.contrib.DiamondFigure(var33, var37);
    org.jhotdraw.framework.Figure var39 = var16.findFigureInsideWithout(var28, var29, (org.jhotdraw.framework.Figure)var38);
    java.util.Iterator var40 = var16.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    javax.swing.JLayeredPane var44 = var41.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    java.awt.Component var52 = var41.add((java.awt.Component)var51);
    boolean var53 = var51.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var56 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var54, (org.jhotdraw.framework.FigureChangeListener)var55);
    java.awt.Dimension var57 = var54.size();
    var51.removeFromSelection((org.jhotdraw.framework.Figure)var54);
    var54.layout();
    java.lang.Object var60 = var54.clone();
    org.jhotdraw.framework.FigureChangeEvent var61 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var54);
    var16.figureRequestUpdate(var61);
    var9.setDrawing((org.jhotdraw.framework.Drawing)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test262() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.String var1 = "";
    java.lang.String var2 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var3 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var3.start();
    org.jhotdraw.standard.CopyCommand var5 = new org.jhotdraw.standard.CopyCommand(var2, (org.jhotdraw.framework.DrawingEditor)var3);
    java.lang.Object var6 = var3.getTreeLock();
    org.jhotdraw.figures.InsertImageCommand var7 = new org.jhotdraw.figures.InsertImageCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }

  }

  public void test263() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    int var11 = var3.highestLayer();
    int var12 = 0;
    java.awt.Component[] var13 = var3.getComponentsInLayer(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-30000));

  }

  public void test264() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.awt.Color var10 = var0.getBackground();
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    var0.setUndecorated(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test265() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.Boolean var1 = new java.lang.Boolean(false);
    var0.setReadOnly(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    org.jhotdraw.standard.StandardDrawing var6 = new org.jhotdraw.standard.StandardDrawing();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    int var12 = 1;
    int var13 = 1;
    org.jhotdraw.contrib.PolygonFigure var14 = new org.jhotdraw.contrib.PolygonFigure(var12, var13);
    org.jhotdraw.framework.FigureEnumeration var15 = var14.figures();
    java.awt.Rectangle var16 = var14.displayBox();
    org.jhotdraw.framework.Figure var17 = var6.findFigure(var11, (org.jhotdraw.framework.Figure)var14);
    int var18 = 100;
    int var19 = (-1);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    java.lang.Double var24 = new java.lang.Double((-1.0d));
    java.lang.Double var25 = new java.lang.Double(100.0d);
    java.lang.Double var26 = new java.lang.Double(1.0d);
    java.awt.Point var27 = org.jhotdraw.util.Geom.polarToPoint(var24, var25, var26);
    org.jhotdraw.contrib.DiamondFigure var28 = new org.jhotdraw.contrib.DiamondFigure(var23, var27);
    org.jhotdraw.framework.Figure var29 = var6.findFigureInsideWithout(var18, var19, (org.jhotdraw.framework.Figure)var28);
    java.util.Iterator var30 = var6.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    int var39 = (-1);
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var35, var39, var40);
    java.awt.Component var42 = var31.add((java.awt.Component)var41);
    boolean var43 = var41.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var44 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var45 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var46 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var44, (org.jhotdraw.framework.FigureChangeListener)var45);
    java.awt.Dimension var47 = var44.size();
    var41.removeFromSelection((org.jhotdraw.framework.Figure)var44);
    var44.layout();
    java.lang.Object var50 = var44.clone();
    org.jhotdraw.framework.FigureChangeEvent var51 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var44);
    var6.figureRequestUpdate(var51);
    var4.figureInvalidated(var51);
    var0.figureRemoved(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test266() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JMenu var3 = var1.createLookAndFeelMenu();
    var1.open();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    int var9 = (-1);
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var5, var9, var10);
    var11.clearSelection();
    org.jhotdraw.util.UndoableAdapter var13 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var11);
    java.awt.Dimension var14 = var11.getPreferredSize();
    var1.setMinimumSize(var14);
    org.jhotdraw.util.UndoManager var16 = var1.getUndoManager();
    org.jhotdraw.standard.SendToBackCommand var17 = new org.jhotdraw.standard.SendToBackCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test267() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    java.awt.Container var2 = var0.getFocusCycleRootAncestor();
    boolean var3 = var0.isFocusTraversalPolicyProvider();
    org.jhotdraw.contrib.zoom.ZoomDrawingView var4 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    java.awt.GraphicsConfiguration var5 = var0.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test268() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    org.jhotdraw.util.Command var25 = var18.getCommand();
    float var26 = var18.getAlignmentY();
    int var27 = 1;
    int var28 = 10;
    int var29 = 10;
    int var30 = (-1);
    var18.reshape(var27, var28, var29, var30);
    java.lang.String var32 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.standard.PasteCommand var37 = new org.jhotdraw.standard.PasteCommand(var32, (org.jhotdraw.framework.DrawingEditor)var33);
    var18.setCommand((org.jhotdraw.util.Command)var37);
    org.jhotdraw.util.Command var39 = var18.getCommand();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test269() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.framework.FigureEnumeration var7 = var6.selectionZOrdered();
    org.jhotdraw.standard.StandardDrawing var8 = new org.jhotdraw.standard.StandardDrawing();
    int var9 = 1;
    int var10 = 1;
    org.jhotdraw.contrib.PolygonFigure var11 = new org.jhotdraw.contrib.PolygonFigure(var9, var10);
    org.jhotdraw.framework.FigureEnumeration var12 = var11.figures();
    java.awt.Rectangle var13 = var11.displayBox();
    int var14 = 1;
    int var15 = 1;
    org.jhotdraw.contrib.PolygonFigure var16 = new org.jhotdraw.contrib.PolygonFigure(var14, var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var16.figures();
    java.awt.Rectangle var18 = var16.displayBox();
    org.jhotdraw.framework.Figure var19 = var8.findFigure(var13, (org.jhotdraw.framework.Figure)var16);
    int var20 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var21 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var20);
    var8.orphanAll((java.util.List)var21);
    int var23 = 100;
    int var24 = (-1);
    int var25 = 10;
    int var26 = 0;
    int var27 = 100;
    int var28 = (-1);
    int var29 = 1;
    int var30 = 1;
    java.awt.Point var31 = org.jhotdraw.util.Geom.intersect(var23, var24, var25, var26, var27, var28, var29, var30);
    int var32 = 100;
    int var33 = (-1);
    int var34 = 10;
    int var35 = 0;
    int var36 = 100;
    int var37 = (-1);
    int var38 = 1;
    int var39 = 1;
    java.awt.Point var40 = org.jhotdraw.util.Geom.intersect(var32, var33, var34, var35, var36, var37, var38, var39);
    var8.basicDisplayBox(var31, var40);
    var8.release();
    var6.setDrawing((org.jhotdraw.framework.Drawing)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test270() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    javax.swing.JInternalFrame var10 = var9.getSelectedFrame();
    var9.tileFramesVertically();
    var9.arrangeFramesHorizontally();
    int var13 = (-1);
    var9.removeAllFromDesktop(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);

  }

  public void test271() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    var0.nextFocus();
    var0.doLayout();
    var0.pack();
    int var27 = 1;
    int var28 = 10;
    var0.setSize(var27, var28);
    int var30 = 1;
    var0.setCursor(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test272() throws Throwable {

    int var0 = 10;
    org.jhotdraw.figures.TextFigure.setCurrentFontStyle(var0);

  }

  public void test273() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    var0.nextFocus();
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    java.awt.Component var29 = var0.getComponentAt(var28);
    java.lang.Boolean var30 = new java.lang.Boolean(false);
    var0.setFocusTraversalPolicyProvider(var30);
    int var32 = 10;
    var0.setCursor(var32);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var34 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var34.start();
    java.awt.Color var36 = var34.getForeground();
    var34.endAnimation();
    java.awt.Dimension var38 = var34.getMaximumSize();
    var0.resize(var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JMenu var42 = var40.createLookAndFeelMenu();
    var40.open();
    org.jhotdraw.contrib.MDI_DrawApplication var44 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var45 = var44.isDoubleBuffered();
    javax.swing.JRootPane var46 = var44.getRootPane();
    javax.swing.JLayeredPane var47 = var44.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.standard.StandardDrawingView var54 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var48, var52, var53);
    java.awt.Component var55 = var44.add((java.awt.Component)var54);
    boolean var56 = var54.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var57 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var58 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var59 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var57, (org.jhotdraw.framework.FigureChangeListener)var58);
    java.awt.Dimension var60 = var57.size();
    var54.removeFromSelection((org.jhotdraw.framework.Figure)var57);
    org.jhotdraw.contrib.MDI_DrawApplication var62 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var63 = var62.isDoubleBuffered();
    javax.swing.JRootPane var64 = var62.getRootPane();
    javax.swing.JLayeredPane var65 = var62.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var66 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var67 = var66.isDoubleBuffered();
    javax.swing.JRootPane var68 = var66.getRootPane();
    javax.swing.JLayeredPane var69 = var66.getLayeredPane();
    int var70 = (-1);
    int var71 = 0;
    org.jhotdraw.standard.StandardDrawingView var72 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var66, var70, var71);
    java.awt.Component var73 = var62.add((java.awt.Component)var72);
    var54.setEditor((org.jhotdraw.framework.DrawingEditor)var62);
    org.jhotdraw.contrib.MDI_DrawApplication var75 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var76 = var75.isDoubleBuffered();
    javax.swing.JRootPane var77 = var75.getRootPane();
    javax.swing.JLayeredPane var78 = var75.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var79 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var80 = var79.isDoubleBuffered();
    javax.swing.JRootPane var81 = var79.getRootPane();
    java.lang.String var82 = var81.getUIClassID();
    java.awt.Insets var83 = var81.getInsets();
    int var84 = (-1);
    var78.setPosition((java.awt.Component)var81, var84);
    boolean var86 = var78.isDisplayable();
    boolean var87 = var54.isFocusCycleRoot((java.awt.Container)var78);
    var40.setLayeredPane(var78);
    javax.swing.JLayeredPane var89 = javax.swing.JLayeredPane.getLayeredPaneAbove((java.awt.Component)var78);
    var0.setLayeredPane(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == null);

  }

  public void test274() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.awt.Color var2 = var0.getFillColor();
    int var3 = org.jhotdraw.util.ColorMap.colorIndex(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 14);

  }

  public void test275() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    org.jhotdraw.figures.ScribbleTool var18 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var0);
    var18.deactivate();
    org.jhotdraw.framework.DrawingEditor var20 = var18.editor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test276() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    int var44 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var45 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var44);
    boolean var46 = var28.removeAll((java.util.Collection)var45);
    java.lang.Object[] var47 = var45.toArray();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var49 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var48);
    org.jhotdraw.standard.StandardDrawing var50 = new org.jhotdraw.standard.StandardDrawing();
    int var51 = var48.getLayer((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    int var60 = (-1);
    int var61 = 0;
    org.jhotdraw.standard.StandardDrawingView var62 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var56, var60, var61);
    java.awt.Component var63 = var52.add((java.awt.Component)var62);
    boolean var64 = var62.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var65 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var67 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var65, (org.jhotdraw.framework.FigureChangeListener)var66);
    java.awt.Dimension var68 = var65.size();
    var62.removeFromSelection((org.jhotdraw.framework.Figure)var65);
    var65.layout();
    java.lang.Object var71 = var65.clone();
    org.jhotdraw.framework.FigureChangeEvent var72 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var65);
    java.lang.Object var73 = var72.getSource();
    var50.figureInvalidated(var72);
    org.jhotdraw.contrib.ChopPolygonConnector var75 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    int var76 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var77 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var76);
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    boolean var81 = var77.remove((java.lang.Object)var78);
    var50.orphanAll((java.util.List)var77);
    boolean var83 = var45.removeAll((java.util.Collection)var77);
    int var84 = 100;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var85 = var77.remove(var84);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test277() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.layout();
    int var9 = var6.getHeight();
    javax.swing.InputMap var10 = var6.getInputMap();
    org.jhotdraw.standard.StandardDrawing var11 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var12 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.framework.Figure var14 = var11.remove((org.jhotdraw.framework.Figure)var12);
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    java.awt.Color var30 = var28.getForeground();
    var21.setBackground(var30);
    org.jhotdraw.framework.FigureEnumeration var32 = var21.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    var46.clearSelection();
    java.awt.Color var48 = var46.getForeground();
    var39.setBackground(var48);
    org.jhotdraw.framework.FigureEnumeration var50 = var39.selectionZOrdered();
    var21.addToSelectionAll(var50);
    var11.orphanAll(var50);
    java.lang.String var53 = "hi!";
    var11.setTitle(var53);
    int var55 = 0;
    int var56 = 10;
    boolean var57 = var11.containsPoint(var55, var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.toggleSelection((org.jhotdraw.framework.Figure)var11);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test278() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var16 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.standard.StandardDrawing var17 = new org.jhotdraw.standard.StandardDrawing();
    int var18 = var15.getLayer((org.jhotdraw.framework.Figure)var17);
    java.awt.Rectangle var19 = var17.displayBox();
    org.jhotdraw.framework.Figure var20 = var0.orphan((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.figures.TextFigure var21 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var21);
    org.jhotdraw.standard.StandardDrawing var23 = new org.jhotdraw.standard.StandardDrawing();
    int var24 = 1;
    int var25 = 1;
    org.jhotdraw.contrib.PolygonFigure var26 = new org.jhotdraw.contrib.PolygonFigure(var24, var25);
    org.jhotdraw.framework.FigureEnumeration var27 = var26.figures();
    java.awt.Rectangle var28 = var26.displayBox();
    int var29 = 1;
    int var30 = 1;
    org.jhotdraw.contrib.PolygonFigure var31 = new org.jhotdraw.contrib.PolygonFigure(var29, var30);
    org.jhotdraw.framework.FigureEnumeration var32 = var31.figures();
    java.awt.Rectangle var33 = var31.displayBox();
    org.jhotdraw.framework.Figure var34 = var23.findFigure(var28, (org.jhotdraw.framework.Figure)var31);
    int var35 = 100;
    int var36 = (-1);
    java.lang.Double var37 = new java.lang.Double((-1.0d));
    java.lang.Double var38 = new java.lang.Double(100.0d);
    java.lang.Double var39 = new java.lang.Double(1.0d);
    java.awt.Point var40 = org.jhotdraw.util.Geom.polarToPoint(var37, var38, var39);
    java.lang.Double var41 = new java.lang.Double((-1.0d));
    java.lang.Double var42 = new java.lang.Double(100.0d);
    java.lang.Double var43 = new java.lang.Double(1.0d);
    java.awt.Point var44 = org.jhotdraw.util.Geom.polarToPoint(var41, var42, var43);
    org.jhotdraw.contrib.DiamondFigure var45 = new org.jhotdraw.contrib.DiamondFigure(var40, var44);
    org.jhotdraw.framework.Figure var46 = var23.findFigureInsideWithout(var35, var36, (org.jhotdraw.framework.Figure)var45);
    java.util.Iterator var47 = var23.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    int var56 = (-1);
    int var57 = 0;
    org.jhotdraw.standard.StandardDrawingView var58 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var52, var56, var57);
    java.awt.Component var59 = var48.add((java.awt.Component)var58);
    boolean var60 = var58.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    java.awt.Dimension var64 = var61.size();
    var58.removeFromSelection((org.jhotdraw.framework.Figure)var61);
    var61.layout();
    java.lang.Object var67 = var61.clone();
    org.jhotdraw.framework.FigureChangeEvent var68 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var61);
    var23.figureRequestUpdate(var68);
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    java.awt.Dimension var73 = var70.size();
    var23.sendToBack((org.jhotdraw.framework.Figure)var70);
    var21.disconnect((org.jhotdraw.framework.Figure)var70);
    var0.sendToBack((org.jhotdraw.framework.Figure)var70);
    org.jhotdraw.util.StandardStorageFormat var77 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var78 = "hi!";
    org.jhotdraw.standard.StandardDrawing var79 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var80 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var81 = var80.handles();
    org.jhotdraw.framework.Figure var82 = var79.remove((org.jhotdraw.framework.Figure)var80);
    java.lang.String var83 = var77.store(var78, (org.jhotdraw.framework.Drawing)var79);
    boolean var84 = var0.containsFigure((org.jhotdraw.framework.Figure)var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test279() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    java.awt.Component var46 = var35.add((java.awt.Component)var45);
    boolean var47 = var45.getInheritsPopupMenu();
    boolean var48 = var45.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var49 = var45.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var53 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var52);
    var50.addDependendFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.framework.Handle var55 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var52);
    var45.removeFromSelection((org.jhotdraw.framework.Figure)var52);
    var25.removeItem((java.lang.Object)var52);
    org.jhotdraw.util.CommandChoice var58 = new org.jhotdraw.util.CommandChoice();
    int var59 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var60 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var59);
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    boolean var64 = var60.remove((java.lang.Object)var61);
    org.jhotdraw.contrib.StandardLayouter var65 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var61);
    var58.removeItem((java.lang.Object)var61);
    org.jhotdraw.standard.StandardDrawing var67 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.lang.Double var72 = new java.lang.Double((-1.0d));
    java.lang.Double var73 = new java.lang.Double(100.0d);
    java.lang.Double var74 = new java.lang.Double(1.0d);
    java.awt.Point var75 = org.jhotdraw.util.Geom.polarToPoint(var72, var73, var74);
    org.jhotdraw.contrib.DiamondFigure var76 = new org.jhotdraw.contrib.DiamondFigure(var71, var75);
    org.jhotdraw.framework.HandleEnumeration var77 = var76.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    org.jhotdraw.framework.Figure var81 = var67.replace((org.jhotdraw.framework.Figure)var76, (org.jhotdraw.framework.Figure)var78);
    var58.removeItem((java.lang.Object)var67);
    org.jhotdraw.util.CommandChoice var83 = new org.jhotdraw.util.CommandChoice();
    int var84 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var85 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var84);
    org.jhotdraw.contrib.GraphicalCompositeFigure var86 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var87 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var88 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var86, (org.jhotdraw.framework.FigureChangeListener)var87);
    boolean var89 = var85.remove((java.lang.Object)var86);
    org.jhotdraw.contrib.StandardLayouter var90 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var86);
    var83.removeItem((java.lang.Object)var86);
    var58.removeItemListener((java.awt.event.ItemListener)var83);
    var58.firePopupMenuWillBecomeVisible();
    int var94 = var58.getItemCount();
    java.awt.event.ItemListener var95 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var25, (java.awt.event.ItemListener)var58);
    java.awt.event.ActionListener[] var96 = var58.getActionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test280() throws Throwable {

    org.jhotdraw.contrib.html.HTMLLayouter var0 = new org.jhotdraw.contrib.html.HTMLLayouter();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var2 = new java.lang.Double((-1.0d));
    java.lang.Double var3 = new java.lang.Double(100.0d);
    java.lang.Double var4 = new java.lang.Double(1.0d);
    java.awt.Point var5 = org.jhotdraw.util.Geom.polarToPoint(var2, var3, var4);
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    org.jhotdraw.contrib.DiamondFigure var10 = new org.jhotdraw.contrib.DiamondFigure(var5, var9);
    org.jhotdraw.framework.HandleEnumeration var11 = var10.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    org.jhotdraw.framework.Figure var15 = var1.replace((org.jhotdraw.framework.Figure)var10, (org.jhotdraw.framework.Figure)var12);
    org.jhotdraw.framework.Handle var16 = org.jhotdraw.standard.BoxHandleKit.north(var15);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    var23.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var25 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var23.removeForeground((org.jhotdraw.framework.Painter)var25);
    org.jhotdraw.util.UndoableHandle var27 = new org.jhotdraw.util.UndoableHandle(var16, (org.jhotdraw.framework.DrawingView)var23);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    int var39 = (-1);
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var35, var39, var40);
    var41.clearSelection();
    java.awt.Color var43 = var41.getForeground();
    var34.setBackground(var43);
    org.jhotdraw.framework.FigureEnumeration var45 = var34.selectionZOrdered();
    var45.reset();
    var23.addToSelectionAll(var45);
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var49 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var48);
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    var48.addDependendFigure((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.framework.Handle var53 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.MDI_DrawApplication var54 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var55 = var54.isDoubleBuffered();
    javax.swing.JRootPane var56 = var54.getRootPane();
    javax.swing.JLayeredPane var57 = var54.getLayeredPane();
    int var58 = (-1);
    int var59 = 0;
    org.jhotdraw.standard.StandardDrawingView var60 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var54, var58, var59);
    org.jhotdraw.contrib.MDI_DrawApplication var61 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var62 = var61.isDoubleBuffered();
    javax.swing.JRootPane var63 = var61.getRootPane();
    javax.swing.JLayeredPane var64 = var61.getLayeredPane();
    int var65 = (-1);
    int var66 = 0;
    org.jhotdraw.standard.StandardDrawingView var67 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var61, var65, var66);
    var67.clearSelection();
    java.awt.Color var69 = var67.getForeground();
    var60.setBackground(var69);
    org.jhotdraw.framework.FigureEnumeration var71 = var60.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var72 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var73 = var72.isDoubleBuffered();
    javax.swing.JRootPane var74 = var72.getRootPane();
    javax.swing.JLayeredPane var75 = var72.getLayeredPane();
    int var76 = (-1);
    int var77 = 0;
    org.jhotdraw.standard.StandardDrawingView var78 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var72, var76, var77);
    org.jhotdraw.contrib.MDI_DrawApplication var79 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var80 = var79.isDoubleBuffered();
    javax.swing.JRootPane var81 = var79.getRootPane();
    javax.swing.JLayeredPane var82 = var79.getLayeredPane();
    int var83 = (-1);
    int var84 = 0;
    org.jhotdraw.standard.StandardDrawingView var85 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var79, var83, var84);
    var85.clearSelection();
    java.awt.Color var87 = var85.getForeground();
    var78.setBackground(var87);
    org.jhotdraw.framework.FigureEnumeration var89 = var78.selectionZOrdered();
    var60.addToSelectionAll(var89);
    boolean var91 = var23.figureExists((org.jhotdraw.framework.Figure)var50, var89);
    var50.layout();
    java.awt.Rectangle var93 = var50.displayBox();
    org.jhotdraw.contrib.Layouter var94 = var0.create((org.jhotdraw.contrib.Layoutable)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test281() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    java.awt.FocusTraversalPolicy var3 = var0.getFocusTraversalPolicy();
    org.jhotdraw.util.UndoManager var4 = var0.getUndoManager();
    boolean var5 = var0.isActive();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test282() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    var9.tileFramesVertically();
    javax.swing.JInternalFrame[] var11 = var9.getAllFrames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test283() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    int var3 = 0;
    var2.removeAllFromDesktop(var3);
    int var5 = 10;
    org.jhotdraw.util.collections.jdk11.SetWrapper var6 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    org.jhotdraw.util.collections.jdk11.SetWrapper var7 = new org.jhotdraw.util.collections.jdk11.SetWrapper((java.util.Set)var6);
    org.jhotdraw.standard.StandardDrawing var8 = new org.jhotdraw.standard.StandardDrawing();
    int var9 = 1;
    int var10 = 1;
    org.jhotdraw.contrib.PolygonFigure var11 = new org.jhotdraw.contrib.PolygonFigure(var9, var10);
    org.jhotdraw.framework.FigureEnumeration var12 = var11.figures();
    java.awt.Rectangle var13 = var11.displayBox();
    int var14 = 1;
    int var15 = 1;
    org.jhotdraw.contrib.PolygonFigure var16 = new org.jhotdraw.contrib.PolygonFigure(var14, var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var16.figures();
    java.awt.Rectangle var18 = var16.displayBox();
    org.jhotdraw.framework.Figure var19 = var8.findFigure(var13, (org.jhotdraw.framework.Figure)var16);
    int var20 = 100;
    int var21 = (-1);
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.Figure var31 = var8.findFigureInsideWithout(var20, var21, (org.jhotdraw.framework.Figure)var30);
    java.util.Iterator var32 = var8.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    java.awt.Component var44 = var33.add((java.awt.Component)var43);
    boolean var45 = var43.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var48 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var46, (org.jhotdraw.framework.FigureChangeListener)var47);
    java.awt.Dimension var49 = var46.size();
    var43.removeFromSelection((org.jhotdraw.framework.Figure)var46);
    var46.layout();
    java.lang.Object var52 = var46.clone();
    org.jhotdraw.framework.FigureChangeEvent var53 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var46);
    var8.figureRequestUpdate(var53);
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var56 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var57 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var55, (org.jhotdraw.framework.FigureChangeListener)var56);
    java.awt.Dimension var58 = var55.size();
    var8.sendToBack((org.jhotdraw.framework.Figure)var55);
    int var60 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var61 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var60);
    java.util.Iterator var62 = var61.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    boolean var65 = var63.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var67 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var68 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var66, (org.jhotdraw.framework.FigureChangeListener)var67);
    int var69 = var67.getZValue();
    java.lang.Object var70 = var67.clone();
    org.jhotdraw.standard.CreationTool var71 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var63, (org.jhotdraw.framework.Figure)var67);
    int var72 = 1;
    int var73 = 0;
    org.jhotdraw.standard.StandardDrawingView var74 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var63, var72, var73);
    boolean var75 = var61.contains((java.lang.Object)var73);
    var55.addAll((java.util.List)var61);
    boolean var77 = var6.containsAll((java.util.Collection)var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(var5, (java.util.Set)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test284() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 100;
    int var13 = (-1);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.Figure var23 = var0.findFigureInsideWithout(var12, var13, (org.jhotdraw.framework.Figure)var22);
    java.util.Iterator var24 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    javax.swing.JLayeredPane var28 = var25.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    java.awt.Component var36 = var25.add((java.awt.Component)var35);
    boolean var37 = var35.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    java.awt.Dimension var41 = var38.size();
    var35.removeFromSelection((org.jhotdraw.framework.Figure)var38);
    var38.layout();
    java.lang.Object var44 = var38.clone();
    org.jhotdraw.framework.FigureChangeEvent var45 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var38);
    var0.figureRequestUpdate(var45);
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var49 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var47, (org.jhotdraw.framework.FigureChangeListener)var48);
    java.awt.Dimension var50 = var47.size();
    var0.sendToBack((org.jhotdraw.framework.Figure)var47);
    org.jhotdraw.contrib.Layouter var52 = var47.getLayouter();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test285() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    boolean var3 = var1.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var6 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var4, (org.jhotdraw.framework.FigureChangeListener)var5);
    int var7 = var5.getZValue();
    java.lang.Object var8 = var5.clone();
    org.jhotdraw.standard.CreationTool var9 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var1, (org.jhotdraw.framework.Figure)var5);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var1.setFocusTraversalPolicyProvider(var10);
    org.jhotdraw.standard.CutCommand var12 = new org.jhotdraw.standard.CutCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.util.CommandButton var13 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test286() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    java.awt.Component var33 = var22.add((java.awt.Component)var32);
    var14.setEditor((org.jhotdraw.framework.DrawingEditor)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    java.lang.String var42 = var41.getUIClassID();
    java.awt.Insets var43 = var41.getInsets();
    int var44 = (-1);
    var38.setPosition((java.awt.Component)var41, var44);
    boolean var46 = var38.isDisplayable();
    boolean var47 = var14.isFocusCycleRoot((java.awt.Container)var38);
    var0.setLayeredPane(var38);
    var0.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test287() throws Throwable {

    org.jhotdraw.contrib.html.ETSLADisposalStrategy var0 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    java.lang.Long var1 = new java.lang.Long(100L);
    var0.stopDisposing(var1);
    java.lang.Long var3 = new java.lang.Long(10L);
    var0.stopDisposing(var3);

  }

  public void test288() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    java.util.List var18 = var0.getIconImages();
    org.jhotdraw.standard.FigureEnumerator var19 = new org.jhotdraw.standard.FigureEnumerator((java.util.Collection)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    java.awt.Component var35 = var24.add((java.awt.Component)var34);
    boolean var36 = var34.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var34.removeFromSelection((org.jhotdraw.framework.Figure)var37);
    var37.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var43 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var20, (org.jhotdraw.framework.Figure)var37);
    org.jhotdraw.util.StandardStorageFormat var44 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var45 = var44.getFileDescription();
    java.lang.String var46 = "hi!";
    org.jhotdraw.standard.StandardDrawing var47 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var48 = new java.lang.Double((-1.0d));
    java.lang.Double var49 = new java.lang.Double(100.0d);
    java.lang.Double var50 = new java.lang.Double(1.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.polarToPoint(var48, var49, var50);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    org.jhotdraw.contrib.DiamondFigure var56 = new org.jhotdraw.contrib.DiamondFigure(var51, var55);
    org.jhotdraw.framework.HandleEnumeration var57 = var56.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var58 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var59 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var60 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var58, (org.jhotdraw.framework.FigureChangeListener)var59);
    org.jhotdraw.framework.Figure var61 = var47.replace((org.jhotdraw.framework.Figure)var56, (org.jhotdraw.framework.Figure)var58);
    java.lang.String var62 = var44.store(var46, (org.jhotdraw.framework.Drawing)var47);
    org.jhotdraw.framework.FigureEnumeration var63 = var47.figures();
    var37.orphanAll(var63);
    org.jhotdraw.framework.FigureEnumeration var65 = var37.figures();
    org.jhotdraw.standard.FigureAndEnumerator var66 = new org.jhotdraw.standard.FigureAndEnumerator((org.jhotdraw.framework.FigureEnumeration)var19, var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.equals("hi!.draw"));

  }

  public void test289() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    boolean var2 = var0.isTextDirty();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    boolean var15 = var13.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var13.removeFromSelection((org.jhotdraw.framework.Figure)var16);
    var16.layout();
    java.lang.Object var22 = var16.clone();
    org.jhotdraw.framework.FigureChangeEvent var23 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var16);
    java.lang.Object var24 = var23.getSource();
    var0.figureInvalidated(var23);
    boolean var26 = var0.isFontDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test290() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    int var14 = 100;
    int var15 = 100;
    int var16 = 0;
    int var17 = 1;
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var42 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var40.removeForeground((org.jhotdraw.framework.Painter)var42);
    org.jhotdraw.util.UndoableHandle var44 = new org.jhotdraw.util.UndoableHandle(var33, (org.jhotdraw.framework.DrawingView)var40);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    int var56 = (-1);
    int var57 = 0;
    org.jhotdraw.standard.StandardDrawingView var58 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var52, var56, var57);
    var58.clearSelection();
    java.awt.Color var60 = var58.getForeground();
    var51.setBackground(var60);
    org.jhotdraw.framework.FigureEnumeration var62 = var51.selectionZOrdered();
    var62.reset();
    var40.addToSelectionAll(var62);
    org.jhotdraw.framework.Drawing var65 = var40.drawing();
    var13.invokeEnd(var14, var15, var16, var17, (org.jhotdraw.framework.DrawingView)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);

  }

  public void test291() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    var4.deactivate();
    var4.deactivate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test292() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    var0.lock();
    var0.resetDelay();

  }

  public void test293() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    var0.nextFocus();
    var0.doLayout();
    org.jhotdraw.figures.TextFigure var26 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var27 = var26.textDisplayBox();
    var0.setMaximizedBounds(var27);
    org.jhotdraw.framework.Tool var29 = var0.getDefaultTool();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);

  }

  public void test294() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    java.awt.LayoutManager var31 = var18.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test295() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    org.jhotdraw.figures.LineFigure var55 = new org.jhotdraw.figures.LineFigure();
    int var56 = (-1);
    int var57 = 10;
    var55.startPoint(var56, var57);
    java.awt.Point var59 = var55.startPoint();
    var54.includePoint((java.awt.geom.Point2D)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test296() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var16 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.standard.StandardDrawing var17 = new org.jhotdraw.standard.StandardDrawing();
    int var18 = var15.getLayer((org.jhotdraw.framework.Figure)var17);
    java.awt.Rectangle var19 = var17.displayBox();
    org.jhotdraw.framework.Figure var20 = var0.orphan((org.jhotdraw.framework.Figure)var17);
    var0.unlock();
    org.jhotdraw.contrib.GraphicalCompositeFigure var22 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var24 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var22, (org.jhotdraw.framework.FigureChangeListener)var23);
    java.awt.Dimension var25 = var22.size();
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    java.lang.Double var30 = new java.lang.Double((-1.0d));
    java.lang.Double var31 = new java.lang.Double(100.0d);
    java.lang.Double var32 = new java.lang.Double(1.0d);
    java.awt.Point var33 = org.jhotdraw.util.Geom.polarToPoint(var30, var31, var32);
    org.jhotdraw.figures.EllipseFigure var34 = new org.jhotdraw.figures.EllipseFigure(var29, var33);
    java.awt.Rectangle var35 = var34.displayBox();
    org.jhotdraw.standard.StandardDrawing var36 = new org.jhotdraw.standard.StandardDrawing();
    int var37 = 1;
    int var38 = 1;
    org.jhotdraw.contrib.PolygonFigure var39 = new org.jhotdraw.contrib.PolygonFigure(var37, var38);
    org.jhotdraw.framework.FigureEnumeration var40 = var39.figures();
    java.awt.Rectangle var41 = var39.displayBox();
    int var42 = 1;
    int var43 = 1;
    org.jhotdraw.contrib.PolygonFigure var44 = new org.jhotdraw.contrib.PolygonFigure(var42, var43);
    org.jhotdraw.framework.FigureEnumeration var45 = var44.figures();
    java.awt.Rectangle var46 = var44.displayBox();
    org.jhotdraw.framework.Figure var47 = var36.findFigure(var41, (org.jhotdraw.framework.Figure)var44);
    int var48 = 100;
    int var49 = (-1);
    java.lang.Double var50 = new java.lang.Double((-1.0d));
    java.lang.Double var51 = new java.lang.Double(100.0d);
    java.lang.Double var52 = new java.lang.Double(1.0d);
    java.awt.Point var53 = org.jhotdraw.util.Geom.polarToPoint(var50, var51, var52);
    java.lang.Double var54 = new java.lang.Double((-1.0d));
    java.lang.Double var55 = new java.lang.Double(100.0d);
    java.lang.Double var56 = new java.lang.Double(1.0d);
    java.awt.Point var57 = org.jhotdraw.util.Geom.polarToPoint(var54, var55, var56);
    org.jhotdraw.contrib.DiamondFigure var58 = new org.jhotdraw.contrib.DiamondFigure(var53, var57);
    org.jhotdraw.framework.Figure var59 = var36.findFigureInsideWithout(var48, var49, (org.jhotdraw.framework.Figure)var58);
    java.util.Iterator var60 = var36.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var61 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var62 = var61.isDoubleBuffered();
    javax.swing.JRootPane var63 = var61.getRootPane();
    javax.swing.JLayeredPane var64 = var61.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var65 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var66 = var65.isDoubleBuffered();
    javax.swing.JRootPane var67 = var65.getRootPane();
    javax.swing.JLayeredPane var68 = var65.getLayeredPane();
    int var69 = (-1);
    int var70 = 0;
    org.jhotdraw.standard.StandardDrawingView var71 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var65, var69, var70);
    java.awt.Component var72 = var61.add((java.awt.Component)var71);
    boolean var73 = var71.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var74 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var75 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var76 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var74, (org.jhotdraw.framework.FigureChangeListener)var75);
    java.awt.Dimension var77 = var74.size();
    var71.removeFromSelection((org.jhotdraw.framework.Figure)var74);
    var74.layout();
    java.lang.Object var80 = var74.clone();
    org.jhotdraw.framework.FigureChangeEvent var81 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var74);
    var36.figureRequestUpdate(var81);
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var22, var35, var81);
    var0.figureRequestUpdate(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test297() throws Throwable {

    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var0 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.util.collections.jdk11.ListWrapper var7 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    var8.open();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    java.awt.Component var23 = var12.add((java.awt.Component)var22);
    boolean var24 = var22.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var27 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var25, (org.jhotdraw.framework.FigureChangeListener)var26);
    java.awt.Dimension var28 = var25.size();
    var22.removeFromSelection((org.jhotdraw.framework.Figure)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    java.awt.Component var41 = var30.add((java.awt.Component)var40);
    var22.setEditor((org.jhotdraw.framework.DrawingEditor)var30);
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    javax.swing.JRootPane var45 = var43.getRootPane();
    javax.swing.JLayeredPane var46 = var43.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    java.lang.String var50 = var49.getUIClassID();
    java.awt.Insets var51 = var49.getInsets();
    int var52 = (-1);
    var46.setPosition((java.awt.Component)var49, var52);
    boolean var54 = var46.isDisplayable();
    boolean var55 = var22.isFocusCycleRoot((java.awt.Container)var46);
    var8.setLayeredPane(var46);
    boolean var57 = var7.remove((java.lang.Object)var46);
    java.util.List var58 = var0.createList((java.util.Collection)var7);
    java.util.Set var59 = var0.createSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test298() throws Throwable {

    org.jhotdraw.contrib.CustomToolBar var0 = new org.jhotdraw.contrib.CustomToolBar();
    int var1 = 100;
    java.awt.Component var2 = var0.getComponentAtIndex(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test299() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    boolean var4 = var0.isResizable();
    java.awt.Window var5 = var0.getOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test300() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = "";
    int var13 = 100;
    var10.insert(var12, var13);
    int var15 = 100;
    int var16 = 0;
    int var17 = 0;
    int var18 = 10;
    var10.reshape(var15, var16, var17, var18);
    org.jhotdraw.standard.StandardDrawing var20 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    org.jhotdraw.contrib.DiamondFigure var29 = new org.jhotdraw.contrib.DiamondFigure(var24, var28);
    org.jhotdraw.framework.HandleEnumeration var30 = var29.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    org.jhotdraw.framework.Figure var34 = var20.replace((org.jhotdraw.framework.Figure)var29, (org.jhotdraw.framework.Figure)var31);
    org.jhotdraw.framework.Handle var35 = org.jhotdraw.standard.BoxHandleKit.north(var34);
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    int var40 = (-1);
    int var41 = 0;
    org.jhotdraw.standard.StandardDrawingView var42 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var36, var40, var41);
    var42.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var44 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var42.removeForeground((org.jhotdraw.framework.Painter)var44);
    org.jhotdraw.util.UndoableHandle var46 = new org.jhotdraw.util.UndoableHandle(var35, (org.jhotdraw.framework.DrawingView)var42);
    org.jhotdraw.util.Undoable var47 = var46.getUndoActivity();
    java.awt.Rectangle var48 = var46.displayBox();
    var10.computeVisibleRect(var48);
    java.lang.Double var50 = new java.lang.Double(10.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.angleToPoint(var48, var50);
    org.jhotdraw.standard.ToggleGridCommand var52 = new org.jhotdraw.standard.ToggleGridCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1, var51);
    java.lang.String var53 = "";
    var52.setName(var53);
    org.jhotdraw.framework.DrawingView var55 = var52.view();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);

  }

  public void test301() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    java.awt.Container var2 = var0.getFocusCycleRootAncestor();
    boolean var3 = var0.isFocusTraversalPolicyProvider();
    org.jhotdraw.contrib.zoom.ZoomDrawingView var4 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    java.awt.GraphicsConfiguration var5 = var0.getGraphicsConfiguration();
    org.jhotdraw.framework.DrawingView var6 = var0.view();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test302() throws Throwable {

    java.util.Locale var0 = javax.swing.JComponent.getDefaultLocale();

  }

  public void test303() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    var10.transferFocusUpCycle();
    org.jhotdraw.standard.StandardDrawing var19 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.util.UndoableAdapter var28 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var26);
    var19.removeDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var26);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    var19.removeDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var41);
    var10.setDrawing((org.jhotdraw.framework.Drawing)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test304() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    var13.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var15);
    boolean var18 = var13.requestFocusInWindow();
    java.lang.String var19 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    java.lang.String var27 = var26.getUIClassID();
    java.awt.Insets var28 = var26.getInsets();
    int var29 = (-1);
    var23.setPosition((java.awt.Component)var26, var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    int var33 = 0;
    var23.setLayer((java.awt.Component)var31, var33);
    org.jhotdraw.figures.UngroupCommand var35 = new org.jhotdraw.figures.UngroupCommand(var19, (org.jhotdraw.framework.DrawingEditor)var31);
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    java.awt.Component var47 = var36.add((java.awt.Component)var46);
    boolean var48 = var46.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var51 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var49, (org.jhotdraw.framework.FigureChangeListener)var50);
    java.awt.Dimension var52 = var49.size();
    var46.removeFromSelection((org.jhotdraw.framework.Figure)var49);
    var35.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var46);
    boolean var55 = var35.isExecutable();
    var13.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var35);
    java.lang.String var57 = "";
    var35.setName(var57);
    var0.setAttribute(var2, (java.lang.Object)var57);
    boolean var60 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test305() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    boolean var22 = var16.isBorderPainted();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test306() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = "hi!";
    java.lang.Long var8 = new java.lang.Long(100L);
    java.lang.Long var9 = new java.lang.Long(1L);
    var6.firePropertyChange(var7, var8, var9);
    int var11 = var6.getX();
    var2.setAttribute(var3, (java.lang.Object)var11);
    org.jhotdraw.standard.StandardDrawing var13 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.HandleEnumeration var23 = var22.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    org.jhotdraw.framework.Figure var27 = var13.replace((org.jhotdraw.framework.Figure)var22, (org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Handle var28 = org.jhotdraw.standard.BoxHandleKit.north(var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var37 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var35.removeForeground((org.jhotdraw.framework.Painter)var37);
    org.jhotdraw.util.UndoableHandle var39 = new org.jhotdraw.util.UndoableHandle(var28, (org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    javax.swing.JLayeredPane var50 = var47.getLayeredPane();
    int var51 = (-1);
    int var52 = 0;
    org.jhotdraw.standard.StandardDrawingView var53 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var47, var51, var52);
    var53.clearSelection();
    java.awt.Color var55 = var53.getForeground();
    var46.setBackground(var55);
    org.jhotdraw.framework.FigureEnumeration var57 = var46.selectionZOrdered();
    var57.reset();
    var35.addToSelectionAll(var57);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.awt.Point var64 = var35.getLocation(var63);
    java.awt.Point var65 = var2.chop(var64);
    var2.willChange();
    int var67 = 1;
    int var68 = 10;
    int var69 = var2.splitSegment(var67, var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));

  }

  public void test307() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var0.setUndecorated(var10);
    int var12 = 10;
    var0.setExtendedState(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    java.awt.Component var25 = var14.add((java.awt.Component)var24);
    org.jhotdraw.framework.Tool var26 = var24.tool();
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    var24.setVisible(var27);
    org.jhotdraw.contrib.dnd.JHDDragSourceListener var29 = new org.jhotdraw.contrib.dnd.JHDDragSourceListener((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.DrawingView)var24);
    var24.updateUI();
    java.lang.String var31 = "";
    var24.setToolTipText(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test308() throws Throwable {

    org.jhotdraw.contrib.CustomToolBar var0 = new org.jhotdraw.contrib.CustomToolBar();
    int var1 = 100;
    java.awt.Component var2 = var0.getComponentAtIndex(var1);
    java.lang.Boolean var3 = new java.lang.Boolean(true);
    var0.setFloatable(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test309() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    org.jhotdraw.figures.ShortestDistanceConnector var2 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var0);
    int var3 = 100;
    int var4 = (-1);
    boolean var5 = var2.containsPoint(var3, var4);
    java.awt.Rectangle var6 = var2.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test310() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);
    javax.swing.event.MenuListener[] var8 = var6.getMenuListeners();
    java.awt.Component var9 = var6.getComponent();

  }

  public void test311() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.framework.FigureEnumeration var7 = var6.selectionZOrdered();
    java.awt.Insets var8 = var6.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test312() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var48 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var47);
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var50 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var49);
    var47.addDependendFigure((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.framework.Handle var52 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    var66.clearSelection();
    java.awt.Color var68 = var66.getForeground();
    var59.setBackground(var68);
    org.jhotdraw.framework.FigureEnumeration var70 = var59.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    org.jhotdraw.contrib.MDI_DrawApplication var78 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var79 = var78.isDoubleBuffered();
    javax.swing.JRootPane var80 = var78.getRootPane();
    javax.swing.JLayeredPane var81 = var78.getLayeredPane();
    int var82 = (-1);
    int var83 = 0;
    org.jhotdraw.standard.StandardDrawingView var84 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var78, var82, var83);
    var84.clearSelection();
    java.awt.Color var86 = var84.getForeground();
    var77.setBackground(var86);
    org.jhotdraw.framework.FigureEnumeration var88 = var77.selectionZOrdered();
    var59.addToSelectionAll(var88);
    boolean var90 = var22.figureExists((org.jhotdraw.framework.Figure)var49, var88);
    var49.layout();
    java.awt.Rectangle var92 = var49.displayBox();
    java.lang.String var93 = "";
    org.jhotdraw.util.StandardStorageFormat var94 = new org.jhotdraw.util.StandardStorageFormat();
    var49.setAttribute(var93, (java.lang.Object)var94);
    org.jhotdraw.figures.TextFigure var96 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var97 = var96.textDisplayBox();
    int var98 = var96.overlayColumns();
    var49.bringToFront((org.jhotdraw.framework.Figure)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 20);

  }

  public void test313() throws Throwable {

    org.jhotdraw.contrib.html.ResourceManagerNotSetException var0 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    org.jhotdraw.contrib.html.ResourceManagerNotSetException var1 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    java.lang.Throwable var2 = var0.initCause((java.lang.Throwable)var1);
    java.lang.StackTraceElement[] var3 = var0.getStackTrace();
    org.jhotdraw.framework.JHotDrawException var4 = new org.jhotdraw.framework.JHotDrawException((java.lang.Exception)var0);
    var0.printStackTrace();

  }

  public void test314() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.awt.Rectangle var4 = var2.displayBox();
    org.jhotdraw.framework.Handle var5 = org.jhotdraw.standard.BoxHandleKit.east((org.jhotdraw.framework.Figure)var2);
    int var6 = 0;
    java.awt.Point var7 = var2.pointAt(var6);
    boolean var8 = var2.isEmpty();
    int var9 = (-1);
    int var10 = 10;
    var2.addPoint(var9, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test315() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    var13.layout();
    java.lang.Object var19 = var13.clone();
    org.jhotdraw.framework.FigureChangeEvent var20 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.Layouter var21 = var13.getLayouter();
    org.jhotdraw.framework.Figure var22 = var13.getPresentationFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test316() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    int var36 = 1;
    int var37 = 0;
    var0.moveBy(var36, var37);
    org.jhotdraw.framework.Locator var39 = org.jhotdraw.standard.RelativeLocator.north();
    org.jhotdraw.standard.LocatorHandle var40 = new org.jhotdraw.standard.LocatorHandle((org.jhotdraw.framework.Figure)var0, var39);
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    org.jhotdraw.standard.StandardDrawing var44 = new org.jhotdraw.standard.StandardDrawing();
    int var45 = 1;
    int var46 = 1;
    org.jhotdraw.contrib.PolygonFigure var47 = new org.jhotdraw.contrib.PolygonFigure(var45, var46);
    org.jhotdraw.framework.FigureEnumeration var48 = var47.figures();
    java.awt.Rectangle var49 = var47.displayBox();
    int var50 = 1;
    int var51 = 1;
    org.jhotdraw.contrib.PolygonFigure var52 = new org.jhotdraw.contrib.PolygonFigure(var50, var51);
    org.jhotdraw.framework.FigureEnumeration var53 = var52.figures();
    java.awt.Rectangle var54 = var52.displayBox();
    org.jhotdraw.framework.Figure var55 = var44.findFigure(var49, (org.jhotdraw.framework.Figure)var52);
    int var56 = 100;
    int var57 = (-1);
    java.lang.Double var58 = new java.lang.Double((-1.0d));
    java.lang.Double var59 = new java.lang.Double(100.0d);
    java.lang.Double var60 = new java.lang.Double(1.0d);
    java.awt.Point var61 = org.jhotdraw.util.Geom.polarToPoint(var58, var59, var60);
    java.lang.Double var62 = new java.lang.Double((-1.0d));
    java.lang.Double var63 = new java.lang.Double(100.0d);
    java.lang.Double var64 = new java.lang.Double(1.0d);
    java.awt.Point var65 = org.jhotdraw.util.Geom.polarToPoint(var62, var63, var64);
    org.jhotdraw.contrib.DiamondFigure var66 = new org.jhotdraw.contrib.DiamondFigure(var61, var65);
    org.jhotdraw.framework.Figure var67 = var44.findFigureInsideWithout(var56, var57, (org.jhotdraw.framework.Figure)var66);
    java.util.Iterator var68 = var44.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var69 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var70 = var69.isDoubleBuffered();
    javax.swing.JRootPane var71 = var69.getRootPane();
    javax.swing.JLayeredPane var72 = var69.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var73 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var74 = var73.isDoubleBuffered();
    javax.swing.JRootPane var75 = var73.getRootPane();
    javax.swing.JLayeredPane var76 = var73.getLayeredPane();
    int var77 = (-1);
    int var78 = 0;
    org.jhotdraw.standard.StandardDrawingView var79 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var73, var77, var78);
    java.awt.Component var80 = var69.add((java.awt.Component)var79);
    boolean var81 = var79.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var82 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var83 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var84 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var82, (org.jhotdraw.framework.FigureChangeListener)var83);
    java.awt.Dimension var85 = var82.size();
    var79.removeFromSelection((org.jhotdraw.framework.Figure)var82);
    var82.layout();
    java.lang.Object var88 = var82.clone();
    org.jhotdraw.framework.FigureChangeEvent var89 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var82);
    var44.figureRequestUpdate(var89);
    var42.figureInvalidated(var89);
    var0.figureRequestRemove(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test317() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.StandardLayouter var6 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    org.jhotdraw.util.UndoableAdapter var15 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var13);
    org.jhotdraw.contrib.html.DisposableResourceHolder var16 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var15);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    var23.clearSelection();
    org.jhotdraw.util.UndoableAdapter var25 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var23);
    boolean var26 = var25.undo();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var29 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var27, (org.jhotdraw.framework.FigureChangeListener)var28);
    org.jhotdraw.standard.StandardDrawing var30 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var31 = new java.lang.Double((-1.0d));
    java.lang.Double var32 = new java.lang.Double(100.0d);
    java.lang.Double var33 = new java.lang.Double(1.0d);
    java.awt.Point var34 = org.jhotdraw.util.Geom.polarToPoint(var31, var32, var33);
    java.lang.Double var35 = new java.lang.Double((-1.0d));
    java.lang.Double var36 = new java.lang.Double(100.0d);
    java.lang.Double var37 = new java.lang.Double(1.0d);
    java.awt.Point var38 = org.jhotdraw.util.Geom.polarToPoint(var35, var36, var37);
    org.jhotdraw.contrib.DiamondFigure var39 = new org.jhotdraw.contrib.DiamondFigure(var34, var38);
    org.jhotdraw.framework.HandleEnumeration var40 = var39.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    org.jhotdraw.framework.Figure var44 = var30.replace((org.jhotdraw.framework.Figure)var39, (org.jhotdraw.framework.Figure)var41);
    org.jhotdraw.framework.Handle var45 = org.jhotdraw.standard.BoxHandleKit.north(var44);
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    javax.swing.JLayeredPane var49 = var46.getLayeredPane();
    int var50 = (-1);
    int var51 = 0;
    org.jhotdraw.standard.StandardDrawingView var52 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var46, var50, var51);
    var52.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var54 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var52.removeForeground((org.jhotdraw.framework.Painter)var54);
    org.jhotdraw.util.UndoableHandle var56 = new org.jhotdraw.util.UndoableHandle(var45, (org.jhotdraw.framework.DrawingView)var52);
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    org.jhotdraw.contrib.MDI_DrawApplication var64 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var65 = var64.isDoubleBuffered();
    javax.swing.JRootPane var66 = var64.getRootPane();
    javax.swing.JLayeredPane var67 = var64.getLayeredPane();
    int var68 = (-1);
    int var69 = 0;
    org.jhotdraw.standard.StandardDrawingView var70 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var64, var68, var69);
    var70.clearSelection();
    java.awt.Color var72 = var70.getForeground();
    var63.setBackground(var72);
    org.jhotdraw.framework.FigureEnumeration var74 = var63.selectionZOrdered();
    var74.reset();
    var52.addToSelectionAll(var74);
    var27.orphanAll(var74);
    var25.setAffectedFigures(var74);
    var16.setResource((java.lang.Object)var74);
    var2.orphanAll(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test318() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    java.lang.String var4 = var0.getApplicationName();
    org.jhotdraw.contrib.zoom.ZoomDrawingView var5 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.framework.FigureEnumeration var6 = var5.selection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.equals("JHotDraw"));

  }

  public void test319() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    java.util.Locale var2 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test320() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    var10.show();
    boolean var38 = var10.getIgnoreRepaint();
    org.jhotdraw.contrib.JPanelDesktop var39 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var10);
    java.lang.String var40 = "hi!";
    java.lang.Long var41 = new java.lang.Long(0L);
    java.lang.Long var42 = new java.lang.Long((-1L));
    var10.firePropertyChange(var40, var41, var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test321() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    org.jhotdraw.contrib.ChopPolygonConnector var27 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var2);
    int var28 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var29 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var28);
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var32 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var30, (org.jhotdraw.framework.FigureChangeListener)var31);
    boolean var33 = var29.remove((java.lang.Object)var30);
    var2.orphanAll((java.util.List)var29);
    org.jhotdraw.figures.BorderDecorator var35 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var36 = new org.jhotdraw.standard.StandardDrawing();
    int var37 = 1;
    int var38 = 1;
    org.jhotdraw.contrib.PolygonFigure var39 = new org.jhotdraw.contrib.PolygonFigure(var37, var38);
    org.jhotdraw.framework.FigureEnumeration var40 = var39.figures();
    java.awt.Rectangle var41 = var39.displayBox();
    int var42 = 1;
    int var43 = 1;
    org.jhotdraw.contrib.PolygonFigure var44 = new org.jhotdraw.contrib.PolygonFigure(var42, var43);
    org.jhotdraw.framework.FigureEnumeration var45 = var44.figures();
    java.awt.Rectangle var46 = var44.displayBox();
    org.jhotdraw.framework.Figure var47 = var36.findFigure(var41, (org.jhotdraw.framework.Figure)var44);
    int var48 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var49 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var48);
    var36.orphanAll((java.util.List)var49);
    int var51 = 100;
    int var52 = (-1);
    int var53 = 10;
    int var54 = 0;
    int var55 = 100;
    int var56 = (-1);
    int var57 = 1;
    int var58 = 1;
    java.awt.Point var59 = org.jhotdraw.util.Geom.intersect(var51, var52, var53, var54, var55, var56, var57, var58);
    int var60 = 100;
    int var61 = (-1);
    int var62 = 10;
    int var63 = 0;
    int var64 = 100;
    int var65 = (-1);
    int var66 = 1;
    int var67 = 1;
    java.awt.Point var68 = org.jhotdraw.util.Geom.intersect(var60, var61, var62, var63, var64, var65, var66, var67);
    var36.basicDisplayBox(var59, var68);
    var35.decorate((org.jhotdraw.framework.Figure)var36);
    java.awt.Rectangle var71 = var35.displayBox();
    org.jhotdraw.framework.Figure var72 = var2.findFigure(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == null);

  }

  public void test322() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    int var55 = (-1);
    int var56 = 10;
    var54.shiftBy(var55, var56);
    org.jhotdraw.contrib.MDI_DrawApplication var58 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var59 = var58.isDoubleBuffered();
    javax.swing.JRootPane var60 = var58.getRootPane();
    javax.swing.JLayeredPane var61 = var58.getLayeredPane();
    int var62 = (-1);
    int var63 = 0;
    org.jhotdraw.standard.StandardDrawingView var64 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var58, var62, var63);
    var64.clearSelection();
    org.jhotdraw.util.UndoableAdapter var66 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var64);
    boolean var67 = var66.isRedoable();
    boolean var68 = var66.isRedoable();
    boolean var69 = var54.equals((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test323() throws Throwable {

    org.jhotdraw.figures.EllipseFigure var0 = new org.jhotdraw.figures.EllipseFigure();
    org.jhotdraw.framework.FigureEnumeration var1 = var0.figures();
    int var2 = (-1);
    int var3 = (-1);
    org.jhotdraw.framework.Connector var4 = var0.connectorAt(var2, var3);

  }

  public void test324() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    int var3 = 0;
    var2.removeAllFromDesktop(var3);
    org.jhotdraw.contrib.PolygonFigure var5 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var6 = org.jhotdraw.standard.RelativeLocator.center();
    int var7 = 0;
    org.jhotdraw.contrib.PolygonHandle var8 = new org.jhotdraw.contrib.PolygonHandle(var5, var6, var7);
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    var15.clearSelection();
    org.jhotdraw.util.UndoableAdapter var17 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var15);
    org.jhotdraw.util.UndoableHandle var18 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var8, (org.jhotdraw.framework.DrawingView)var15);
    org.jhotdraw.contrib.FloatingTextArea var19 = new org.jhotdraw.contrib.FloatingTextArea();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    int var28 = (-1);
    int var29 = 0;
    org.jhotdraw.standard.StandardDrawingView var30 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var24, var28, var29);
    java.awt.Component var31 = var20.add((java.awt.Component)var30);
    boolean var32 = var30.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    java.awt.Dimension var36 = var33.size();
    var30.removeFromSelection((org.jhotdraw.framework.Figure)var33);
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    java.awt.Component var49 = var38.add((java.awt.Component)var48);
    var30.setEditor((org.jhotdraw.framework.DrawingEditor)var38);
    java.awt.Dimension var51 = var30.minimumSize();
    java.awt.Font var52 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    var19.createOverlay((java.awt.Container)var30, var52);
    org.jhotdraw.util.UndoableHandle var54 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var8, (org.jhotdraw.framework.DrawingView)var30);
    int var55 = 1;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.addToDesktop((org.jhotdraw.framework.DrawingView)var30, var55);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test325() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.contrib.FloatingTextArea var14 = new org.jhotdraw.contrib.FloatingTextArea();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    java.awt.Component var26 = var15.add((java.awt.Component)var25);
    boolean var27 = var25.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    java.awt.Dimension var31 = var28.size();
    var25.removeFromSelection((org.jhotdraw.framework.Figure)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    java.awt.Component var44 = var33.add((java.awt.Component)var43);
    var25.setEditor((org.jhotdraw.framework.DrawingEditor)var33);
    java.awt.Dimension var46 = var25.minimumSize();
    java.awt.Font var47 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    var14.createOverlay((java.awt.Container)var25, var47);
    org.jhotdraw.util.UndoableHandle var49 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var25);
    int var50 = (-1);
    int var51 = 100;
    org.jhotdraw.standard.StandardDrawing var52 = new org.jhotdraw.standard.StandardDrawing();
    int var53 = 1;
    int var54 = 1;
    org.jhotdraw.contrib.PolygonFigure var55 = new org.jhotdraw.contrib.PolygonFigure(var53, var54);
    org.jhotdraw.framework.FigureEnumeration var56 = var55.figures();
    java.awt.Rectangle var57 = var55.displayBox();
    int var58 = 1;
    int var59 = 1;
    org.jhotdraw.contrib.PolygonFigure var60 = new org.jhotdraw.contrib.PolygonFigure(var58, var59);
    org.jhotdraw.framework.FigureEnumeration var61 = var60.figures();
    java.awt.Rectangle var62 = var60.displayBox();
    org.jhotdraw.framework.Figure var63 = var52.findFigure(var57, (org.jhotdraw.framework.Figure)var60);
    int var64 = 100;
    int var65 = (-1);
    java.lang.Double var66 = new java.lang.Double((-1.0d));
    java.lang.Double var67 = new java.lang.Double(100.0d);
    java.lang.Double var68 = new java.lang.Double(1.0d);
    java.awt.Point var69 = org.jhotdraw.util.Geom.polarToPoint(var66, var67, var68);
    java.lang.Double var70 = new java.lang.Double((-1.0d));
    java.lang.Double var71 = new java.lang.Double(100.0d);
    java.lang.Double var72 = new java.lang.Double(1.0d);
    java.awt.Point var73 = org.jhotdraw.util.Geom.polarToPoint(var70, var71, var72);
    org.jhotdraw.contrib.DiamondFigure var74 = new org.jhotdraw.contrib.DiamondFigure(var69, var73);
    org.jhotdraw.framework.Figure var75 = var52.findFigureInsideWithout(var64, var65, (org.jhotdraw.framework.Figure)var74);
    var3.invokeStart(var50, var51, (org.jhotdraw.framework.Drawing)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);

  }

  public void test326() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.contrib.FloatingTextArea var14 = new org.jhotdraw.contrib.FloatingTextArea();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    java.awt.Component var26 = var15.add((java.awt.Component)var25);
    boolean var27 = var25.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    java.awt.Dimension var31 = var28.size();
    var25.removeFromSelection((org.jhotdraw.framework.Figure)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    java.awt.Component var44 = var33.add((java.awt.Component)var43);
    var25.setEditor((org.jhotdraw.framework.DrawingEditor)var33);
    java.awt.Dimension var46 = var25.minimumSize();
    java.awt.Font var47 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    var14.createOverlay((java.awt.Container)var25, var47);
    org.jhotdraw.util.UndoableHandle var49 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var25);
    int var50 = 100;
    int var51 = 100;
    int var52 = 100;
    int var53 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var54 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var55 = var54.isDoubleBuffered();
    javax.swing.JRootPane var56 = var54.getRootPane();
    javax.swing.JLayeredPane var57 = var54.getLayeredPane();
    int var58 = (-1);
    int var59 = 0;
    org.jhotdraw.standard.StandardDrawingView var60 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var54, var58, var59);
    org.jhotdraw.contrib.MDI_DrawApplication var61 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var62 = var61.isDoubleBuffered();
    javax.swing.JRootPane var63 = var61.getRootPane();
    javax.swing.JLayeredPane var64 = var61.getLayeredPane();
    int var65 = (-1);
    int var66 = 0;
    org.jhotdraw.standard.StandardDrawingView var67 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var61, var65, var66);
    var67.clearSelection();
    java.awt.Color var69 = var67.getForeground();
    var60.setBackground(var69);
    org.jhotdraw.framework.FigureEnumeration var71 = var60.selectionZOrdered();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var49.invokeStep(var50, var51, var52, var53, (org.jhotdraw.framework.DrawingView)var60);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test327() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    java.awt.Dimension var3 = var0.size();
    org.jhotdraw.util.Bounds var4 = new org.jhotdraw.util.Bounds(var3);

  }

  public void test328() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "";
    java.lang.String var2 = org.jhotdraw.util.VersionManagement.readVersionFromFile(var0, var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test329() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.standard.SelectAreaTracker var17 = new org.jhotdraw.standard.SelectAreaTracker((org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.framework.DrawingEditor var18 = var17.editor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test330() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    boolean var18 = var10.isReadOnly();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.util.UndoableAdapter var27 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var25);
    java.awt.Dimension var28 = var25.getPreferredSize();
    java.awt.Dimension var29 = var10.getSize(var28);
    var10.updateUI();
    org.jhotdraw.standard.StandardDrawing var31 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    var38.clearSelection();
    org.jhotdraw.util.UndoableAdapter var40 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var38);
    var31.removeDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var38);
    int var42 = 10;
    int var43 = 1;
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.lang.Double var48 = new java.lang.Double((-1.0d));
    java.lang.Double var49 = new java.lang.Double(100.0d);
    java.lang.Double var50 = new java.lang.Double(1.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.polarToPoint(var48, var49, var50);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    var46.basicDisplayBox(var51, var55);
    java.lang.Double var57 = new java.lang.Double(0.0d);
    java.lang.Double var58 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var59 = new org.jhotdraw.standard.RelativeLocator(var57, var58);
    int var60 = 0;
    org.jhotdraw.contrib.PolygonHandle var61 = new org.jhotdraw.contrib.PolygonHandle(var46, (org.jhotdraw.framework.Locator)var59, var60);
    org.jhotdraw.framework.Figure var62 = var31.findFigureInsideWithout(var42, var43, (org.jhotdraw.framework.Figure)var46);
    org.jhotdraw.contrib.GraphicalCompositeFigure var63 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var64 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var63);
    org.jhotdraw.standard.StandardDrawing var65 = new org.jhotdraw.standard.StandardDrawing();
    int var66 = var63.getLayer((org.jhotdraw.framework.Figure)var65);
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    java.awt.Component var78 = var67.add((java.awt.Component)var77);
    boolean var79 = var77.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var80 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var81 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var82 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var80, (org.jhotdraw.framework.FigureChangeListener)var81);
    java.awt.Dimension var83 = var80.size();
    var77.removeFromSelection((org.jhotdraw.framework.Figure)var80);
    var80.layout();
    java.lang.Object var86 = var80.clone();
    org.jhotdraw.framework.FigureChangeEvent var87 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var80);
    java.lang.Object var88 = var87.getSource();
    var65.figureInvalidated(var87);
    var65.release();
    var31.removeFigureChangeListener((org.jhotdraw.framework.FigureChangeListener)var65);
    var10.setDrawing((org.jhotdraw.framework.Drawing)var31);
    var31.willChange();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test331() throws Throwable {

    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    org.jhotdraw.contrib.dnd.DNDFiguresTransferable var1 = new org.jhotdraw.contrib.dnd.DNDFiguresTransferable((java.lang.Object)var0);

  }

  public void test332() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    boolean var2 = var0.isTextDirty();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    boolean var15 = var13.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var13.removeFromSelection((org.jhotdraw.framework.Figure)var16);
    var16.layout();
    java.lang.Object var22 = var16.clone();
    org.jhotdraw.framework.FigureChangeEvent var23 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var16);
    java.lang.Object var24 = var23.getSource();
    var0.figureInvalidated(var23);
    org.jhotdraw.figures.TextFigure var26 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var27 = var26.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var28 = new org.jhotdraw.standard.StandardDrawing();
    int var29 = 1;
    int var30 = 1;
    org.jhotdraw.contrib.PolygonFigure var31 = new org.jhotdraw.contrib.PolygonFigure(var29, var30);
    org.jhotdraw.framework.FigureEnumeration var32 = var31.figures();
    java.awt.Rectangle var33 = var31.displayBox();
    int var34 = 1;
    int var35 = 1;
    org.jhotdraw.contrib.PolygonFigure var36 = new org.jhotdraw.contrib.PolygonFigure(var34, var35);
    org.jhotdraw.framework.FigureEnumeration var37 = var36.figures();
    java.awt.Rectangle var38 = var36.displayBox();
    org.jhotdraw.framework.Figure var39 = var28.findFigure(var33, (org.jhotdraw.framework.Figure)var36);
    int var40 = 100;
    int var41 = (-1);
    java.lang.Double var42 = new java.lang.Double((-1.0d));
    java.lang.Double var43 = new java.lang.Double(100.0d);
    java.lang.Double var44 = new java.lang.Double(1.0d);
    java.awt.Point var45 = org.jhotdraw.util.Geom.polarToPoint(var42, var43, var44);
    java.lang.Double var46 = new java.lang.Double((-1.0d));
    java.lang.Double var47 = new java.lang.Double(100.0d);
    java.lang.Double var48 = new java.lang.Double(1.0d);
    java.awt.Point var49 = org.jhotdraw.util.Geom.polarToPoint(var46, var47, var48);
    org.jhotdraw.contrib.DiamondFigure var50 = new org.jhotdraw.contrib.DiamondFigure(var45, var49);
    org.jhotdraw.framework.Figure var51 = var28.findFigureInsideWithout(var40, var41, (org.jhotdraw.framework.Figure)var50);
    java.util.Iterator var52 = var28.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    java.awt.Component var64 = var53.add((java.awt.Component)var63);
    boolean var65 = var63.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var67 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var68 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var66, (org.jhotdraw.framework.FigureChangeListener)var67);
    java.awt.Dimension var69 = var66.size();
    var63.removeFromSelection((org.jhotdraw.framework.Figure)var66);
    var66.layout();
    java.lang.Object var72 = var66.clone();
    org.jhotdraw.framework.FigureChangeEvent var73 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var66);
    var28.figureRequestUpdate(var73);
    java.awt.Rectangle var75 = var73.getInvalidatedRectangle();
    var26.figureRequestUpdate(var73);
    var0.figureRequestUpdate(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test333() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    int var13 = 0;
    int var14 = (-1);
    org.jhotdraw.framework.Connector var15 = var2.connectorAt(var13, var14);
    java.lang.String var16 = "";
    org.jhotdraw.framework.FigureAttributeConstant var17 = new org.jhotdraw.framework.FigureAttributeConstant(var16);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JMenu var20 = var18.createLookAndFeelMenu();
    var18.open();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var18.setMinimumSize(var31);
    int var33 = 10;
    int var34 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var35 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var33, var34);
    double var36 = var35.getScale();
    var2.setAttribute(var17, (java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0d);

  }

  public void test334() throws Throwable {

    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var0 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.util.collections.jdk11.ListWrapper var7 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    var8.open();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    java.awt.Component var23 = var12.add((java.awt.Component)var22);
    boolean var24 = var22.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var27 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var25, (org.jhotdraw.framework.FigureChangeListener)var26);
    java.awt.Dimension var28 = var25.size();
    var22.removeFromSelection((org.jhotdraw.framework.Figure)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    java.awt.Component var41 = var30.add((java.awt.Component)var40);
    var22.setEditor((org.jhotdraw.framework.DrawingEditor)var30);
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    javax.swing.JRootPane var45 = var43.getRootPane();
    javax.swing.JLayeredPane var46 = var43.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    java.lang.String var50 = var49.getUIClassID();
    java.awt.Insets var51 = var49.getInsets();
    int var52 = (-1);
    var46.setPosition((java.awt.Component)var49, var52);
    boolean var54 = var46.isDisplayable();
    boolean var55 = var22.isFocusCycleRoot((java.awt.Container)var46);
    var8.setLayeredPane(var46);
    boolean var57 = var7.remove((java.lang.Object)var46);
    java.util.List var58 = var0.createList((java.util.Collection)var7);
    java.util.Set var59 = var0.createSet();
    java.util.List var60 = var0.createList();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test335() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    boolean var2 = var0.isTextDirty();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    boolean var15 = var13.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var13.removeFromSelection((org.jhotdraw.framework.Figure)var16);
    var16.layout();
    java.lang.Object var22 = var16.clone();
    org.jhotdraw.framework.FigureChangeEvent var23 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var16);
    java.lang.Object var24 = var23.getSource();
    var0.figureInvalidated(var23);
    java.awt.Font var26 = var0.createFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test336() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    int var15 = 1;
    int var16 = 1;
    org.jhotdraw.contrib.PolygonFigure var17 = new org.jhotdraw.contrib.PolygonFigure(var15, var16);
    org.jhotdraw.framework.FigureEnumeration var18 = var17.figures();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    var17.basicDisplayBox(var22, var26);
    java.lang.Double var28 = new java.lang.Double(0.0d);
    java.lang.Double var29 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var30 = new org.jhotdraw.standard.RelativeLocator(var28, var29);
    int var31 = 0;
    org.jhotdraw.contrib.PolygonHandle var32 = new org.jhotdraw.contrib.PolygonHandle(var17, (org.jhotdraw.framework.Locator)var30, var31);
    int var33 = 10;
    int var34 = 1;
    int var35 = 0;
    int var36 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.util.UndoableAdapter var45 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var43);
    java.awt.Dimension var46 = var43.getPreferredSize();
    var32.invokeEnd(var33, var34, var35, var36, (org.jhotdraw.framework.DrawingView)var43);
    int var48 = 0;
    int var49 = 1;
    org.jhotdraw.standard.StandardDrawing var50 = new org.jhotdraw.standard.StandardDrawing();
    int var51 = 1;
    int var52 = 1;
    org.jhotdraw.contrib.PolygonFigure var53 = new org.jhotdraw.contrib.PolygonFigure(var51, var52);
    org.jhotdraw.framework.FigureEnumeration var54 = var53.figures();
    java.awt.Rectangle var55 = var53.displayBox();
    int var56 = 1;
    int var57 = 1;
    org.jhotdraw.contrib.PolygonFigure var58 = new org.jhotdraw.contrib.PolygonFigure(var56, var57);
    org.jhotdraw.framework.FigureEnumeration var59 = var58.figures();
    java.awt.Rectangle var60 = var58.displayBox();
    org.jhotdraw.framework.Figure var61 = var50.findFigure(var55, (org.jhotdraw.framework.Figure)var58);
    var32.invokeEnd(var48, var49, (org.jhotdraw.framework.Drawing)var50);
    java.awt.Rectangle var63 = var32.displayBox();
    org.jhotdraw.framework.Figure var64 = var0.findFigure(var63);
    int var65 = 1;
    int var66 = 1;
    org.jhotdraw.contrib.PolygonFigure var67 = new org.jhotdraw.contrib.PolygonFigure(var65, var66);
    org.jhotdraw.framework.FigureEnumeration var68 = var67.figures();
    java.lang.Double var69 = new java.lang.Double((-1.0d));
    java.lang.Double var70 = new java.lang.Double(100.0d);
    java.lang.Double var71 = new java.lang.Double(1.0d);
    java.awt.Point var72 = org.jhotdraw.util.Geom.polarToPoint(var69, var70, var71);
    java.lang.Double var73 = new java.lang.Double((-1.0d));
    java.lang.Double var74 = new java.lang.Double(100.0d);
    java.lang.Double var75 = new java.lang.Double(1.0d);
    java.awt.Point var76 = org.jhotdraw.util.Geom.polarToPoint(var73, var74, var75);
    var67.basicDisplayBox(var72, var76);
    java.lang.Double var78 = new java.lang.Double(0.0d);
    java.lang.Double var79 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var80 = new org.jhotdraw.standard.RelativeLocator(var78, var79);
    int var81 = 0;
    org.jhotdraw.contrib.PolygonHandle var82 = new org.jhotdraw.contrib.PolygonHandle(var67, (org.jhotdraw.framework.Locator)var80, var81);
    int var83 = 10;
    int var84 = 1;
    int var85 = 0;
    int var86 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var87 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var88 = var87.isDoubleBuffered();
    javax.swing.JRootPane var89 = var87.getRootPane();
    javax.swing.JLayeredPane var90 = var87.getLayeredPane();
    int var91 = (-1);
    int var92 = 0;
    org.jhotdraw.standard.StandardDrawingView var93 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var87, var91, var92);
    var93.clearSelection();
    org.jhotdraw.util.UndoableAdapter var95 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var93);
    java.awt.Dimension var96 = var93.getPreferredSize();
    var82.invokeEnd(var83, var84, var85, var86, (org.jhotdraw.framework.DrawingView)var93);
    var0.removeDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var93);
    var93.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test337() throws Throwable {

    org.jhotdraw.contrib.html.ColorContentProducer var0 = new org.jhotdraw.contrib.html.ColorContentProducer();
    java.awt.Color var1 = var0.getColor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test338() throws Throwable {

    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    double var1 = var0.getRotationAngle();
    java.lang.Double var2 = new java.lang.Double(100.0d);
    var0.rotate(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.5707963267948966d));

  }

  public void test339() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    java.lang.Boolean var4 = new java.lang.Boolean(true);
    var3.setVerifyInputWhenFocusTarget(var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    int var13 = 0;
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var13, var14);
    java.awt.Color var16 = var6.getBackground();
    var3.setBackground(var16);
    int var18 = var3.highestLayer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-30000));

  }

  public void test340() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.awt.Graphics var4 = var0.getGraphics();
    org.jhotdraw.framework.Drawing var5 = var0.drawing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test341() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    var2.release();
    org.jhotdraw.figures.ArrowTip var28 = new org.jhotdraw.figures.ArrowTip();
    int var29 = 1;
    int var30 = 1;
    int var31 = 10;
    int var32 = 0;
    java.awt.Polygon var33 = var28.outline(var29, var30, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var28.setFillColor(var42);
    java.awt.Rectangle var44 = var28.displayBox();
    org.jhotdraw.framework.Figure var45 = var2.findFigure(var44);
    java.awt.Dimension var46 = var2.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);

  }

  public void test342() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var18 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var20 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var19);
    var17.addDependendFigure((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.standard.CreationTool var23 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var19);
    java.lang.Boolean var24 = new java.lang.Boolean(true);
    var0.setFocusableWindowState(var24);
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test343() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    var0.updateUI();
    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var3 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();
    java.util.Map var4 = var3.createMap();
    int var5 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertItemAt((java.lang.Object)var4, var5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test344() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    var16.removeNotify();
    java.lang.Boolean var23 = new java.lang.Boolean(false);
    var16.setEnabled(var23);
    boolean var25 = var16.isArmed();
    int var26 = 0;
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    boolean var32 = var28.remove((java.lang.Object)var29);
    org.jhotdraw.util.collections.jdk11.ListWrapper var33 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JMenu var36 = var34.createLookAndFeelMenu();
    var34.open();
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    java.awt.Component var49 = var38.add((java.awt.Component)var48);
    boolean var50 = var48.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var51 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var53 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var51, (org.jhotdraw.framework.FigureChangeListener)var52);
    java.awt.Dimension var54 = var51.size();
    var48.removeFromSelection((org.jhotdraw.framework.Figure)var51);
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    java.awt.Component var67 = var56.add((java.awt.Component)var66);
    var48.setEditor((org.jhotdraw.framework.DrawingEditor)var56);
    org.jhotdraw.contrib.MDI_DrawApplication var69 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var70 = var69.isDoubleBuffered();
    javax.swing.JRootPane var71 = var69.getRootPane();
    javax.swing.JLayeredPane var72 = var69.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var73 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var74 = var73.isDoubleBuffered();
    javax.swing.JRootPane var75 = var73.getRootPane();
    java.lang.String var76 = var75.getUIClassID();
    java.awt.Insets var77 = var75.getInsets();
    int var78 = (-1);
    var72.setPosition((java.awt.Component)var75, var78);
    boolean var80 = var72.isDisplayable();
    boolean var81 = var48.isFocusCycleRoot((java.awt.Container)var72);
    var34.setLayeredPane(var72);
    boolean var83 = var33.remove((java.lang.Object)var72);
    org.jhotdraw.util.collections.jdk11.SetWrapper var84 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    boolean var85 = var33.containsAll((java.util.Collection)var84);
    var16.setFocusTraversalKeys(var26, (java.util.Set)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test345() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    java.util.List var18 = var0.getIconImages();
    org.jhotdraw.standard.HandleEnumerator var19 = new org.jhotdraw.standard.HandleEnumerator((java.util.Collection)var18);
    boolean var20 = var19.hasNextHandle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test346() throws Throwable {

    int var0 = 100;
    int var1 = (-1);
    int var2 = 10;
    int var3 = 0;
    int var4 = 100;
    int var5 = (-1);
    int var6 = 1;
    int var7 = 1;
    java.awt.Point var8 = org.jhotdraw.util.Geom.intersect(var0, var1, var2, var3, var4, var5, var6, var7);
    org.jhotdraw.figures.ArrowTip var9 = new org.jhotdraw.figures.ArrowTip();
    int var10 = 1;
    int var11 = 1;
    int var12 = 10;
    int var13 = 0;
    java.awt.Polygon var14 = var9.outline(var10, var11, var12, var13);
    org.jhotdraw.standard.StandardDrawing var15 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.HandleEnumeration var25 = var24.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var28 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var26, (org.jhotdraw.framework.FigureChangeListener)var27);
    org.jhotdraw.framework.Figure var29 = var15.replace((org.jhotdraw.framework.Figure)var24, (org.jhotdraw.framework.Figure)var26);
    org.jhotdraw.framework.Handle var30 = org.jhotdraw.standard.BoxHandleKit.north(var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    var37.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var39 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var37.removeForeground((org.jhotdraw.framework.Painter)var39);
    org.jhotdraw.util.UndoableHandle var41 = new org.jhotdraw.util.UndoableHandle(var30, (org.jhotdraw.framework.DrawingView)var37);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    int var53 = (-1);
    int var54 = 0;
    org.jhotdraw.standard.StandardDrawingView var55 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var49, var53, var54);
    var55.clearSelection();
    java.awt.Color var57 = var55.getForeground();
    var48.setBackground(var57);
    org.jhotdraw.framework.FigureEnumeration var59 = var48.selectionZOrdered();
    var59.reset();
    var37.addToSelectionAll(var59);
    java.lang.Double var62 = new java.lang.Double((-1.0d));
    java.lang.Double var63 = new java.lang.Double(100.0d);
    java.lang.Double var64 = new java.lang.Double(1.0d);
    java.awt.Point var65 = org.jhotdraw.util.Geom.polarToPoint(var62, var63, var64);
    java.awt.Point var66 = var37.getLocation(var65);
    java.awt.Point var67 = org.jhotdraw.contrib.PolygonFigure.chop(var14, var65);
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.awt.Point var72 = org.jhotdraw.contrib.PolygonFigure.chop(var14, var71);
    org.jhotdraw.util.Bounds var73 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var8, (java.awt.geom.Point2D)var71);
    org.jhotdraw.figures.LineFigure var74 = new org.jhotdraw.figures.LineFigure();
    int var75 = (-1);
    int var76 = 10;
    var74.startPoint(var75, var76);
    java.awt.Point var78 = var74.startPoint();
    var73.setCenter((java.awt.geom.Point2D)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test347() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    javax.swing.Icon var5 = var2.getRolloverIcon();
    org.jhotdraw.util.CommandChoice var6 = new org.jhotdraw.util.CommandChoice();
    int var7 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var8 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var7);
    org.jhotdraw.contrib.GraphicalCompositeFigure var9 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var10 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var9, (org.jhotdraw.framework.FigureChangeListener)var10);
    boolean var12 = var8.remove((java.lang.Object)var9);
    org.jhotdraw.contrib.StandardLayouter var13 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var9);
    var6.removeItem((java.lang.Object)var9);
    org.jhotdraw.standard.StandardDrawing var15 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.HandleEnumeration var25 = var24.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var28 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var26, (org.jhotdraw.framework.FigureChangeListener)var27);
    org.jhotdraw.framework.Figure var29 = var15.replace((org.jhotdraw.framework.Figure)var24, (org.jhotdraw.framework.Figure)var26);
    var6.removeItem((java.lang.Object)var15);
    org.jhotdraw.util.CommandChoice var31 = new org.jhotdraw.util.CommandChoice();
    int var32 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var33 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var32);
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var36 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var34, (org.jhotdraw.framework.FigureChangeListener)var35);
    boolean var37 = var33.remove((java.lang.Object)var34);
    org.jhotdraw.contrib.StandardLayouter var38 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var34);
    var31.removeItem((java.lang.Object)var34);
    var6.removeItemListener((java.awt.event.ItemListener)var31);
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    javax.swing.JLayeredPane var44 = var41.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    java.awt.Component var52 = var41.add((java.awt.Component)var51);
    boolean var53 = var51.getInheritsPopupMenu();
    boolean var54 = var51.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var55 = var51.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var56 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var57 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var56);
    org.jhotdraw.contrib.GraphicalCompositeFigure var58 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var59 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var58);
    var56.addDependendFigure((org.jhotdraw.framework.Figure)var58);
    org.jhotdraw.framework.Handle var61 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var58);
    var51.removeFromSelection((org.jhotdraw.framework.Figure)var58);
    var31.removeItem((java.lang.Object)var58);
    var2.addItemListener((java.awt.event.ItemListener)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);

  }

  public void test348() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    java.awt.Component var46 = var35.add((java.awt.Component)var45);
    boolean var47 = var45.getInheritsPopupMenu();
    boolean var48 = var45.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var49 = var45.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var53 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var52);
    var50.addDependendFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.framework.Handle var55 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var52);
    var45.removeFromSelection((org.jhotdraw.framework.Figure)var52);
    var25.removeItem((java.lang.Object)var52);
    java.lang.Boolean var58 = new java.lang.Boolean(false);
    var25.setLightWeightPopupEnabled(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test349() throws Throwable {

    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var0 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.util.collections.jdk11.ListWrapper var7 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    var8.open();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    java.awt.Component var23 = var12.add((java.awt.Component)var22);
    boolean var24 = var22.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var27 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var25, (org.jhotdraw.framework.FigureChangeListener)var26);
    java.awt.Dimension var28 = var25.size();
    var22.removeFromSelection((org.jhotdraw.framework.Figure)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    java.awt.Component var41 = var30.add((java.awt.Component)var40);
    var22.setEditor((org.jhotdraw.framework.DrawingEditor)var30);
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    javax.swing.JRootPane var45 = var43.getRootPane();
    javax.swing.JLayeredPane var46 = var43.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    java.lang.String var50 = var49.getUIClassID();
    java.awt.Insets var51 = var49.getInsets();
    int var52 = (-1);
    var46.setPosition((java.awt.Component)var49, var52);
    boolean var54 = var46.isDisplayable();
    boolean var55 = var22.isFocusCycleRoot((java.awt.Container)var46);
    var8.setLayeredPane(var46);
    boolean var57 = var7.remove((java.lang.Object)var46);
    java.util.List var58 = var0.createList((java.util.Collection)var7);
    java.util.Set var59 = var0.createSet();
    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var60 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();
    java.util.Map var61 = var60.createMap();
    java.util.Map var62 = var0.createMap(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test350() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    var10.show();
    boolean var38 = var10.getIgnoreRepaint();
    org.jhotdraw.contrib.JPanelDesktop var39 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var10);
    java.lang.String var40 = "hi!";
    java.lang.Long var41 = new java.lang.Long(0L);
    java.lang.Long var42 = new java.lang.Long((-1L));
    var10.firePropertyChange(var40, var41, var42);
    var10.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test351() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.awt.Font var89 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var90 = var35.getFontMetrics(var89);
    java.lang.String var91 = var35.name();
    java.lang.String var92 = var35.name();
    javax.accessibility.AccessibleContext var93 = var35.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92.equals("hi!"));

  }

  public void test352() throws Throwable {

    org.jhotdraw.contrib.CustomToolBar var0 = new org.jhotdraw.contrib.CustomToolBar();
    int var1 = 100;
    java.awt.Component var2 = var0.getComponentAtIndex(var1);
    java.lang.Boolean var3 = new java.lang.Boolean(true);
    var0.setFloatable(var3);
    java.awt.Font var5 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var6 = var0.getFontMetrics(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test353() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 0;
    int var19 = 100;
    org.jhotdraw.samples.javadraw.BouncingDrawing var20 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    var20.animationStep();
    var20.animationStep();
    var20.animationStep();
    org.jhotdraw.figures.PolyLineFigure var24 = new org.jhotdraw.figures.PolyLineFigure();
    int var25 = var24.getZValue();
    org.jhotdraw.figures.ShortestDistanceConnector var26 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Figure var27 = var20.add((org.jhotdraw.framework.Figure)var24);
    var17.invokeEnd(var18, var19, (org.jhotdraw.framework.Drawing)var20);
    int var29 = 0;
    org.jhotdraw.framework.Figure var30 = var20.figureAt(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test354() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.standard.PasteCommand var5 = new org.jhotdraw.standard.PasteCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    int var6 = var1.getExtendedState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test355() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    int var36 = 1;
    int var37 = 0;
    var0.moveBy(var36, var37);
    java.lang.String var39 = "hi!";
    org.jhotdraw.contrib.FloatingTextArea var40 = new org.jhotdraw.contrib.FloatingTextArea();
    var0.setAttribute(var39, (java.lang.Object)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test356() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.framework.DrawingView var24 = var23.getActiveView();
    var23.deactivate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == null);

  }

  public void test357() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    int var14 = 1;
    org.jhotdraw.util.UndoManager var15 = new org.jhotdraw.util.UndoManager(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.util.UndoableAdapter var24 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var22);
    boolean var25 = var24.undo();
    java.lang.Boolean var26 = new java.lang.Boolean(false);
    var24.setUndoable(var26);
    boolean var28 = var24.undo();
    org.jhotdraw.util.Undoable var29 = org.jhotdraw.util.UndoRedoActivity.createUndoRedoActivity((org.jhotdraw.util.Undoable)var24);
    var15.pushUndo(var29);
    var13.setUndoActivity(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test358() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.lang.String var4 = var0.getAppletInfo();
    javax.swing.JRootPane var5 = var0.getRootPane();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JMenu var8 = var6.createLookAndFeelMenu();
    java.lang.Character var9 = new java.lang.Character('a');
    var8.setMnemonic(var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JMenu var13 = var11.createLookAndFeelMenu();
    java.lang.String var14 = var13.getName();
    boolean var15 = var8.isMenuComponent((java.awt.Component)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    java.lang.String var19 = var18.getUIClassID();
    java.awt.Insets var20 = var18.getInsets();
    var13.setMargin(var20);
    boolean var22 = var13.isMinimumSizeSet();
    int var23 = 0;
    org.jhotdraw.util.PaletteLayout var24 = new org.jhotdraw.util.PaletteLayout(var23);
    var13.setLayout((java.awt.LayoutManager)var24);
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JMenu var28 = var26.createLookAndFeelMenu();
    java.lang.Character var29 = new java.lang.Character('a');
    var28.setMnemonic(var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JMenu var33 = var31.createLookAndFeelMenu();
    java.lang.String var34 = var33.getName();
    boolean var35 = var28.isMenuComponent((java.awt.Component)var33);
    int var36 = 100;
    int var37 = (-1);
    int var38 = (-1);
    int var39 = (-1);
    var28.reshape(var36, var37, var38, var39);
    boolean var41 = var28.isContentAreaFilled();
    javax.swing.InputVerifier var42 = var28.getInputVerifier();
    javax.swing.KeyStroke var43 = var28.getAccelerator();
    int var44 = var28.getMnemonic();
    var13.remove((javax.swing.JMenuItem)var28);
    int var46 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var47 = var0.add((java.awt.Component)var13, var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 65);

  }

  public void test359() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.contrib.DiamondFigure var8 = new org.jhotdraw.contrib.DiamondFigure(var3, var7);
    org.jhotdraw.framework.HandleEnumeration var9 = var8.handles();
    java.util.List var10 = var9.toList();
    var9.reset();

  }

  public void test360() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    var25.requestFocus();
    int var36 = 100;
    var25.setMaximumRowCount(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test361() throws Throwable {

    int var0 = 100;
    int var1 = (-1);
    int var2 = 10;
    int var3 = 0;
    int var4 = 100;
    int var5 = (-1);
    int var6 = 1;
    int var7 = 1;
    java.awt.Point var8 = org.jhotdraw.util.Geom.intersect(var0, var1, var2, var3, var4, var5, var6, var7);
    org.jhotdraw.figures.ArrowTip var9 = new org.jhotdraw.figures.ArrowTip();
    int var10 = 1;
    int var11 = 1;
    int var12 = 10;
    int var13 = 0;
    java.awt.Polygon var14 = var9.outline(var10, var11, var12, var13);
    org.jhotdraw.standard.StandardDrawing var15 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.HandleEnumeration var25 = var24.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var28 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var26, (org.jhotdraw.framework.FigureChangeListener)var27);
    org.jhotdraw.framework.Figure var29 = var15.replace((org.jhotdraw.framework.Figure)var24, (org.jhotdraw.framework.Figure)var26);
    org.jhotdraw.framework.Handle var30 = org.jhotdraw.standard.BoxHandleKit.north(var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    var37.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var39 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var37.removeForeground((org.jhotdraw.framework.Painter)var39);
    org.jhotdraw.util.UndoableHandle var41 = new org.jhotdraw.util.UndoableHandle(var30, (org.jhotdraw.framework.DrawingView)var37);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    int var53 = (-1);
    int var54 = 0;
    org.jhotdraw.standard.StandardDrawingView var55 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var49, var53, var54);
    var55.clearSelection();
    java.awt.Color var57 = var55.getForeground();
    var48.setBackground(var57);
    org.jhotdraw.framework.FigureEnumeration var59 = var48.selectionZOrdered();
    var59.reset();
    var37.addToSelectionAll(var59);
    java.lang.Double var62 = new java.lang.Double((-1.0d));
    java.lang.Double var63 = new java.lang.Double(100.0d);
    java.lang.Double var64 = new java.lang.Double(1.0d);
    java.awt.Point var65 = org.jhotdraw.util.Geom.polarToPoint(var62, var63, var64);
    java.awt.Point var66 = var37.getLocation(var65);
    java.awt.Point var67 = org.jhotdraw.contrib.PolygonFigure.chop(var14, var65);
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.awt.Point var72 = org.jhotdraw.contrib.PolygonFigure.chop(var14, var71);
    org.jhotdraw.util.Bounds var73 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var8, (java.awt.geom.Point2D)var71);
    org.jhotdraw.figures.LineFigure var74 = new org.jhotdraw.figures.LineFigure();
    int var75 = (-1);
    int var76 = 10;
    var74.startPoint(var75, var76);
    java.awt.Point var78 = var74.startPoint();
    var73.setCenter((java.awt.geom.Point2D)var78);
    double var80 = var73.getGreaterY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 10.5d);

  }

  public void test362() throws Throwable {

    org.jhotdraw.contrib.html.ETSLADisposalStrategy var0 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    org.jhotdraw.contrib.html.StandardDisposableResourceManager var1 = new org.jhotdraw.contrib.html.StandardDisposableResourceManager((org.jhotdraw.contrib.html.ResourceDisposabilityStrategy)var0);
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    var4.basicDisplayBox(var9, var13);
    java.lang.String var15 = "";
    java.lang.Character var16 = new java.lang.Character(' ');
    org.jhotdraw.contrib.html.DisposableResourceHolder var17 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var16);
    var4.setAttribute(var15, (java.lang.Object)var17);
    var1.unregisterResource(var17);
    org.jhotdraw.contrib.html.ETSLADisposalStrategy var20 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    java.lang.Long var21 = new java.lang.Long(100L);
    var20.stopDisposing(var21);
    var1.setStrategy((org.jhotdraw.contrib.html.ResourceDisposabilityStrategy)var20);

  }

  public void test363() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.String var1 = org.jhotdraw.util.VersionManagement.extractVersionInfo(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("hi!"));

  }

  public void test364() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    int var36 = 1;
    int var37 = 0;
    var0.moveBy(var36, var37);
    org.jhotdraw.framework.Locator var39 = org.jhotdraw.standard.RelativeLocator.north();
    org.jhotdraw.standard.LocatorHandle var40 = new org.jhotdraw.standard.LocatorHandle((org.jhotdraw.framework.Figure)var0, var39);
    java.awt.Rectangle var41 = var0.displayBox();
    java.awt.Rectangle var42 = var0.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test365() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    var10.autoscroll(var17);
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    int var27 = (-1);
    int var28 = 0;
    org.jhotdraw.standard.StandardDrawingView var29 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var23, var27, var28);
    java.awt.Component var30 = var19.add((java.awt.Component)var29);
    org.jhotdraw.standard.StandardDrawing var31 = new org.jhotdraw.standard.StandardDrawing();
    int var32 = 1;
    int var33 = 1;
    org.jhotdraw.contrib.PolygonFigure var34 = new org.jhotdraw.contrib.PolygonFigure(var32, var33);
    org.jhotdraw.framework.FigureEnumeration var35 = var34.figures();
    java.awt.Rectangle var36 = var34.displayBox();
    int var37 = 1;
    int var38 = 1;
    org.jhotdraw.contrib.PolygonFigure var39 = new org.jhotdraw.contrib.PolygonFigure(var37, var38);
    org.jhotdraw.framework.FigureEnumeration var40 = var39.figures();
    java.awt.Rectangle var41 = var39.displayBox();
    org.jhotdraw.framework.Figure var42 = var31.findFigure(var36, (org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.figures.ArrowTip var43 = new org.jhotdraw.figures.ArrowTip();
    int var44 = 1;
    int var45 = 1;
    int var46 = 10;
    int var47 = 0;
    java.awt.Polygon var48 = var43.outline(var44, var45, var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    int var53 = (-1);
    int var54 = 0;
    org.jhotdraw.standard.StandardDrawingView var55 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var49, var53, var54);
    var55.clearSelection();
    java.awt.Color var57 = var55.getForeground();
    var43.setFillColor(var57);
    java.awt.Rectangle var59 = var43.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var60 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var31, var59);
    var29.drawingInvalidated(var60);
    var10.drawingRequestUpdate(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test366() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var10.setMinimumSize(var40);
    java.lang.Boolean var42 = new java.lang.Boolean(true);
    var10.setLocationByPlatform(var42);
    javax.swing.JRootPane var44 = var10.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test367() throws Throwable {

    org.jhotdraw.contrib.CustomToolBar var0 = new org.jhotdraw.contrib.CustomToolBar();
    int var1 = 100;
    java.awt.Component var2 = var0.getComponentAtIndex(var1);
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test368() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var14 = var10.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var16 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var18 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var17);
    var15.addDependendFigure((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.framework.Handle var20 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var17);
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    java.lang.String var22 = "";
    org.jhotdraw.framework.FigureAttributeConstant var23 = new org.jhotdraw.framework.FigureAttributeConstant(var22);
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    java.awt.Component var35 = var24.add((java.awt.Component)var34);
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var38 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var36, (org.jhotdraw.framework.FigureChangeListener)var37);
    java.awt.Dimension var39 = var36.size();
    var24.setPreferredSize(var39);
    org.jhotdraw.samples.javadraw.URLTool var41 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var24);
    java.awt.image.BufferStrategy var42 = var24.getBufferStrategy();
    java.util.List var43 = var24.getIconImages();
    var17.setAttribute(var23, (java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == null);

  }

  public void test369() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = "";
    var0.setApplicationName(var3);
    boolean var5 = var0.isActive();
    java.awt.MenuBar var6 = var0.getMenuBar();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    int var14 = 0;
    int var15 = 0;
    org.jhotdraw.standard.StandardDrawingView var16 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var14, var15);
    java.awt.Color var17 = var7.getBackground();
    var0.setForeground(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test370() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.framework.FigureAttributeConstant var1 = new org.jhotdraw.framework.FigureAttributeConstant(var0);

  }

  public void test371() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    java.awt.Rectangle var7 = var0.getBounds();
    org.jhotdraw.contrib.zoom.ZoomAreaTracker var8 = new org.jhotdraw.contrib.zoom.ZoomAreaTracker((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.JPanelDesktop var9 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test372() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    boolean var11 = var3.isDisplayable();
    java.lang.Boolean var12 = new java.lang.Boolean(true);
    var3.enable(var12);
    java.lang.String var14 = var3.getToolTipText();
    int var15 = 10;
    int var16 = 1;
    boolean var17 = var3.contains(var15, var16);
    java.awt.Font var18 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var19 = var3.getFontMetrics(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test373() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    java.lang.String var1 = "";
    java.lang.Object var2 = var0.getAttribute(var1);

  }

  public void test374() throws Throwable {

    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    double var1 = var0.getRotationAngle();
    java.lang.Double var2 = new java.lang.Double(100.0d);
    var0.rotate(var2);
    java.awt.Insets var4 = var0.connectionInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.5707963267948966d));

  }

  public void test375() throws Throwable {

    org.jhotdraw.samples.javadraw.BouncingDrawing var0 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    java.awt.Component var16 = var5.add((java.awt.Component)var15);
    boolean var17 = var15.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    java.awt.Dimension var21 = var18.size();
    var15.removeFromSelection((org.jhotdraw.framework.Figure)var18);
    var18.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var24 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var1, (org.jhotdraw.framework.Figure)var18);
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.framework.Figure var27 = var18.findFigureInside(var25, var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    var41.layout();
    java.lang.Object var47 = var41.clone();
    int var48 = 1;
    int var49 = 1;
    org.jhotdraw.contrib.PolygonFigure var50 = new org.jhotdraw.contrib.PolygonFigure(var48, var49);
    org.jhotdraw.framework.FigureEnumeration var51 = var50.figures();
    java.awt.Rectangle var52 = var50.displayBox();
    org.jhotdraw.framework.Figure var53 = var18.replace((org.jhotdraw.framework.Figure)var41, (org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.framework.Figure var54 = var0.remove((org.jhotdraw.framework.Figure)var18);
    org.jhotdraw.standard.StandardDrawing var55 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    org.jhotdraw.contrib.DiamondFigure var64 = new org.jhotdraw.contrib.DiamondFigure(var59, var63);
    org.jhotdraw.framework.HandleEnumeration var65 = var64.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var66 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var67 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var68 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var66, (org.jhotdraw.framework.FigureChangeListener)var67);
    org.jhotdraw.framework.Figure var69 = var55.replace((org.jhotdraw.framework.Figure)var64, (org.jhotdraw.framework.Figure)var66);
    org.jhotdraw.framework.Handle var70 = org.jhotdraw.standard.BoxHandleKit.north(var69);
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    var77.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var79 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var77.removeForeground((org.jhotdraw.framework.Painter)var79);
    org.jhotdraw.util.UndoableHandle var81 = new org.jhotdraw.util.UndoableHandle(var70, (org.jhotdraw.framework.DrawingView)var77);
    org.jhotdraw.util.Undoable var82 = var81.getUndoActivity();
    java.awt.Rectangle var83 = var81.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var84 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var0, var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test376() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.standard.StandardDrawing var6 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var7 = new java.lang.Double((-1.0d));
    java.lang.Double var8 = new java.lang.Double(100.0d);
    java.lang.Double var9 = new java.lang.Double(1.0d);
    java.awt.Point var10 = org.jhotdraw.util.Geom.polarToPoint(var7, var8, var9);
    java.lang.Double var11 = new java.lang.Double((-1.0d));
    java.lang.Double var12 = new java.lang.Double(100.0d);
    java.lang.Double var13 = new java.lang.Double(1.0d);
    java.awt.Point var14 = org.jhotdraw.util.Geom.polarToPoint(var11, var12, var13);
    org.jhotdraw.contrib.DiamondFigure var15 = new org.jhotdraw.contrib.DiamondFigure(var10, var14);
    org.jhotdraw.framework.HandleEnumeration var16 = var15.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    org.jhotdraw.framework.Figure var20 = var6.replace((org.jhotdraw.framework.Figure)var15, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.framework.Handle var21 = org.jhotdraw.standard.BoxHandleKit.north(var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var30 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var28.removeForeground((org.jhotdraw.framework.Painter)var30);
    org.jhotdraw.util.UndoableHandle var32 = new org.jhotdraw.util.UndoableHandle(var21, (org.jhotdraw.framework.DrawingView)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    var46.clearSelection();
    java.awt.Color var48 = var46.getForeground();
    var39.setBackground(var48);
    org.jhotdraw.framework.FigureEnumeration var50 = var39.selectionZOrdered();
    var50.reset();
    var28.addToSelectionAll(var50);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    java.lang.Double var54 = new java.lang.Double(100.0d);
    java.lang.Double var55 = new java.lang.Double(1.0d);
    java.awt.Point var56 = org.jhotdraw.util.Geom.polarToPoint(var53, var54, var55);
    java.awt.Point var57 = var28.getLocation(var56);
    java.awt.Point var58 = org.jhotdraw.contrib.PolygonFigure.chop(var5, var56);
    java.awt.Rectangle var59 = org.jhotdraw.contrib.PolygonFigure.bounds(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test377() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    java.awt.Rectangle var7 = var0.getBounds();
    org.jhotdraw.contrib.zoom.ZoomAreaTracker var8 = new org.jhotdraw.contrib.zoom.ZoomAreaTracker((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.JPanelDesktop var9 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    int var10 = 1;
    int var11 = 0;
    int var12 = var0.getBaseline(var10, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test378() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.util.StandardStorageFormat var24 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var25 = var24.getFileDescription();
    java.lang.String var26 = "hi!";
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    org.jhotdraw.contrib.DiamondFigure var36 = new org.jhotdraw.contrib.DiamondFigure(var31, var35);
    org.jhotdraw.framework.HandleEnumeration var37 = var36.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    org.jhotdraw.framework.Figure var41 = var27.replace((org.jhotdraw.framework.Figure)var36, (org.jhotdraw.framework.Figure)var38);
    java.lang.String var42 = var24.store(var26, (org.jhotdraw.framework.Drawing)var27);
    org.jhotdraw.framework.FigureEnumeration var43 = var27.figures();
    var17.orphanAll(var43);
    org.jhotdraw.framework.FigureEnumeration var45 = var17.figures();
    org.jhotdraw.framework.Locator var46 = org.jhotdraw.standard.RelativeLocator.center();
    org.jhotdraw.standard.LocatorHandle var47 = new org.jhotdraw.standard.LocatorHandle((org.jhotdraw.framework.Figure)var17, var46);
    org.jhotdraw.contrib.html.HTMLLayouter var48 = new org.jhotdraw.contrib.html.HTMLLayouter();
    var17.setLayouter((org.jhotdraw.contrib.Layouter)var48);
    int var50 = 100;
    int var51 = (-1);
    int var52 = 10;
    int var53 = 0;
    int var54 = 100;
    int var55 = (-1);
    int var56 = 1;
    int var57 = 1;
    java.awt.Point var58 = org.jhotdraw.util.Geom.intersect(var50, var51, var52, var53, var54, var55, var56, var57);
    org.jhotdraw.figures.BorderDecorator var59 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var60 = new org.jhotdraw.standard.StandardDrawing();
    int var61 = 1;
    int var62 = 1;
    org.jhotdraw.contrib.PolygonFigure var63 = new org.jhotdraw.contrib.PolygonFigure(var61, var62);
    org.jhotdraw.framework.FigureEnumeration var64 = var63.figures();
    java.awt.Rectangle var65 = var63.displayBox();
    int var66 = 1;
    int var67 = 1;
    org.jhotdraw.contrib.PolygonFigure var68 = new org.jhotdraw.contrib.PolygonFigure(var66, var67);
    org.jhotdraw.framework.FigureEnumeration var69 = var68.figures();
    java.awt.Rectangle var70 = var68.displayBox();
    org.jhotdraw.framework.Figure var71 = var60.findFigure(var65, (org.jhotdraw.framework.Figure)var68);
    int var72 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var73 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var72);
    var60.orphanAll((java.util.List)var73);
    int var75 = 100;
    int var76 = (-1);
    int var77 = 10;
    int var78 = 0;
    int var79 = 100;
    int var80 = (-1);
    int var81 = 1;
    int var82 = 1;
    java.awt.Point var83 = org.jhotdraw.util.Geom.intersect(var75, var76, var77, var78, var79, var80, var81, var82);
    int var84 = 100;
    int var85 = (-1);
    int var86 = 10;
    int var87 = 0;
    int var88 = 100;
    int var89 = (-1);
    int var90 = 1;
    int var91 = 1;
    java.awt.Point var92 = org.jhotdraw.util.Geom.intersect(var84, var85, var86, var87, var88, var89, var90, var91);
    var60.basicDisplayBox(var83, var92);
    var59.decorate((org.jhotdraw.framework.Figure)var60);
    java.awt.Rectangle var95 = var59.displayBox();
    java.awt.Point var96 = org.jhotdraw.util.Geom.topLeftCorner(var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Rectangle var97 = var48.calculateLayout(var58, var96);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == null);

  }

  public void test379() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.StandardLayouter var6 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    org.jhotdraw.util.UndoableAdapter var15 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var13);
    org.jhotdraw.contrib.html.DisposableResourceHolder var16 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var15);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    var23.clearSelection();
    org.jhotdraw.util.UndoableAdapter var25 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var23);
    boolean var26 = var25.undo();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var29 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var27, (org.jhotdraw.framework.FigureChangeListener)var28);
    org.jhotdraw.standard.StandardDrawing var30 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var31 = new java.lang.Double((-1.0d));
    java.lang.Double var32 = new java.lang.Double(100.0d);
    java.lang.Double var33 = new java.lang.Double(1.0d);
    java.awt.Point var34 = org.jhotdraw.util.Geom.polarToPoint(var31, var32, var33);
    java.lang.Double var35 = new java.lang.Double((-1.0d));
    java.lang.Double var36 = new java.lang.Double(100.0d);
    java.lang.Double var37 = new java.lang.Double(1.0d);
    java.awt.Point var38 = org.jhotdraw.util.Geom.polarToPoint(var35, var36, var37);
    org.jhotdraw.contrib.DiamondFigure var39 = new org.jhotdraw.contrib.DiamondFigure(var34, var38);
    org.jhotdraw.framework.HandleEnumeration var40 = var39.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    org.jhotdraw.framework.Figure var44 = var30.replace((org.jhotdraw.framework.Figure)var39, (org.jhotdraw.framework.Figure)var41);
    org.jhotdraw.framework.Handle var45 = org.jhotdraw.standard.BoxHandleKit.north(var44);
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    javax.swing.JLayeredPane var49 = var46.getLayeredPane();
    int var50 = (-1);
    int var51 = 0;
    org.jhotdraw.standard.StandardDrawingView var52 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var46, var50, var51);
    var52.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var54 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var52.removeForeground((org.jhotdraw.framework.Painter)var54);
    org.jhotdraw.util.UndoableHandle var56 = new org.jhotdraw.util.UndoableHandle(var45, (org.jhotdraw.framework.DrawingView)var52);
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    org.jhotdraw.contrib.MDI_DrawApplication var64 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var65 = var64.isDoubleBuffered();
    javax.swing.JRootPane var66 = var64.getRootPane();
    javax.swing.JLayeredPane var67 = var64.getLayeredPane();
    int var68 = (-1);
    int var69 = 0;
    org.jhotdraw.standard.StandardDrawingView var70 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var64, var68, var69);
    var70.clearSelection();
    java.awt.Color var72 = var70.getForeground();
    var63.setBackground(var72);
    org.jhotdraw.framework.FigureEnumeration var74 = var63.selectionZOrdered();
    var74.reset();
    var52.addToSelectionAll(var74);
    var27.orphanAll(var74);
    var25.setAffectedFigures(var74);
    var16.setResource((java.lang.Object)var74);
    var2.orphanAll(var74);
    int var81 = 100;
    org.jhotdraw.framework.FigureEnumeration var82 = org.jhotdraw.standard.StandardFigureSelection.duplicateFigures(var74, var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test380() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.framework.JHotDrawRuntimeException var1 = new org.jhotdraw.framework.JHotDrawRuntimeException(var0);
    var1.printStackTrace();
    java.lang.String var3 = var1.getLocalizedMessage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.equals("hi!"));

  }

  public void test381() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureSelection var17 = var6.getFigureSelection();
    org.jhotdraw.util.UndoableAdapter var18 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test382() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var1 = var0.getObservedFigure();
    java.awt.Font var2 = var0.getFont();
    java.awt.Rectangle var3 = var0.textDisplayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test383() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.framework.Tool var5 = var0.getDefaultTool();
    var0.open();
    org.jhotdraw.framework.DrawingView[] var7 = var0.views();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test384() throws Throwable {

    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter();

  }

  public void test385() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    java.awt.Component var10 = var3.getComponentAt(var9);
    int var11 = var3.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var12 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var3);
    var12.tileFramesVertically();
    java.lang.String var14 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    int var22 = 0;
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var22, var23);
    org.jhotdraw.util.RedoCommand var25 = new org.jhotdraw.util.RedoCommand(var14, (org.jhotdraw.framework.DrawingEditor)var15);
    int var26 = 10;
    int var27 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var28 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var26, var27);
    int var29 = 0;
    var12.removeFromDesktop((org.jhotdraw.framework.DrawingView)var28, var29);
    int var31 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.addToDesktop((org.jhotdraw.framework.DrawingView)var28, var31);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test386() throws Throwable {

    int var0 = 100;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.standard.AWTCursor var1 = new org.jhotdraw.standard.AWTCursor(var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test387() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    org.jhotdraw.contrib.html.ColorContentProducer var3 = new org.jhotdraw.contrib.html.ColorContentProducer(var2);

  }

  public void test388() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.StandardLayouter var6 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var2);
    java.awt.Insets var7 = var6.getInsets();
    int var8 = 1;
    int var9 = 1;
    org.jhotdraw.contrib.PolygonFigure var10 = new org.jhotdraw.contrib.PolygonFigure(var8, var9);
    org.jhotdraw.framework.FigureEnumeration var11 = var10.figures();
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    var10.basicDisplayBox(var15, var19);
    java.lang.Double var21 = new java.lang.Double(0.0d);
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var23 = new org.jhotdraw.standard.RelativeLocator(var21, var22);
    int var24 = 0;
    org.jhotdraw.contrib.PolygonHandle var25 = new org.jhotdraw.contrib.PolygonHandle(var10, (org.jhotdraw.framework.Locator)var23, var24);
    int var26 = 10;
    int var27 = 1;
    int var28 = 0;
    int var29 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    var36.clearSelection();
    org.jhotdraw.util.UndoableAdapter var38 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var36);
    java.awt.Dimension var39 = var36.getPreferredSize();
    var25.invokeEnd(var26, var27, var28, var29, (org.jhotdraw.framework.DrawingView)var36);
    int var41 = 0;
    int var42 = 1;
    org.jhotdraw.standard.StandardDrawing var43 = new org.jhotdraw.standard.StandardDrawing();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    int var49 = 1;
    int var50 = 1;
    org.jhotdraw.contrib.PolygonFigure var51 = new org.jhotdraw.contrib.PolygonFigure(var49, var50);
    org.jhotdraw.framework.FigureEnumeration var52 = var51.figures();
    java.awt.Rectangle var53 = var51.displayBox();
    org.jhotdraw.framework.Figure var54 = var43.findFigure(var48, (org.jhotdraw.framework.Figure)var51);
    var25.invokeEnd(var41, var42, (org.jhotdraw.framework.Drawing)var43);
    java.awt.Rectangle var56 = var25.displayBox();
    java.lang.Double var57 = new java.lang.Double((-1.0d));
    java.awt.Point var58 = org.jhotdraw.util.Geom.angleToPoint(var56, var57);
    org.jhotdraw.figures.LineFigure var59 = new org.jhotdraw.figures.LineFigure();
    int var60 = (-1);
    int var61 = 10;
    var59.startPoint(var60, var61);
    java.awt.Point var63 = var59.startPoint();
    java.awt.Rectangle var64 = var6.calculateLayout(var58, var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);

  }

  public void test389() throws Throwable {

    org.jhotdraw.contrib.TriangleFigure var0 = new org.jhotdraw.contrib.TriangleFigure();
    java.awt.Color var1 = var0.getFrameColor();

  }

  public void test390() throws Throwable {

    int var0 = 100;
    int var1 = 1;
    int var2 = 10;
    int var3 = 10;
    int var4 = 1;
    int var5 = 1;
    int var6 = (-1);
    int var7 = 100;
    java.awt.Point var8 = org.jhotdraw.util.Geom.intersect(var0, var1, var2, var3, var4, var5, var6, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test391() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);
    javax.swing.InputMap var8 = var6.getInputMap();
    java.lang.String var9 = "";
    var6.setLabel(var9);
    java.lang.String var11 = "hi!";
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    var6.enable(var11, var12);

  }

  public void test392() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.layout();
    org.jhotdraw.util.collections.jdk11.SetWrapper var9 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    org.jhotdraw.util.collections.jdk11.SetWrapper var10 = new org.jhotdraw.util.collections.jdk11.SetWrapper((java.util.Set)var9);
    org.jhotdraw.util.collections.jdk11.SetWrapper var11 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    int var12 = var11.size();
    int var13 = var11.size();
    org.jhotdraw.standard.StandardDrawing var14 = new org.jhotdraw.standard.StandardDrawing();
    int var15 = 1;
    int var16 = 1;
    org.jhotdraw.contrib.PolygonFigure var17 = new org.jhotdraw.contrib.PolygonFigure(var15, var16);
    org.jhotdraw.framework.FigureEnumeration var18 = var17.figures();
    java.awt.Rectangle var19 = var17.displayBox();
    int var20 = 1;
    int var21 = 1;
    org.jhotdraw.contrib.PolygonFigure var22 = new org.jhotdraw.contrib.PolygonFigure(var20, var21);
    org.jhotdraw.framework.FigureEnumeration var23 = var22.figures();
    java.awt.Rectangle var24 = var22.displayBox();
    org.jhotdraw.framework.Figure var25 = var14.findFigure(var19, (org.jhotdraw.framework.Figure)var22);
    int var26 = 100;
    int var27 = (-1);
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    org.jhotdraw.contrib.DiamondFigure var36 = new org.jhotdraw.contrib.DiamondFigure(var31, var35);
    org.jhotdraw.framework.Figure var37 = var14.findFigureInsideWithout(var26, var27, (org.jhotdraw.framework.Figure)var36);
    java.util.Iterator var38 = var14.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    javax.swing.JRootPane var45 = var43.getRootPane();
    javax.swing.JLayeredPane var46 = var43.getLayeredPane();
    int var47 = (-1);
    int var48 = 0;
    org.jhotdraw.standard.StandardDrawingView var49 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var43, var47, var48);
    java.awt.Component var50 = var39.add((java.awt.Component)var49);
    boolean var51 = var49.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var53 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var54 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var52, (org.jhotdraw.framework.FigureChangeListener)var53);
    java.awt.Dimension var55 = var52.size();
    var49.removeFromSelection((org.jhotdraw.framework.Figure)var52);
    var52.layout();
    java.lang.Object var58 = var52.clone();
    org.jhotdraw.framework.FigureChangeEvent var59 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var52);
    var14.figureRequestUpdate(var59);
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    java.awt.Dimension var64 = var61.size();
    var14.sendToBack((org.jhotdraw.framework.Figure)var61);
    int var66 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var67 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var66);
    java.util.Iterator var68 = var67.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var69 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var70 = var69.isDoubleBuffered();
    boolean var71 = var69.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var72 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var73 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var74 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var72, (org.jhotdraw.framework.FigureChangeListener)var73);
    int var75 = var73.getZValue();
    java.lang.Object var76 = var73.clone();
    org.jhotdraw.standard.CreationTool var77 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var69, (org.jhotdraw.framework.Figure)var73);
    int var78 = 1;
    int var79 = 0;
    org.jhotdraw.standard.StandardDrawingView var80 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var69, var78, var79);
    boolean var81 = var67.contains((java.lang.Object)var79);
    var61.addAll((java.util.List)var67);
    boolean var83 = var11.containsAll((java.util.Collection)var67);
    int var84 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var85 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var84);
    org.jhotdraw.contrib.GraphicalCompositeFigure var86 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var87 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var88 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var86, (org.jhotdraw.framework.FigureChangeListener)var87);
    boolean var89 = var85.remove((java.lang.Object)var86);
    org.jhotdraw.contrib.GraphicalCompositeFigure var90 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var91 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var92 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var90, (org.jhotdraw.framework.FigureChangeListener)var91);
    int var93 = var91.getZValue();
    java.lang.Object var94 = var91.clone();
    org.jhotdraw.framework.FigureChangeListener var95 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var86, (org.jhotdraw.framework.FigureChangeListener)var91);
    boolean var96 = var11.remove((java.lang.Object)var95);
    boolean var97 = var10.containsAll((java.util.Collection)var11);
    var6.addAll((java.util.Collection)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test393() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    java.awt.Color var14 = var12.getForeground();
    var0.setFillColor(var14);
    java.awt.Rectangle var16 = var0.displayBox();
    java.awt.Color var17 = var0.getFillColor();
    java.awt.Rectangle var18 = var0.displayBox();
    java.awt.Color var19 = var0.getBorderColor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test394() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    java.lang.String var11 = var10.getUIClassID();
    java.awt.Insets var12 = var10.getInsets();
    int var13 = (-1);
    var7.setPosition((java.awt.Component)var10, var13);
    int var15 = var7.highestLayer();
    var7.disable();
    var0.setLayeredPane(var7);
    java.awt.Graphics var18 = var0.getGraphics();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    boolean var35 = var33.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var38 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var36, (org.jhotdraw.framework.FigureChangeListener)var37);
    java.awt.Dimension var39 = var36.size();
    var33.removeFromSelection((org.jhotdraw.framework.Figure)var36);
    var36.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var42 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var19, (org.jhotdraw.framework.Figure)var36);
    org.jhotdraw.util.StandardStorageFormat var43 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var44 = var43.getFileDescription();
    java.lang.String var45 = "hi!";
    org.jhotdraw.standard.StandardDrawing var46 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.lang.Double var51 = new java.lang.Double((-1.0d));
    java.lang.Double var52 = new java.lang.Double(100.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    java.awt.Point var54 = org.jhotdraw.util.Geom.polarToPoint(var51, var52, var53);
    org.jhotdraw.contrib.DiamondFigure var55 = new org.jhotdraw.contrib.DiamondFigure(var50, var54);
    org.jhotdraw.framework.HandleEnumeration var56 = var55.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var57 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var58 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var59 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var57, (org.jhotdraw.framework.FigureChangeListener)var58);
    org.jhotdraw.framework.Figure var60 = var46.replace((org.jhotdraw.framework.Figure)var55, (org.jhotdraw.framework.Figure)var57);
    java.lang.String var61 = var43.store(var45, (org.jhotdraw.framework.Drawing)var46);
    org.jhotdraw.framework.FigureEnumeration var62 = var46.figures();
    var36.orphanAll(var62);
    org.jhotdraw.framework.FigureEnumeration var64 = var36.figures();
    org.jhotdraw.framework.Locator var65 = org.jhotdraw.standard.RelativeLocator.center();
    org.jhotdraw.standard.LocatorHandle var66 = new org.jhotdraw.standard.LocatorHandle((org.jhotdraw.framework.Figure)var36, var65);
    var36.changed();
    org.jhotdraw.contrib.TextAreaTool var68 = new org.jhotdraw.contrib.TextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var36);
    boolean var69 = var68.isActivated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-30000));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test395() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.UndoManager var1 = new org.jhotdraw.util.UndoManager(var0);
    int var2 = var1.getRedoSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test396() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    java.awt.Rectangle var7 = var0.getBounds();
    org.jhotdraw.contrib.zoom.ZoomAreaTracker var8 = new org.jhotdraw.contrib.zoom.ZoomAreaTracker((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.JPanelDesktop var9 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    java.lang.String var17 = var16.getUIClassID();
    java.awt.Insets var18 = var16.getInsets();
    int var19 = (-1);
    var13.setPosition((java.awt.Component)var16, var19);
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    int var23 = 0;
    var13.setLayer((java.awt.Component)var21, var23);
    java.awt.Rectangle var25 = var13.getBounds();
    org.jhotdraw.contrib.DesktopEventService var26 = new org.jhotdraw.contrib.DesktopEventService((org.jhotdraw.contrib.Desktop)var9, (java.awt.Container)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test397() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    java.awt.Dimension var3 = var0.size();
    org.jhotdraw.framework.Locator var4 = org.jhotdraw.standard.RelativeLocator.east();
    org.jhotdraw.standard.LocatorConnector var5 = new org.jhotdraw.standard.LocatorConnector((org.jhotdraw.framework.Figure)var0, var4);
    java.awt.Rectangle var6 = var5.displayBox();

  }

  public void test398() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    org.jhotdraw.framework.DrawingView var4 = org.jhotdraw.standard.NullDrawingView.getManagedDrawingView((org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.standard.StandardDrawing var5 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    org.jhotdraw.contrib.DiamondFigure var14 = new org.jhotdraw.contrib.DiamondFigure(var9, var13);
    org.jhotdraw.framework.HandleEnumeration var15 = var14.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    org.jhotdraw.framework.Figure var19 = var5.replace((org.jhotdraw.framework.Figure)var14, (org.jhotdraw.framework.Figure)var16);
    org.jhotdraw.framework.Handle var20 = org.jhotdraw.standard.BoxHandleKit.north(var19);
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.standard.StandardDrawingView var27 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var21, var25, var26);
    var27.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var29 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var27.removeForeground((org.jhotdraw.framework.Painter)var29);
    org.jhotdraw.util.UndoableHandle var31 = new org.jhotdraw.util.UndoableHandle(var20, (org.jhotdraw.framework.DrawingView)var27);
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    var45.clearSelection();
    java.awt.Color var47 = var45.getForeground();
    var38.setBackground(var47);
    org.jhotdraw.framework.FigureEnumeration var49 = var38.selectionZOrdered();
    var49.reset();
    var27.addToSelectionAll(var49);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.awt.Point var56 = var27.getLocation(var55);
    var27.disable();
    var1.setLocationRelativeTo((java.awt.Component)var27);
    org.jhotdraw.util.StorageFormatManager var59 = var1.getStorageFormatManager();
    org.jhotdraw.standard.BringToFrontCommand var60 = new org.jhotdraw.standard.BringToFrontCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var61 = var60.isExecutableWithView();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == null);

  }

  public void test399() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    org.jhotdraw.framework.DrawingEditor var10 = var6.editor();
    int var11 = var6.getComponentCount();
    boolean var12 = var6.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test400() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var0.setUndecorated(var10);
    int var12 = 10;
    var0.setExtendedState(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    java.awt.Component var25 = var14.add((java.awt.Component)var24);
    org.jhotdraw.framework.Tool var26 = var24.tool();
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    var24.setVisible(var27);
    org.jhotdraw.contrib.dnd.JHDDragSourceListener var29 = new org.jhotdraw.contrib.dnd.JHDDragSourceListener((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.DrawingView)var24);
    var24.updateUI();
    java.lang.String var31 = "";
    var24.setToolTipText(var31);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    var39.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var41 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var39.removeForeground((org.jhotdraw.framework.Painter)var41);
    int var43 = 100;
    int var44 = 100;
    org.jhotdraw.standard.GridConstrainer var45 = new org.jhotdraw.standard.GridConstrainer(var43, var44);
    var39.setConstrainer((org.jhotdraw.framework.PointConstrainer)var45);
    int var47 = var45.getStepY();
    var24.setConstrainer((org.jhotdraw.framework.PointConstrainer)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 100);

  }

  public void test401() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.start();

  }

  public void test402() throws Throwable {

    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var0 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.util.collections.jdk11.ListWrapper var7 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    var8.open();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    java.awt.Component var23 = var12.add((java.awt.Component)var22);
    boolean var24 = var22.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var27 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var25, (org.jhotdraw.framework.FigureChangeListener)var26);
    java.awt.Dimension var28 = var25.size();
    var22.removeFromSelection((org.jhotdraw.framework.Figure)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    java.awt.Component var41 = var30.add((java.awt.Component)var40);
    var22.setEditor((org.jhotdraw.framework.DrawingEditor)var30);
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    javax.swing.JRootPane var45 = var43.getRootPane();
    javax.swing.JLayeredPane var46 = var43.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    java.lang.String var50 = var49.getUIClassID();
    java.awt.Insets var51 = var49.getInsets();
    int var52 = (-1);
    var46.setPosition((java.awt.Component)var49, var52);
    boolean var54 = var46.isDisplayable();
    boolean var55 = var22.isFocusCycleRoot((java.awt.Container)var46);
    var8.setLayeredPane(var46);
    boolean var57 = var7.remove((java.lang.Object)var46);
    java.util.List var58 = var0.createList((java.util.Collection)var7);
    java.util.Set var59 = var0.createSet();
    java.util.Map var60 = var0.createMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test403() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.standard.PasteCommand var5 = new org.jhotdraw.standard.PasteCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    boolean var6 = var5.isExecutableWithView();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test404() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var3 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var1);
    boolean var4 = var1.isCursorSet();
    org.jhotdraw.standard.SendToBackCommand var5 = new org.jhotdraw.standard.SendToBackCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.util.CommandButton var6 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var5);
    java.lang.String var7 = "hi!";
    java.lang.Float var8 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    java.awt.Container var11 = var9.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var12 = new org.jhotdraw.contrib.zoom.ZoomCommand(var7, var8, (org.jhotdraw.framework.DrawingEditor)var9);
    float var13 = var12.getScale();
    float var14 = var12.getScale();
    float var15 = var12.getScale();
    java.lang.String var16 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var17 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var17.start();
    org.jhotdraw.standard.CopyCommand var19 = new org.jhotdraw.standard.CopyCommand(var16, (org.jhotdraw.framework.DrawingEditor)var17);
    var19.dispose();
    java.lang.String var21 = "";
    org.jhotdraw.util.CommandMenu var22 = new org.jhotdraw.util.CommandMenu(var21);
    var19.addCommandListener((org.jhotdraw.util.CommandListener)var22);
    javax.swing.InputMap var24 = var22.getInputMap();
    java.awt.Point var25 = var22.getMousePosition();
    var12.addCommandListener((org.jhotdraw.util.CommandListener)var22);
    var5.addCommandListener((org.jhotdraw.util.CommandListener)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);

  }

  public void test405() throws Throwable {

    org.jhotdraw.figures.NullFigure var0 = new org.jhotdraw.figures.NullFigure();
    java.lang.Object var1 = var0.clone();
    int var2 = 10;
    org.jhotdraw.framework.FigureAttributeConstant var3 = org.jhotdraw.framework.FigureAttributeConstant.getConstant(var2);
    java.lang.Object var4 = var0.getAttribute(var3);
    int var5 = 10;
    int var6 = 1;
    org.jhotdraw.framework.Figure var7 = var0.findFigureInside(var5, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);

  }

  public void test406() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    boolean var15 = var13.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    int var19 = var17.getZValue();
    java.lang.Object var20 = var17.clone();
    org.jhotdraw.standard.CreationTool var21 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var13, (org.jhotdraw.framework.Figure)var17);
    java.lang.String var22 = "hi!";
    java.lang.String var23 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    java.awt.Graphics var28 = var24.getGraphics();
    java.lang.Boolean var29 = new java.lang.Boolean(true);
    var24.setLocationByPlatform(var29);
    org.jhotdraw.standard.StandardDrawing var31 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    java.lang.Double var36 = new java.lang.Double((-1.0d));
    java.lang.Double var37 = new java.lang.Double(100.0d);
    java.lang.Double var38 = new java.lang.Double(1.0d);
    java.awt.Point var39 = org.jhotdraw.util.Geom.polarToPoint(var36, var37, var38);
    org.jhotdraw.contrib.DiamondFigure var40 = new org.jhotdraw.contrib.DiamondFigure(var35, var39);
    org.jhotdraw.framework.HandleEnumeration var41 = var40.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var43 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var44 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var42, (org.jhotdraw.framework.FigureChangeListener)var43);
    org.jhotdraw.framework.Figure var45 = var31.replace((org.jhotdraw.framework.Figure)var40, (org.jhotdraw.framework.Figure)var42);
    org.jhotdraw.framework.Handle var46 = org.jhotdraw.standard.BoxHandleKit.north(var45);
    org.jhotdraw.standard.HandleTracker var47 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var24, var46);
    org.jhotdraw.standard.ToolButton var48 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var13, var22, var23, (org.jhotdraw.framework.Tool)var47);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var49 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var49.start();
    org.jhotdraw.framework.Tool var51 = var49.tool();
    java.awt.FocusTraversalPolicy var52 = var49.getFocusTraversalPolicy();
    var48.setFocusTraversalPolicy(var52);
    var10.removeMouseMotionListener((java.awt.event.MouseMotionListener)var48);
    var48.select();
    java.lang.String var56 = "hi!";
    java.lang.Character var57 = new java.lang.Character('a');
    java.lang.Character var58 = new java.lang.Character(' ');
    var48.firePropertyChange(var56, var57, var58);
    java.awt.Dimension var60 = var48.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test407() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    java.awt.Component var46 = var35.add((java.awt.Component)var45);
    boolean var47 = var45.getInheritsPopupMenu();
    boolean var48 = var45.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var49 = var45.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var53 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var52);
    var50.addDependendFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.framework.Handle var55 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var52);
    var45.removeFromSelection((org.jhotdraw.framework.Figure)var52);
    var25.removeItem((java.lang.Object)var52);
    org.jhotdraw.framework.FigureChangeEvent var58 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test408() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    var4.deactivate();
    var4.activate();
    java.lang.Boolean var7 = new java.lang.Boolean(true);
    var4.setUsable(var7);
    org.jhotdraw.framework.DrawingView var9 = var4.getActiveView();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);

  }

  public void test409() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    java.lang.Boolean var10 = new java.lang.Boolean(true);
    var2.setFocusTraversalPolicyProvider(var10);
    var2.removeNotify();
    javax.swing.Icon var13 = var2.getSelectedIcon();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);

  }

  public void test410() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = "hi!";
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var3 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var4 = var3.handles();
    org.jhotdraw.framework.Figure var5 = var2.remove((org.jhotdraw.framework.Figure)var3);
    java.lang.String var6 = var0.store(var1, (org.jhotdraw.framework.Drawing)var2);
    boolean var7 = var0.isStoreFormat();
    java.lang.String var8 = "hi!";
    var0.setFileDescription(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test411() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.framework.Tool var3 = var1.tool();
    java.awt.FocusTraversalPolicy var4 = var1.getFocusTraversalPolicy();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var7 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var5, (org.jhotdraw.framework.FigureChangeListener)var6);
    java.awt.Dimension var8 = var5.size();
    var1.resize(var8);
    org.jhotdraw.standard.DuplicateCommand var10 = new org.jhotdraw.standard.DuplicateCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    java.awt.Component var22 = var11.add((java.awt.Component)var21);
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    java.awt.Dimension var26 = var23.size();
    var11.setPreferredSize(var26);
    org.jhotdraw.samples.javadraw.URLTool var28 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var11);
    java.util.List var29 = var11.getIconImages();
    org.jhotdraw.standard.FigureEnumerator var30 = new org.jhotdraw.standard.FigureEnumerator((java.util.Collection)var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    java.awt.Component var46 = var35.add((java.awt.Component)var45);
    boolean var47 = var45.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var50 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var48, (org.jhotdraw.framework.FigureChangeListener)var49);
    java.awt.Dimension var51 = var48.size();
    var45.removeFromSelection((org.jhotdraw.framework.Figure)var48);
    var48.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var54 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var31, (org.jhotdraw.framework.Figure)var48);
    org.jhotdraw.util.StandardStorageFormat var55 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var56 = var55.getFileDescription();
    java.lang.String var57 = "hi!";
    org.jhotdraw.standard.StandardDrawing var58 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var59 = new java.lang.Double((-1.0d));
    java.lang.Double var60 = new java.lang.Double(100.0d);
    java.lang.Double var61 = new java.lang.Double(1.0d);
    java.awt.Point var62 = org.jhotdraw.util.Geom.polarToPoint(var59, var60, var61);
    java.lang.Double var63 = new java.lang.Double((-1.0d));
    java.lang.Double var64 = new java.lang.Double(100.0d);
    java.lang.Double var65 = new java.lang.Double(1.0d);
    java.awt.Point var66 = org.jhotdraw.util.Geom.polarToPoint(var63, var64, var65);
    org.jhotdraw.contrib.DiamondFigure var67 = new org.jhotdraw.contrib.DiamondFigure(var62, var66);
    org.jhotdraw.framework.HandleEnumeration var68 = var67.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var69 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var71 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var69, (org.jhotdraw.framework.FigureChangeListener)var70);
    org.jhotdraw.framework.Figure var72 = var58.replace((org.jhotdraw.framework.Figure)var67, (org.jhotdraw.framework.Figure)var69);
    java.lang.String var73 = var55.store(var57, (org.jhotdraw.framework.Drawing)var58);
    org.jhotdraw.framework.FigureEnumeration var74 = var58.figures();
    var48.orphanAll(var74);
    org.jhotdraw.framework.FigureEnumeration var76 = var48.figures();
    org.jhotdraw.standard.FigureAndEnumerator var77 = new org.jhotdraw.standard.FigureAndEnumerator((org.jhotdraw.framework.FigureEnumeration)var30, var76);
    int var78 = 0;
    int var79 = 1;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.FigureEnumeration var80 = var10.insertFigures(var76, var78, var79);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73.equals("hi!.draw"));

  }

  public void test412() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.awt.Color var10 = var0.getBackground();
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    var0.setUndecorated(var11);
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    javax.swing.JLayeredPane var16 = var13.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    java.awt.Component var24 = var13.add((java.awt.Component)var23);
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var27 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var25, (org.jhotdraw.framework.FigureChangeListener)var26);
    java.awt.Dimension var28 = var25.size();
    var13.setPreferredSize(var28);
    org.jhotdraw.figures.PolyLineFigure var30 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var31 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var13, (org.jhotdraw.framework.Figure)var30);
    org.jhotdraw.standard.CompositeFigure var32 = var31.getContainerFigure();
    java.lang.String var33 = "";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTool((org.jhotdraw.framework.Tool)var31, var33);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == null);

  }

  public void test413() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.StandardLayouter var6 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var2);
    java.awt.Insets var7 = var6.getInsets();
    int var8 = 1;
    int var9 = 1;
    org.jhotdraw.contrib.PolygonFigure var10 = new org.jhotdraw.contrib.PolygonFigure(var8, var9);
    org.jhotdraw.framework.FigureEnumeration var11 = var10.figures();
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    var10.basicDisplayBox(var15, var19);
    java.lang.Double var21 = new java.lang.Double(0.0d);
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var23 = new org.jhotdraw.standard.RelativeLocator(var21, var22);
    int var24 = 0;
    org.jhotdraw.contrib.PolygonHandle var25 = new org.jhotdraw.contrib.PolygonHandle(var10, (org.jhotdraw.framework.Locator)var23, var24);
    int var26 = 10;
    int var27 = 1;
    int var28 = 0;
    int var29 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    var36.clearSelection();
    org.jhotdraw.util.UndoableAdapter var38 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var36);
    java.awt.Dimension var39 = var36.getPreferredSize();
    var25.invokeEnd(var26, var27, var28, var29, (org.jhotdraw.framework.DrawingView)var36);
    int var41 = 0;
    int var42 = 1;
    org.jhotdraw.standard.StandardDrawing var43 = new org.jhotdraw.standard.StandardDrawing();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    int var49 = 1;
    int var50 = 1;
    org.jhotdraw.contrib.PolygonFigure var51 = new org.jhotdraw.contrib.PolygonFigure(var49, var50);
    org.jhotdraw.framework.FigureEnumeration var52 = var51.figures();
    java.awt.Rectangle var53 = var51.displayBox();
    org.jhotdraw.framework.Figure var54 = var43.findFigure(var48, (org.jhotdraw.framework.Figure)var51);
    var25.invokeEnd(var41, var42, (org.jhotdraw.framework.Drawing)var43);
    java.awt.Rectangle var56 = var25.displayBox();
    java.lang.Double var57 = new java.lang.Double((-1.0d));
    java.awt.Point var58 = org.jhotdraw.util.Geom.angleToPoint(var56, var57);
    org.jhotdraw.figures.LineFigure var59 = new org.jhotdraw.figures.LineFigure();
    int var60 = (-1);
    int var61 = 10;
    var59.startPoint(var60, var61);
    java.awt.Point var63 = var59.startPoint();
    java.awt.Rectangle var64 = var6.calculateLayout(var58, var63);
    java.lang.Double var65 = new java.lang.Double((-1.0d));
    java.lang.Double var66 = new java.lang.Double(100.0d);
    java.lang.Double var67 = new java.lang.Double(1.0d);
    java.awt.Point var68 = org.jhotdraw.util.Geom.polarToPoint(var65, var66, var67);
    java.lang.Double var69 = new java.lang.Double((-1.0d));
    java.lang.Double var70 = new java.lang.Double(100.0d);
    java.lang.Double var71 = new java.lang.Double(1.0d);
    java.awt.Point var72 = org.jhotdraw.util.Geom.polarToPoint(var69, var70, var71);
    java.awt.Rectangle var73 = var6.layout(var68, var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);

  }

  public void test414() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.framework.FigureEnumeration var31 = var10.selectionZOrdered();
    int var32 = var10.selectionCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test415() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    java.awt.event.WindowFocusListener[] var31 = var18.getWindowFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test416() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    var9.tileFramesVertically();
    int var11 = 100;
    var9.removeAllFromDesktop(var11);
    java.awt.Dimension var13 = var9.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test417() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    int var35 = var0.getMaximumRowCount();
    var0.firePopupMenuWillBecomeVisible();
    java.lang.String var37 = "";
    java.lang.Short var38 = new java.lang.Short((short)100);
    java.lang.Short var39 = new java.lang.Short((short)10);
    var0.firePropertyChange(var37, var38, var39);
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 8);

  }

  public void test418() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);
    javax.swing.event.MenuListener[] var8 = var6.getMenuListeners();
    java.awt.Component var9 = var6.getComponent();
    org.jhotdraw.figures.TextFigure var10 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var11 = var10.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var12 = new org.jhotdraw.standard.StandardDrawing();
    int var13 = 1;
    int var14 = 1;
    org.jhotdraw.contrib.PolygonFigure var15 = new org.jhotdraw.contrib.PolygonFigure(var13, var14);
    org.jhotdraw.framework.FigureEnumeration var16 = var15.figures();
    java.awt.Rectangle var17 = var15.displayBox();
    int var18 = 1;
    int var19 = 1;
    org.jhotdraw.contrib.PolygonFigure var20 = new org.jhotdraw.contrib.PolygonFigure(var18, var19);
    org.jhotdraw.framework.FigureEnumeration var21 = var20.figures();
    java.awt.Rectangle var22 = var20.displayBox();
    org.jhotdraw.framework.Figure var23 = var12.findFigure(var17, (org.jhotdraw.framework.Figure)var20);
    int var24 = 100;
    int var25 = (-1);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    java.lang.Double var30 = new java.lang.Double((-1.0d));
    java.lang.Double var31 = new java.lang.Double(100.0d);
    java.lang.Double var32 = new java.lang.Double(1.0d);
    java.awt.Point var33 = org.jhotdraw.util.Geom.polarToPoint(var30, var31, var32);
    org.jhotdraw.contrib.DiamondFigure var34 = new org.jhotdraw.contrib.DiamondFigure(var29, var33);
    org.jhotdraw.framework.Figure var35 = var12.findFigureInsideWithout(var24, var25, (org.jhotdraw.framework.Figure)var34);
    java.util.Iterator var36 = var12.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    javax.swing.JLayeredPane var44 = var41.getLayeredPane();
    int var45 = (-1);
    int var46 = 0;
    org.jhotdraw.standard.StandardDrawingView var47 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var41, var45, var46);
    java.awt.Component var48 = var37.add((java.awt.Component)var47);
    boolean var49 = var47.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var51 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var52 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var50, (org.jhotdraw.framework.FigureChangeListener)var51);
    java.awt.Dimension var53 = var50.size();
    var47.removeFromSelection((org.jhotdraw.framework.Figure)var50);
    var50.layout();
    java.lang.Object var56 = var50.clone();
    org.jhotdraw.framework.FigureChangeEvent var57 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var50);
    var12.figureRequestUpdate(var57);
    java.awt.Rectangle var59 = var57.getInvalidatedRectangle();
    var10.figureRequestUpdate(var57);
    var6.commandExecuted((java.util.EventObject)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test419() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);
    javax.swing.InputMap var8 = var6.getInputMap();
    java.lang.String var9 = "";
    var6.setLabel(var9);
    java.lang.String var11 = "hi!";
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    var6.enable(var11, var12);
    java.lang.String var14 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JMenu var24 = var22.createLookAndFeelMenu();
    java.lang.String var25 = var24.getName();
    java.lang.String var26 = "";
    int var27 = 100;
    var24.insert(var26, var27);
    int var29 = 100;
    int var30 = 0;
    int var31 = 0;
    int var32 = 10;
    var24.reshape(var29, var30, var31, var32);
    org.jhotdraw.standard.StandardDrawing var34 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var35 = new java.lang.Double((-1.0d));
    java.lang.Double var36 = new java.lang.Double(100.0d);
    java.lang.Double var37 = new java.lang.Double(1.0d);
    java.awt.Point var38 = org.jhotdraw.util.Geom.polarToPoint(var35, var36, var37);
    java.lang.Double var39 = new java.lang.Double((-1.0d));
    java.lang.Double var40 = new java.lang.Double(100.0d);
    java.lang.Double var41 = new java.lang.Double(1.0d);
    java.awt.Point var42 = org.jhotdraw.util.Geom.polarToPoint(var39, var40, var41);
    org.jhotdraw.contrib.DiamondFigure var43 = new org.jhotdraw.contrib.DiamondFigure(var38, var42);
    org.jhotdraw.framework.HandleEnumeration var44 = var43.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var45 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var47 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var45, (org.jhotdraw.framework.FigureChangeListener)var46);
    org.jhotdraw.framework.Figure var48 = var34.replace((org.jhotdraw.framework.Figure)var43, (org.jhotdraw.framework.Figure)var45);
    org.jhotdraw.framework.Handle var49 = org.jhotdraw.standard.BoxHandleKit.north(var48);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    var56.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var58 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var56.removeForeground((org.jhotdraw.framework.Painter)var58);
    org.jhotdraw.util.UndoableHandle var60 = new org.jhotdraw.util.UndoableHandle(var49, (org.jhotdraw.framework.DrawingView)var56);
    org.jhotdraw.util.Undoable var61 = var60.getUndoActivity();
    java.awt.Rectangle var62 = var60.displayBox();
    var24.computeVisibleRect(var62);
    java.lang.Double var64 = new java.lang.Double(10.0d);
    java.awt.Point var65 = org.jhotdraw.util.Geom.angleToPoint(var62, var64);
    org.jhotdraw.standard.ToggleGridCommand var66 = new org.jhotdraw.standard.ToggleGridCommand(var14, (org.jhotdraw.framework.DrawingEditor)var15, var65);
    java.lang.String var67 = "";
    var66.setName(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.remove((org.jhotdraw.util.Command)var66);
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test420() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var1 = var0.textDisplayBox();
    java.awt.Font var2 = var0.getFont();

  }

  public void test421() throws Throwable {

    org.jhotdraw.figures.LineConnection var0 = new org.jhotdraw.figures.LineConnection();

  }

  public void test422() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.framework.Tool var12 = var10.tool();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    java.lang.String var16 = var15.getUIClassID();
    java.awt.Insets var17 = var15.getInsets();
    java.awt.Insets var18 = var10.getInsets(var17);
    java.lang.Object var19 = var10.getTreeLock();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    java.awt.Component var35 = var24.add((java.awt.Component)var34);
    boolean var36 = var34.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var34.removeFromSelection((org.jhotdraw.framework.Figure)var37);
    var37.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var43 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var20, (org.jhotdraw.framework.Figure)var37);
    org.jhotdraw.util.StandardStorageFormat var44 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var45 = var44.getFileDescription();
    java.lang.String var46 = "hi!";
    org.jhotdraw.standard.StandardDrawing var47 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var48 = new java.lang.Double((-1.0d));
    java.lang.Double var49 = new java.lang.Double(100.0d);
    java.lang.Double var50 = new java.lang.Double(1.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.polarToPoint(var48, var49, var50);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    org.jhotdraw.contrib.DiamondFigure var56 = new org.jhotdraw.contrib.DiamondFigure(var51, var55);
    org.jhotdraw.framework.HandleEnumeration var57 = var56.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var58 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var59 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var60 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var58, (org.jhotdraw.framework.FigureChangeListener)var59);
    org.jhotdraw.framework.Figure var61 = var47.replace((org.jhotdraw.framework.Figure)var56, (org.jhotdraw.framework.Figure)var58);
    java.lang.String var62 = var44.store(var46, (org.jhotdraw.framework.Drawing)var47);
    org.jhotdraw.framework.FigureEnumeration var63 = var47.figures();
    var37.orphanAll(var63);
    org.jhotdraw.framework.FigureEnumeration var65 = var37.figures();
    int var66 = 10;
    int var67 = 10;
    java.lang.Boolean var68 = new java.lang.Boolean(false);
    org.jhotdraw.framework.FigureEnumeration var69 = var10.insertFigures(var65, var66, var67, var68);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var70 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var70.start();
    java.awt.Color var72 = var70.getForeground();
    var70.endAnimation();
    java.awt.Dimension var74 = var70.getMaximumSize();
    var10.setMinimumSize(var74);
    java.lang.String var76 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var77 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var78 = var77.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var79 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var77);
    boolean var80 = var77.isCursorSet();
    org.jhotdraw.standard.SendToBackCommand var81 = new org.jhotdraw.standard.SendToBackCommand(var76, (org.jhotdraw.framework.DrawingEditor)var77);
    org.jhotdraw.util.CommandButton var82 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var81);
    var10.addFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test423() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    var0.nextFocus();
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    java.awt.Component var29 = var0.getComponentAt(var28);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var30 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var30.start();
    java.awt.Color var32 = var30.getForeground();
    var0.setForeground(var32);
    org.jhotdraw.util.UndoManager var34 = var0.getUndoManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);

  }

  public void test424() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = "hi!";
    java.lang.Long var8 = new java.lang.Long(100L);
    java.lang.Long var9 = new java.lang.Long(1L);
    var6.firePropertyChange(var7, var8, var9);
    int var11 = var6.getX();
    var2.setAttribute(var3, (java.lang.Object)var11);
    org.jhotdraw.standard.StandardDrawing var13 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.HandleEnumeration var23 = var22.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    org.jhotdraw.framework.Figure var27 = var13.replace((org.jhotdraw.framework.Figure)var22, (org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Handle var28 = org.jhotdraw.standard.BoxHandleKit.north(var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var37 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var35.removeForeground((org.jhotdraw.framework.Painter)var37);
    org.jhotdraw.util.UndoableHandle var39 = new org.jhotdraw.util.UndoableHandle(var28, (org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    javax.swing.JLayeredPane var50 = var47.getLayeredPane();
    int var51 = (-1);
    int var52 = 0;
    org.jhotdraw.standard.StandardDrawingView var53 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var47, var51, var52);
    var53.clearSelection();
    java.awt.Color var55 = var53.getForeground();
    var46.setBackground(var55);
    org.jhotdraw.framework.FigureEnumeration var57 = var46.selectionZOrdered();
    var57.reset();
    var35.addToSelectionAll(var57);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.awt.Point var64 = var35.getLocation(var63);
    java.awt.Point var65 = var2.chop(var64);
    java.lang.Double var66 = new java.lang.Double((-1.0d));
    java.lang.Double var67 = new java.lang.Double(100.0d);
    java.lang.Double var68 = new java.lang.Double(1.0d);
    java.awt.Point var69 = org.jhotdraw.util.Geom.polarToPoint(var66, var67, var68);
    org.jhotdraw.util.Bounds var70 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var65, (java.awt.geom.Point2D)var69);
    org.jhotdraw.figures.LineFigure var71 = new org.jhotdraw.figures.LineFigure();
    int var72 = (-1);
    int var73 = 10;
    var71.startPoint(var72, var73);
    java.awt.Point var75 = var71.startPoint();
    boolean var76 = var70.intersectsPoint((java.awt.geom.Point2D)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test425() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    int var13 = 0;
    int var14 = (-1);
    org.jhotdraw.framework.Connector var15 = var2.connectorAt(var13, var14);
    int var16 = 0;
    int var17 = (-1);
    var2.addPoint(var16, var17);
    org.jhotdraw.framework.FigureChangeListener var19 = var2.listener();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test426() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    java.lang.Object[] var25 = var0.getSelectedObjects();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test427() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.awt.Graphics var4 = var0.getGraphics();
    org.jhotdraw.framework.DrawingView var5 = var0.view();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test428() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    int var10 = 100;
    int var11 = (-1);
    int var12 = (-1);
    int var13 = (-1);
    var2.reshape(var10, var11, var12, var13);
    boolean var15 = var2.isContentAreaFilled();
    javax.swing.InputVerifier var16 = var2.getInputVerifier();
    javax.swing.KeyStroke var17 = var2.getAccelerator();
    javax.swing.event.ChangeListener[] var18 = var2.getChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);

  }

  public void test429() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    var0.destroy();
    org.jhotdraw.contrib.zoom.ZoomTool var3 = new org.jhotdraw.contrib.zoom.ZoomTool((org.jhotdraw.framework.DrawingEditor)var0);

  }

  public void test430() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.contrib.DiamondFigure var8 = new org.jhotdraw.contrib.DiamondFigure(var3, var7);
    org.jhotdraw.framework.HandleEnumeration var9 = var8.handles();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    var8.basicDisplayBox(var13, var17);
    org.jhotdraw.standard.TextHolder var19 = var8.getTextHolder();
    org.jhotdraw.samples.javadraw.BouncingDrawing var20 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    var20.animationStep();
    var8.addDependendFigure((org.jhotdraw.framework.Figure)var20);
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.framework.Connector var25 = var20.connectorAt(var23, var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test431() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    int var1 = var0.pointCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test432() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    int var10 = 10;
    org.jhotdraw.framework.DrawingView[] var11 = var9.getAllFromDesktop(var10);
    javax.swing.JInternalFrame var12 = var9.getSelectedFrame();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test433() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    javax.swing.JInternalFrame var10 = var9.getSelectedFrame();
    var9.tileFramesVertically();
    java.lang.String var12 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    javax.swing.JLayeredPane var16 = var13.getLayeredPane();
    int var17 = (-1);
    int var18 = 0;
    org.jhotdraw.standard.StandardDrawingView var19 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var13, var17, var18);
    int var20 = 0;
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var13, var20, var21);
    org.jhotdraw.util.RedoCommand var23 = new org.jhotdraw.util.RedoCommand(var12, (org.jhotdraw.framework.DrawingEditor)var13);
    int var24 = 10;
    int var25 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var26 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var13, var24, var25);
    java.awt.Dimension var27 = var26.getUserSize();
    var9.setNextFocusableComponent((java.awt.Component)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test434() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    var9.tileFramesVertically();
    int var11 = 100;
    var9.removeAllFromDesktop(var11);
    java.awt.Font var13 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var14 = var9.getFontMetrics(var13);
    javax.swing.plaf.DesktopPaneUI var15 = var9.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test435() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.util.CommandButton var4 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var3);
    org.jhotdraw.framework.DrawingView var5 = var3.view();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test436() throws Throwable {

    int var0 = (-1);
    int var1 = 0;
    org.jhotdraw.figures.TextFigure var2 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var2);
    java.awt.Color var4 = var2.getFillColor();
    org.jhotdraw.util.Filler var5 = new org.jhotdraw.util.Filler(var0, var1, var4);

  }

  public void test437() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    int var13 = 0;
    int var14 = (-1);
    org.jhotdraw.framework.Connector var15 = var2.connectorAt(var13, var14);
    java.lang.String var16 = "";
    org.jhotdraw.framework.FigureAttributeConstant var17 = new org.jhotdraw.framework.FigureAttributeConstant(var16);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JMenu var20 = var18.createLookAndFeelMenu();
    var18.open();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var18.setMinimumSize(var31);
    int var33 = 10;
    int var34 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var35 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var33, var34);
    double var36 = var35.getScale();
    var2.setAttribute(var17, (java.lang.Object)var35);
    java.awt.Dimension var38 = var35.getUserSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0d);

  }

  public void test438() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    java.util.List var18 = var0.getIconImages();
    org.jhotdraw.standard.FigureEnumerator var19 = new org.jhotdraw.standard.FigureEnumerator((java.util.Collection)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    int var28 = (-1);
    int var29 = 0;
    org.jhotdraw.standard.StandardDrawingView var30 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var24, var28, var29);
    java.awt.Component var31 = var20.add((java.awt.Component)var30);
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    java.awt.Dimension var35 = var32.size();
    var20.setPreferredSize(var35);
    org.jhotdraw.samples.javadraw.URLTool var37 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var20);
    java.util.List var38 = var20.getIconImages();
    org.jhotdraw.standard.FigureEnumerator var39 = new org.jhotdraw.standard.FigureEnumerator((java.util.Collection)var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var44 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var45 = var44.isDoubleBuffered();
    javax.swing.JRootPane var46 = var44.getRootPane();
    javax.swing.JLayeredPane var47 = var44.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.standard.StandardDrawingView var54 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var48, var52, var53);
    java.awt.Component var55 = var44.add((java.awt.Component)var54);
    boolean var56 = var54.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var57 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var58 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var59 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var57, (org.jhotdraw.framework.FigureChangeListener)var58);
    java.awt.Dimension var60 = var57.size();
    var54.removeFromSelection((org.jhotdraw.framework.Figure)var57);
    var57.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var63 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var40, (org.jhotdraw.framework.Figure)var57);
    org.jhotdraw.util.StandardStorageFormat var64 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var65 = var64.getFileDescription();
    java.lang.String var66 = "hi!";
    org.jhotdraw.standard.StandardDrawing var67 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.lang.Double var72 = new java.lang.Double((-1.0d));
    java.lang.Double var73 = new java.lang.Double(100.0d);
    java.lang.Double var74 = new java.lang.Double(1.0d);
    java.awt.Point var75 = org.jhotdraw.util.Geom.polarToPoint(var72, var73, var74);
    org.jhotdraw.contrib.DiamondFigure var76 = new org.jhotdraw.contrib.DiamondFigure(var71, var75);
    org.jhotdraw.framework.HandleEnumeration var77 = var76.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var78 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var80 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var78, (org.jhotdraw.framework.FigureChangeListener)var79);
    org.jhotdraw.framework.Figure var81 = var67.replace((org.jhotdraw.framework.Figure)var76, (org.jhotdraw.framework.Figure)var78);
    java.lang.String var82 = var64.store(var66, (org.jhotdraw.framework.Drawing)var67);
    org.jhotdraw.framework.FigureEnumeration var83 = var67.figures();
    var57.orphanAll(var83);
    org.jhotdraw.framework.FigureEnumeration var85 = var57.figures();
    org.jhotdraw.standard.FigureAndEnumerator var86 = new org.jhotdraw.standard.FigureAndEnumerator((org.jhotdraw.framework.FigureEnumeration)var39, var85);
    org.jhotdraw.standard.FigureAndEnumerator var87 = new org.jhotdraw.standard.FigureAndEnumerator((org.jhotdraw.framework.FigureEnumeration)var19, (org.jhotdraw.framework.FigureEnumeration)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82.equals("hi!.draw"));

  }

  public void test439() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    boolean var6 = var2.isTopLevelMenu();
    int var7 = var2.getMnemonic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test440() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    java.lang.Boolean var2 = new java.lang.Boolean(false);
    var0.setEnabled(var2);
    org.jhotdraw.util.CommandChoice var4 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var5 = var4.getAction();
    var4.updateUI();
    var0.removeItemListener((java.awt.event.ItemListener)var4);
    int var8 = (-1);
    var4.setSelectedIndex(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);

  }

  public void test441() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication(var0);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var2 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var2.start();
    java.awt.Color var4 = var2.getForeground();
    org.jhotdraw.standard.SelectAreaTracker var5 = new org.jhotdraw.standard.SelectAreaTracker((org.jhotdraw.framework.DrawingEditor)var1, var4);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var6 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var6.start();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    int var16 = (-1);
    int var17 = 0;
    org.jhotdraw.standard.StandardDrawingView var18 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var16, var17);
    java.awt.Component var19 = var8.add((java.awt.Component)var18);
    boolean var20 = var18.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var22 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var23 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var21, (org.jhotdraw.framework.FigureChangeListener)var22);
    java.awt.Dimension var24 = var21.size();
    var18.removeFromSelection((org.jhotdraw.framework.Figure)var21);
    var21.layout();
    java.lang.Object var27 = var21.clone();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    int var40 = (-1);
    int var41 = 0;
    org.jhotdraw.standard.StandardDrawingView var42 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var36, var40, var41);
    java.awt.Component var43 = var32.add((java.awt.Component)var42);
    boolean var44 = var42.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var45 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var47 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var45, (org.jhotdraw.framework.FigureChangeListener)var46);
    java.awt.Dimension var48 = var45.size();
    var42.removeFromSelection((org.jhotdraw.framework.Figure)var45);
    var45.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var51 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var28, (org.jhotdraw.framework.Figure)var45);
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.framework.Figure var54 = var45.findFigureInside(var52, var53);
    org.jhotdraw.contrib.MDI_DrawApplication var55 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var56 = var55.isDoubleBuffered();
    javax.swing.JRootPane var57 = var55.getRootPane();
    javax.swing.JLayeredPane var58 = var55.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var59 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var60 = var59.isDoubleBuffered();
    javax.swing.JRootPane var61 = var59.getRootPane();
    javax.swing.JLayeredPane var62 = var59.getLayeredPane();
    int var63 = (-1);
    int var64 = 0;
    org.jhotdraw.standard.StandardDrawingView var65 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var59, var63, var64);
    java.awt.Component var66 = var55.add((java.awt.Component)var65);
    boolean var67 = var65.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var68 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var69 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var70 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var68, (org.jhotdraw.framework.FigureChangeListener)var69);
    java.awt.Dimension var71 = var68.size();
    var65.removeFromSelection((org.jhotdraw.framework.Figure)var68);
    var68.layout();
    java.lang.Object var74 = var68.clone();
    int var75 = 1;
    int var76 = 1;
    org.jhotdraw.contrib.PolygonFigure var77 = new org.jhotdraw.contrib.PolygonFigure(var75, var76);
    org.jhotdraw.framework.FigureEnumeration var78 = var77.figures();
    java.awt.Rectangle var79 = var77.displayBox();
    org.jhotdraw.framework.Figure var80 = var45.replace((org.jhotdraw.framework.Figure)var68, (org.jhotdraw.framework.Figure)var77);
    var21.bringToFront((org.jhotdraw.framework.Figure)var68);
    org.jhotdraw.contrib.NestedCreationTool var82 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var6, (org.jhotdraw.framework.Figure)var21);
    java.lang.String var83 = "";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setTool((org.jhotdraw.framework.Tool)var82, var83);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test442() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    java.awt.FocusTraversalPolicy var3 = var0.getFocusTraversalPolicy();
    org.jhotdraw.util.UndoManager var4 = var0.getUndoManager();
    boolean var5 = var0.isActive();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    boolean var8 = var6.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var9 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var10 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var9, (org.jhotdraw.framework.FigureChangeListener)var10);
    int var12 = var10.getZValue();
    java.lang.Object var13 = var10.clone();
    org.jhotdraw.standard.CreationTool var14 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var6, (org.jhotdraw.framework.Figure)var10);
    java.lang.String var15 = "hi!";
    java.lang.String var16 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    java.awt.Graphics var21 = var17.getGraphics();
    java.lang.Boolean var22 = new java.lang.Boolean(true);
    var17.setLocationByPlatform(var22);
    org.jhotdraw.standard.StandardDrawing var24 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    java.lang.Double var29 = new java.lang.Double((-1.0d));
    java.lang.Double var30 = new java.lang.Double(100.0d);
    java.lang.Double var31 = new java.lang.Double(1.0d);
    java.awt.Point var32 = org.jhotdraw.util.Geom.polarToPoint(var29, var30, var31);
    org.jhotdraw.contrib.DiamondFigure var33 = new org.jhotdraw.contrib.DiamondFigure(var28, var32);
    org.jhotdraw.framework.HandleEnumeration var34 = var33.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var37 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var35, (org.jhotdraw.framework.FigureChangeListener)var36);
    org.jhotdraw.framework.Figure var38 = var24.replace((org.jhotdraw.framework.Figure)var33, (org.jhotdraw.framework.Figure)var35);
    org.jhotdraw.framework.Handle var39 = org.jhotdraw.standard.BoxHandleKit.north(var38);
    org.jhotdraw.standard.HandleTracker var40 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var17, var39);
    org.jhotdraw.standard.ToolButton var41 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var6, var15, var16, (org.jhotdraw.framework.Tool)var40);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    javax.swing.JLayeredPane var49 = var46.getLayeredPane();
    int var50 = (-1);
    int var51 = 0;
    org.jhotdraw.standard.StandardDrawingView var52 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var46, var50, var51);
    java.awt.Component var53 = var42.add((java.awt.Component)var52);
    boolean var54 = var52.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var56 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var57 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var55, (org.jhotdraw.framework.FigureChangeListener)var56);
    java.awt.Dimension var58 = var55.size();
    var52.removeFromSelection((org.jhotdraw.framework.Figure)var55);
    var55.layout();
    java.lang.Object var61 = var55.clone();
    org.jhotdraw.framework.FigureChangeEvent var62 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var55);
    var41.toolDisabled((java.util.EventObject)var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.paletteUserSelected((org.jhotdraw.util.PaletteButton)var41);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test443() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    int var1 = 1;
    int var2 = (-1);
    var0.moveBy(var1, var2);
    boolean var4 = var0.acceptsTyping();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test444() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    var0.lock();
    long var3 = var0.getLastTimeAccessed();
    var0.resetDelay();
    long var5 = var0.getLastTimeAccessed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1261293209700L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1261293209700L);

  }

  public void test445() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    int var13 = 0;
    var3.setLayer((java.awt.Component)var11, var13);
    java.awt.event.HierarchyListener[] var15 = var11.getHierarchyListeners();
    java.lang.String[] var16 = var11.getRequiredVersions();
    java.lang.String var17 = "";
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.showStatus(var17);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test446() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var14 = var10.getDragSourceListener();
    org.jhotdraw.figures.NumberTextFigure var15 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var16 = var15.getText();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.equals(""));

  }

  public void test447() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    boolean var3 = var0.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test448() throws Throwable {

    org.jhotdraw.contrib.TriangleFigure var0 = new org.jhotdraw.contrib.TriangleFigure();
    org.jhotdraw.framework.HandleEnumeration var1 = var0.handles();
    java.awt.Point var2 = var0.center();

  }

  public void test449() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    int var4 = (-1);
    int var5 = 10;
    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var6 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    java.awt.Insets var7 = var6.connectionInsets();
    org.jhotdraw.framework.HandleEnumeration var8 = var6.handles();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.String var12 = var11.getName();
    java.lang.String var13 = "";
    int var14 = 100;
    var11.insert(var13, var14);
    int var16 = 100;
    int var17 = 0;
    int var18 = 0;
    int var19 = 10;
    var11.reshape(var16, var17, var18, var19);
    org.jhotdraw.standard.StandardDrawing var21 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    org.jhotdraw.framework.Figure var35 = var21.replace((org.jhotdraw.framework.Figure)var30, (org.jhotdraw.framework.Figure)var32);
    org.jhotdraw.framework.Handle var36 = org.jhotdraw.standard.BoxHandleKit.north(var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var45 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var43.removeForeground((org.jhotdraw.framework.Painter)var45);
    org.jhotdraw.util.UndoableHandle var47 = new org.jhotdraw.util.UndoableHandle(var36, (org.jhotdraw.framework.DrawingView)var43);
    org.jhotdraw.util.Undoable var48 = var47.getUndoActivity();
    java.awt.Rectangle var49 = var47.displayBox();
    var11.computeVisibleRect(var49);
    java.lang.Double var51 = new java.lang.Double(10.0d);
    java.awt.Point var52 = org.jhotdraw.util.Geom.angleToPoint(var49, var51);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    java.lang.Double var54 = new java.lang.Double(100.0d);
    java.lang.Double var55 = new java.lang.Double(1.0d);
    java.awt.Point var56 = org.jhotdraw.util.Geom.polarToPoint(var53, var54, var55);
    var6.basicDisplayBox(var52, var56);
    org.jhotdraw.framework.Figure var58 = var2.findFigureWithout(var4, var5, (org.jhotdraw.framework.Figure)var6);
    org.jhotdraw.contrib.MDI_DrawApplication var59 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var60 = var59.isDoubleBuffered();
    javax.swing.JRootPane var61 = var59.getRootPane();
    javax.swing.JLayeredPane var62 = var59.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    java.lang.String var66 = var65.getUIClassID();
    java.awt.Insets var67 = var65.getInsets();
    int var68 = (-1);
    var62.setPosition((java.awt.Component)var65, var68);
    org.jhotdraw.contrib.MDI_DrawApplication var70 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var71 = var70.isDoubleBuffered();
    int var72 = 0;
    var62.setLayer((java.awt.Component)var70, var72);
    java.awt.event.HierarchyListener[] var74 = var70.getHierarchyListeners();
    java.lang.String[] var75 = var70.getRequiredVersions();
    java.awt.Window[] var76 = var70.getOwnedWindows();
    int var77 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var78 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var77);
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var80 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var81 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var79, (org.jhotdraw.framework.FigureChangeListener)var80);
    boolean var82 = var78.remove((java.lang.Object)var79);
    org.jhotdraw.contrib.MDI_DrawApplication var83 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var84 = var83.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var85 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var83);
    boolean var86 = var83.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var87 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var83);
    var87.deactivate();
    int var89 = var78.indexOf((java.lang.Object)var87);
    var70.setIconImages((java.util.List)var78);
    var2.orphanAll((java.util.List)var78);
    org.jhotdraw.standard.FigureEnumerator var92 = new org.jhotdraw.standard.FigureEnumerator((java.util.Collection)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));

  }

  public void test450() throws Throwable {

    java.lang.String var0 = "";
    java.lang.String var1 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    javax.swing.JRootPane var4 = var2.getRootPane();
    javax.swing.JLayeredPane var5 = var2.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    int var14 = (-1);
    int var15 = 0;
    org.jhotdraw.standard.StandardDrawingView var16 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var14, var15);
    java.awt.Component var17 = var6.add((java.awt.Component)var16);
    boolean var18 = var16.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var21 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var19, (org.jhotdraw.framework.FigureChangeListener)var20);
    java.awt.Dimension var22 = var19.size();
    var16.removeFromSelection((org.jhotdraw.framework.Figure)var19);
    var19.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var25 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var2, (org.jhotdraw.framework.Figure)var19);
    var2.nextFocus();
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    java.awt.Component var31 = var2.getComponentAt(var30);
    java.lang.Boolean var32 = new java.lang.Boolean(false);
    var2.setFocusTraversalPolicyProvider(var32);
    int var34 = 10;
    var2.setCursor(var34);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var36 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var36.start();
    java.awt.Color var38 = var36.getForeground();
    var36.endAnimation();
    java.awt.Dimension var40 = var36.getMaximumSize();
    var2.resize(var40);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JMenu var44 = var42.createLookAndFeelMenu();
    var42.open();
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    javax.swing.JLayeredPane var49 = var46.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    java.awt.Component var57 = var46.add((java.awt.Component)var56);
    boolean var58 = var56.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var59 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var60 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var61 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var59, (org.jhotdraw.framework.FigureChangeListener)var60);
    java.awt.Dimension var62 = var59.size();
    var56.removeFromSelection((org.jhotdraw.framework.Figure)var59);
    org.jhotdraw.contrib.MDI_DrawApplication var64 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var65 = var64.isDoubleBuffered();
    javax.swing.JRootPane var66 = var64.getRootPane();
    javax.swing.JLayeredPane var67 = var64.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var68 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var69 = var68.isDoubleBuffered();
    javax.swing.JRootPane var70 = var68.getRootPane();
    javax.swing.JLayeredPane var71 = var68.getLayeredPane();
    int var72 = (-1);
    int var73 = 0;
    org.jhotdraw.standard.StandardDrawingView var74 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var68, var72, var73);
    java.awt.Component var75 = var64.add((java.awt.Component)var74);
    var56.setEditor((org.jhotdraw.framework.DrawingEditor)var64);
    org.jhotdraw.contrib.MDI_DrawApplication var77 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var78 = var77.isDoubleBuffered();
    javax.swing.JRootPane var79 = var77.getRootPane();
    javax.swing.JLayeredPane var80 = var77.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var81 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var82 = var81.isDoubleBuffered();
    javax.swing.JRootPane var83 = var81.getRootPane();
    java.lang.String var84 = var83.getUIClassID();
    java.awt.Insets var85 = var83.getInsets();
    int var86 = (-1);
    var80.setPosition((java.awt.Component)var83, var86);
    boolean var88 = var80.isDisplayable();
    boolean var89 = var56.isFocusCycleRoot((java.awt.Container)var80);
    var42.setLayeredPane(var80);
    javax.swing.JLayeredPane var91 = javax.swing.JLayeredPane.getLayeredPaneAbove((java.awt.Component)var80);
    var2.setLayeredPane(var80);
    org.jhotdraw.figures.InsertImageCommand var93 = new org.jhotdraw.figures.InsertImageCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == null);

  }

  public void test451() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawViewer var0 = new org.jhotdraw.samples.javadraw.JavaDrawViewer();

  }

  public void test452() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    boolean var19 = var18.isEnabled();
    var18.activate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test453() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    int var13 = 0;
    int var14 = 10;
    int var15 = var2.findSegment(var13, var14);
    java.awt.Point var16 = var2.center();
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JMenu var19 = var17.createLookAndFeelMenu();
    java.lang.String var20 = var19.getName();
    java.lang.String var21 = "";
    int var22 = 100;
    var19.insert(var21, var22);
    int var24 = 100;
    int var25 = 0;
    int var26 = 0;
    int var27 = 10;
    var19.reshape(var24, var25, var26, var27);
    org.jhotdraw.standard.StandardDrawing var29 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var30 = new java.lang.Double((-1.0d));
    java.lang.Double var31 = new java.lang.Double(100.0d);
    java.lang.Double var32 = new java.lang.Double(1.0d);
    java.awt.Point var33 = org.jhotdraw.util.Geom.polarToPoint(var30, var31, var32);
    java.lang.Double var34 = new java.lang.Double((-1.0d));
    java.lang.Double var35 = new java.lang.Double(100.0d);
    java.lang.Double var36 = new java.lang.Double(1.0d);
    java.awt.Point var37 = org.jhotdraw.util.Geom.polarToPoint(var34, var35, var36);
    org.jhotdraw.contrib.DiamondFigure var38 = new org.jhotdraw.contrib.DiamondFigure(var33, var37);
    org.jhotdraw.framework.HandleEnumeration var39 = var38.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var42 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var40, (org.jhotdraw.framework.FigureChangeListener)var41);
    org.jhotdraw.framework.Figure var43 = var29.replace((org.jhotdraw.framework.Figure)var38, (org.jhotdraw.framework.Figure)var40);
    org.jhotdraw.framework.Handle var44 = org.jhotdraw.standard.BoxHandleKit.north(var43);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    var51.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var53 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var51.removeForeground((org.jhotdraw.framework.Painter)var53);
    org.jhotdraw.util.UndoableHandle var55 = new org.jhotdraw.util.UndoableHandle(var44, (org.jhotdraw.framework.DrawingView)var51);
    org.jhotdraw.util.Undoable var56 = var55.getUndoActivity();
    java.awt.Rectangle var57 = var55.displayBox();
    var19.computeVisibleRect(var57);
    java.lang.Double var59 = new java.lang.Double(10.0d);
    java.awt.Point var60 = org.jhotdraw.util.Geom.angleToPoint(var57, var59);
    java.awt.Point var61 = var2.chop(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test454() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.framework.Figure var26 = var17.findFigureInside(var24, var25);
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    int var28 = 1;
    int var29 = 1;
    org.jhotdraw.contrib.PolygonFigure var30 = new org.jhotdraw.contrib.PolygonFigure(var28, var29);
    org.jhotdraw.framework.FigureEnumeration var31 = var30.figures();
    java.awt.Rectangle var32 = var30.displayBox();
    int var33 = 1;
    int var34 = 1;
    org.jhotdraw.contrib.PolygonFigure var35 = new org.jhotdraw.contrib.PolygonFigure(var33, var34);
    org.jhotdraw.framework.FigureEnumeration var36 = var35.figures();
    java.awt.Rectangle var37 = var35.displayBox();
    org.jhotdraw.framework.Figure var38 = var27.findFigure(var32, (org.jhotdraw.framework.Figure)var35);
    int var39 = 100;
    int var40 = (-1);
    java.lang.Double var41 = new java.lang.Double((-1.0d));
    java.lang.Double var42 = new java.lang.Double(100.0d);
    java.lang.Double var43 = new java.lang.Double(1.0d);
    java.awt.Point var44 = org.jhotdraw.util.Geom.polarToPoint(var41, var42, var43);
    java.lang.Double var45 = new java.lang.Double((-1.0d));
    java.lang.Double var46 = new java.lang.Double(100.0d);
    java.lang.Double var47 = new java.lang.Double(1.0d);
    java.awt.Point var48 = org.jhotdraw.util.Geom.polarToPoint(var45, var46, var47);
    org.jhotdraw.contrib.DiamondFigure var49 = new org.jhotdraw.contrib.DiamondFigure(var44, var48);
    org.jhotdraw.framework.Figure var50 = var27.findFigureInsideWithout(var39, var40, (org.jhotdraw.framework.Figure)var49);
    int var51 = var17.getLayer((org.jhotdraw.framework.Figure)var49);
    int var52 = var17.figureCount();
    var17.release();
    org.jhotdraw.framework.HandleEnumeration var54 = var17.handles();
    java.awt.Rectangle var55 = var17.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);

  }

  public void test455() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    var0.toFront();
    var0.repaint();
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test456() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    int var49 = 0;
    int var50 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var51 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var52 = var51.isDoubleBuffered();
    javax.swing.JRootPane var53 = var51.getRootPane();
    javax.swing.JLayeredPane var54 = var51.getLayeredPane();
    int var55 = (-1);
    int var56 = 0;
    org.jhotdraw.standard.StandardDrawingView var57 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var51, var55, var56);
    var57.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var59 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var57.removeForeground((org.jhotdraw.framework.Painter)var59);
    int var61 = 100;
    int var62 = 100;
    org.jhotdraw.standard.GridConstrainer var63 = new org.jhotdraw.standard.GridConstrainer(var61, var62);
    var57.setConstrainer((org.jhotdraw.framework.PointConstrainer)var63);
    java.lang.Long var65 = new java.lang.Long(1L);
    int var66 = 10;
    int var67 = 1;
    int var68 = 10;
    int var69 = 0;
    var57.repaint(var65, var66, var67, var68, var69);
    var17.invokeStart(var49, var50, (org.jhotdraw.framework.DrawingView)var57);
    org.jhotdraw.contrib.MDI_DrawApplication var72 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var73 = var72.isDoubleBuffered();
    javax.swing.JRootPane var74 = var72.getRootPane();
    javax.swing.JLayeredPane var75 = var72.getLayeredPane();
    int var76 = (-1);
    int var77 = 0;
    org.jhotdraw.standard.StandardDrawingView var78 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var72, var76, var77);
    var78.clearSelection();
    org.jhotdraw.util.UndoableAdapter var80 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var78);
    boolean var81 = var80.undo();
    org.jhotdraw.framework.FigureEnumeration var82 = var80.getAffectedFigures();
    var17.setUndoActivity((org.jhotdraw.util.Undoable)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test457() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    java.awt.Component var46 = var35.add((java.awt.Component)var45);
    boolean var47 = var45.getInheritsPopupMenu();
    boolean var48 = var45.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var49 = var45.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var53 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var52);
    var50.addDependendFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.framework.Handle var55 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var52);
    var45.removeFromSelection((org.jhotdraw.framework.Figure)var52);
    var25.removeItem((java.lang.Object)var52);
    java.lang.Boolean var58 = new java.lang.Boolean(true);
    var25.setFocusTraversalKeysEnabled(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test458() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    java.util.List var18 = var0.getIconImages();
    org.jhotdraw.standard.HandleEnumerator var19 = new org.jhotdraw.standard.HandleEnumerator((java.util.Collection)var18);
    boolean var20 = var19.hasNextHandle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Handle var21 = var19.nextHandle();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test459() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    java.lang.String var15 = var0.getTitle();
    java.awt.Rectangle var16 = var0.displayBox();
    org.jhotdraw.framework.FigureEnumeration var17 = var0.figures();
    boolean var18 = var17.hasNextFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test460() throws Throwable {

    org.jhotdraw.contrib.CustomToolBar var0 = new org.jhotdraw.contrib.CustomToolBar();
    int var1 = 100;
    java.awt.Component var2 = var0.getComponentAtIndex(var1);
    var0.updateUI();
    javax.swing.plaf.ToolBarUI var4 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test461() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    javax.swing.JInternalFrame var10 = var9.getSelectedFrame();
    var9.tileFramesVertically();
    java.lang.String var12 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    javax.swing.JLayeredPane var16 = var13.getLayeredPane();
    int var17 = (-1);
    int var18 = 0;
    org.jhotdraw.standard.StandardDrawingView var19 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var13, var17, var18);
    int var20 = 0;
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var13, var20, var21);
    org.jhotdraw.util.RedoCommand var23 = new org.jhotdraw.util.RedoCommand(var12, (org.jhotdraw.framework.DrawingEditor)var13);
    int var24 = 10;
    int var25 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var26 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var13, var24, var25);
    java.awt.Dimension var27 = var26.getUserSize();
    var9.setNextFocusableComponent((java.awt.Component)var26);
    java.lang.Double var29 = new java.lang.Double(100.0d);
    var26.setZoomSpeed(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test462() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    var0.toFront();
    var0.repaint();
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    var6.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test463() throws Throwable {

    org.jhotdraw.contrib.html.ETSLADisposalStrategy var0 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    org.jhotdraw.contrib.html.StandardDisposableResourceManager var1 = new org.jhotdraw.contrib.html.StandardDisposableResourceManager((org.jhotdraw.contrib.html.ResourceDisposabilityStrategy)var0);
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    var4.basicDisplayBox(var9, var13);
    java.lang.String var15 = "";
    java.lang.Character var16 = new java.lang.Character(' ');
    org.jhotdraw.contrib.html.DisposableResourceHolder var17 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var16);
    var4.setAttribute(var15, (java.lang.Object)var17);
    var1.unregisterResource(var17);
    org.jhotdraw.contrib.html.ETSLADisposalStrategy var20 = new org.jhotdraw.contrib.html.ETSLADisposalStrategy();
    java.lang.Long var21 = new java.lang.Long(100L);
    var20.stopDisposing(var21);
    var1.setStrategy((org.jhotdraw.contrib.html.ResourceDisposabilityStrategy)var20);
    long var24 = var20.getPeriodicity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 60000L);

  }

  public void test464() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    int var4 = var0.pointCount();
    org.jhotdraw.contrib.PolygonFigure var5 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var6 = org.jhotdraw.standard.RelativeLocator.center();
    int var7 = 0;
    org.jhotdraw.contrib.PolygonHandle var8 = new org.jhotdraw.contrib.PolygonHandle(var5, var6, var7);
    int var9 = (-1);
    org.jhotdraw.contrib.PolygonHandle var10 = new org.jhotdraw.contrib.PolygonHandle(var0, var6, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test465() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.lang.Double var20 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var21 = new org.jhotdraw.standard.RelativeLocator(var19, var20);
    int var22 = (-1);
    org.jhotdraw.figures.PolyLineHandle var23 = new org.jhotdraw.figures.PolyLineHandle(var17, (org.jhotdraw.framework.Locator)var21, var22);
    int var24 = 1;
    int var25 = 1;
    int var26 = 0;
    int var27 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    boolean var41 = var38.requestDefaultFocus();
    java.lang.String var42 = "hi!";
    java.lang.Character var43 = new java.lang.Character(' ');
    java.lang.Character var44 = new java.lang.Character(' ');
    var38.firePropertyChange(var42, var43, var44);
    boolean var46 = var38.isReadOnly();
    org.jhotdraw.contrib.ClippingUpdateStrategy var47 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var38.removeBackground((org.jhotdraw.framework.Painter)var47);
    var23.invokeEnd(var24, var25, var26, var27, (org.jhotdraw.framework.DrawingView)var38);
    java.awt.Point var50 = var23.locate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test466() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var14 = var10.getDragSourceListener();
    org.jhotdraw.figures.NumberTextFigure var15 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var16 = var15.getText();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    java.awt.Dimension var21 = var18.size();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.figures.EllipseFigure var30 = new org.jhotdraw.figures.EllipseFigure(var25, var29);
    java.awt.Rectangle var31 = var30.displayBox();
    org.jhotdraw.standard.StandardDrawing var32 = new org.jhotdraw.standard.StandardDrawing();
    int var33 = 1;
    int var34 = 1;
    org.jhotdraw.contrib.PolygonFigure var35 = new org.jhotdraw.contrib.PolygonFigure(var33, var34);
    org.jhotdraw.framework.FigureEnumeration var36 = var35.figures();
    java.awt.Rectangle var37 = var35.displayBox();
    int var38 = 1;
    int var39 = 1;
    org.jhotdraw.contrib.PolygonFigure var40 = new org.jhotdraw.contrib.PolygonFigure(var38, var39);
    org.jhotdraw.framework.FigureEnumeration var41 = var40.figures();
    java.awt.Rectangle var42 = var40.displayBox();
    org.jhotdraw.framework.Figure var43 = var32.findFigure(var37, (org.jhotdraw.framework.Figure)var40);
    int var44 = 100;
    int var45 = (-1);
    java.lang.Double var46 = new java.lang.Double((-1.0d));
    java.lang.Double var47 = new java.lang.Double(100.0d);
    java.lang.Double var48 = new java.lang.Double(1.0d);
    java.awt.Point var49 = org.jhotdraw.util.Geom.polarToPoint(var46, var47, var48);
    java.lang.Double var50 = new java.lang.Double((-1.0d));
    java.lang.Double var51 = new java.lang.Double(100.0d);
    java.lang.Double var52 = new java.lang.Double(1.0d);
    java.awt.Point var53 = org.jhotdraw.util.Geom.polarToPoint(var50, var51, var52);
    org.jhotdraw.contrib.DiamondFigure var54 = new org.jhotdraw.contrib.DiamondFigure(var49, var53);
    org.jhotdraw.framework.Figure var55 = var32.findFigureInsideWithout(var44, var45, (org.jhotdraw.framework.Figure)var54);
    java.util.Iterator var56 = var32.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var61 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var62 = var61.isDoubleBuffered();
    javax.swing.JRootPane var63 = var61.getRootPane();
    javax.swing.JLayeredPane var64 = var61.getLayeredPane();
    int var65 = (-1);
    int var66 = 0;
    org.jhotdraw.standard.StandardDrawingView var67 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var61, var65, var66);
    java.awt.Component var68 = var57.add((java.awt.Component)var67);
    boolean var69 = var67.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    java.awt.Dimension var73 = var70.size();
    var67.removeFromSelection((org.jhotdraw.framework.Figure)var70);
    var70.layout();
    java.lang.Object var76 = var70.clone();
    org.jhotdraw.framework.FigureChangeEvent var77 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var70);
    var32.figureRequestUpdate(var77);
    org.jhotdraw.framework.FigureChangeEvent var79 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var18, var31, var77);
    var15.figureInvalidated(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test467() throws Throwable {

    org.jhotdraw.figures.LineConnection var0 = new org.jhotdraw.figures.LineConnection();
    java.lang.String var1 = "hi!";
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    org.jhotdraw.framework.Handle var7 = org.jhotdraw.standard.BoxHandleKit.east((org.jhotdraw.framework.Figure)var4);
    var4.changed();
    int var9 = 100;
    int var10 = 1;
    org.jhotdraw.framework.Connector var11 = var4.connectorAt(var9, var10);
    var0.setAttribute(var1, (java.lang.Object)var10);

  }

  public void test468() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    javax.swing.JInternalFrame var10 = var9.getSelectedFrame();
    var9.tileFrames();
    var9.tileFramesHorizontally();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);

  }

  public void test469() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var7 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var8 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var6, (org.jhotdraw.framework.FigureChangeListener)var7);
    int var9 = var7.getZValue();
    java.lang.Object var10 = var7.clone();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var7);
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    var2.displayBox(var15, var24);
    org.jhotdraw.contrib.TextAreaFigure var26 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var27 = "";
    var26.setText(var27);
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var30 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.standard.StandardDrawing var31 = new org.jhotdraw.standard.StandardDrawing();
    int var32 = var29.getLayer((org.jhotdraw.framework.Figure)var31);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    java.awt.Component var44 = var33.add((java.awt.Component)var43);
    boolean var45 = var43.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var48 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var46, (org.jhotdraw.framework.FigureChangeListener)var47);
    java.awt.Dimension var49 = var46.size();
    var43.removeFromSelection((org.jhotdraw.framework.Figure)var46);
    var46.layout();
    java.lang.Object var52 = var46.clone();
    org.jhotdraw.framework.FigureChangeEvent var53 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var46);
    java.lang.Object var54 = var53.getSource();
    var31.figureInvalidated(var53);
    var26.figureChanged(var53);
    var2.figureRequestRemove(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test470() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    var0.removeItemListener((java.awt.event.ItemListener)var25);
    int var35 = var0.getMaximumRowCount();
    java.lang.Boolean var36 = new java.lang.Boolean(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setPopupVisible(var36);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 8);

  }

  public void test471() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var3 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var1);
    boolean var4 = var1.isCursorSet();
    org.jhotdraw.standard.SendToBackCommand var5 = new org.jhotdraw.standard.SendToBackCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    java.lang.String var6 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var7 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var7.start();
    org.jhotdraw.standard.CopyCommand var9 = new org.jhotdraw.standard.CopyCommand(var6, (org.jhotdraw.framework.DrawingEditor)var7);
    var9.dispose();
    java.lang.String var11 = "";
    org.jhotdraw.util.CommandMenu var12 = new org.jhotdraw.util.CommandMenu(var11);
    var9.addCommandListener((org.jhotdraw.util.CommandListener)var12);
    javax.swing.InputMap var14 = var12.getInputMap();
    var5.addCommandListener((org.jhotdraw.util.CommandListener)var12);
    java.lang.String var16 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    org.jhotdraw.framework.DrawingView var20 = org.jhotdraw.standard.NullDrawingView.getManagedDrawingView((org.jhotdraw.framework.DrawingEditor)var17);
    org.jhotdraw.standard.StandardDrawing var21 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    org.jhotdraw.framework.Figure var35 = var21.replace((org.jhotdraw.framework.Figure)var30, (org.jhotdraw.framework.Figure)var32);
    org.jhotdraw.framework.Handle var36 = org.jhotdraw.standard.BoxHandleKit.north(var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var45 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var43.removeForeground((org.jhotdraw.framework.Painter)var45);
    org.jhotdraw.util.UndoableHandle var47 = new org.jhotdraw.util.UndoableHandle(var36, (org.jhotdraw.framework.DrawingView)var43);
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.standard.StandardDrawingView var54 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var48, var52, var53);
    org.jhotdraw.contrib.MDI_DrawApplication var55 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var56 = var55.isDoubleBuffered();
    javax.swing.JRootPane var57 = var55.getRootPane();
    javax.swing.JLayeredPane var58 = var55.getLayeredPane();
    int var59 = (-1);
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var55, var59, var60);
    var61.clearSelection();
    java.awt.Color var63 = var61.getForeground();
    var54.setBackground(var63);
    org.jhotdraw.framework.FigureEnumeration var65 = var54.selectionZOrdered();
    var65.reset();
    var43.addToSelectionAll(var65);
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.awt.Point var72 = var43.getLocation(var71);
    var43.disable();
    var17.setLocationRelativeTo((java.awt.Component)var43);
    org.jhotdraw.util.StorageFormatManager var75 = var17.getStorageFormatManager();
    org.jhotdraw.standard.BringToFrontCommand var76 = new org.jhotdraw.standard.BringToFrontCommand(var16, (org.jhotdraw.framework.DrawingEditor)var17);
    var12.add((org.jhotdraw.util.Command)var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == null);

  }

  public void test472() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    org.jhotdraw.framework.Figure var3 = var0.getRepresentingFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);

  }

  public void test473() throws Throwable {

    org.jhotdraw.framework.Locator var0 = org.jhotdraw.standard.RelativeLocator.northEast();
    org.jhotdraw.standard.OffsetLocator var1 = new org.jhotdraw.standard.OffsetLocator(var0);

  }

  public void test474() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.standard.StandardDrawingView var27 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var21, var25, var26);
    java.awt.Component var28 = var17.add((java.awt.Component)var27);
    boolean var29 = var27.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var32 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var30, (org.jhotdraw.framework.FigureChangeListener)var31);
    java.awt.Dimension var33 = var30.size();
    var27.removeFromSelection((org.jhotdraw.framework.Figure)var30);
    var16.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var27);
    org.jhotdraw.contrib.CommandMenuItem var36 = new org.jhotdraw.contrib.CommandMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var37 = "hi!";
    java.lang.Float var38 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    java.awt.Container var41 = var39.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var42 = new org.jhotdraw.contrib.zoom.ZoomCommand(var37, var38, (org.jhotdraw.framework.DrawingEditor)var39);
    float var43 = var42.getScale();
    var36.setCommand((org.jhotdraw.util.Command)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0f);

  }

  public void test475() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    org.jhotdraw.contrib.ChopPolygonConnector var27 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var2);
    java.awt.Rectangle var28 = var2.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test476() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    java.awt.Color var14 = var12.getForeground();
    var0.setFillColor(var14);
    java.awt.Rectangle var16 = var0.displayBox();
    int var17 = 1;
    int var18 = (-1);
    int var19 = (-1);
    int var20 = 10;
    java.awt.Polygon var21 = var0.outline(var17, var18, var19, var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test477() throws Throwable {

    org.jhotdraw.figures.LineConnection var0 = new org.jhotdraw.figures.LineConnection();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var2 = new java.lang.Double((-1.0d));
    java.lang.Double var3 = new java.lang.Double(100.0d);
    java.lang.Double var4 = new java.lang.Double(1.0d);
    java.awt.Point var5 = org.jhotdraw.util.Geom.polarToPoint(var2, var3, var4);
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    org.jhotdraw.contrib.DiamondFigure var10 = new org.jhotdraw.contrib.DiamondFigure(var5, var9);
    org.jhotdraw.framework.HandleEnumeration var11 = var10.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    org.jhotdraw.framework.Figure var15 = var1.replace((org.jhotdraw.framework.Figure)var10, (org.jhotdraw.framework.Figure)var12);
    java.util.Iterator var16 = var1.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var1.addToContainer((org.jhotdraw.framework.FigureChangeListener)var17);
    org.jhotdraw.figures.NullConnector var22 = new org.jhotdraw.figures.NullConnector((org.jhotdraw.framework.Figure)var17);
    var0.connectEnd((org.jhotdraw.framework.Connector)var22);

  }

  public void test478() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    var0.toFront();
    float var5 = var0.getAlignmentX();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.print();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);

  }

  public void test479() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    org.jhotdraw.framework.Tool var89 = var35.tool();
    int var90 = (-1);
    var35.setIconTextGap(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test480() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    org.jhotdraw.contrib.ChopPolygonConnector var27 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var2);
    java.awt.Rectangle var28 = var2.displayBox();
    int var29 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var30 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var29);
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    boolean var34 = var30.remove((java.lang.Object)var31);
    org.jhotdraw.util.collections.jdk11.ListWrapper var35 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var30);
    var2.orphanAll((java.util.List)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test481() throws Throwable {

    java.lang.Double var0 = new java.lang.Double(0.0d);
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    org.jhotdraw.figures.ArrowTip var3 = new org.jhotdraw.figures.ArrowTip(var0, var1, var2);

  }

  public void test482() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    javax.swing.Icon var8 = var7.getRolloverIcon();
    java.lang.String var9 = "hi!";
    var7.setText(var9);
    boolean var11 = var7.isLightweight();
    boolean var12 = var7.isPopupMenuVisible();
    javax.swing.plaf.ButtonUI var13 = var7.getUI();
    var2.setUI(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test483() throws Throwable {

    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    org.jhotdraw.framework.HandleEnumeration var1 = var0.handles();
    org.jhotdraw.framework.HandleEnumeration var2 = var0.handles();

  }

  public void test484() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.contrib.DiamondFigure var8 = new org.jhotdraw.contrib.DiamondFigure(var3, var7);
    org.jhotdraw.framework.HandleEnumeration var9 = var8.handles();
    java.awt.Rectangle var10 = var8.displayBox();

  }

  public void test485() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    var0.toFront();
    float var5 = var0.getAlignmentX();
    java.awt.Point var6 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);

  }

  public void test486() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.lang.Double var20 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var21 = new org.jhotdraw.standard.RelativeLocator(var19, var20);
    int var22 = (-1);
    org.jhotdraw.figures.PolyLineHandle var23 = new org.jhotdraw.figures.PolyLineHandle(var17, (org.jhotdraw.framework.Locator)var21, var22);
    int var24 = 1;
    int var25 = 1;
    int var26 = 0;
    int var27 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    boolean var41 = var38.requestDefaultFocus();
    java.lang.String var42 = "hi!";
    java.lang.Character var43 = new java.lang.Character(' ');
    java.lang.Character var44 = new java.lang.Character(' ');
    var38.firePropertyChange(var42, var43, var44);
    boolean var46 = var38.isReadOnly();
    org.jhotdraw.contrib.ClippingUpdateStrategy var47 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var38.removeBackground((org.jhotdraw.framework.Painter)var47);
    var23.invokeEnd(var24, var25, var26, var27, (org.jhotdraw.framework.DrawingView)var38);
    java.awt.Point var50 = var23.locate();
    int var51 = 1;
    int var52 = 1;
    org.jhotdraw.contrib.GraphicalCompositeFigure var53 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var54 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var53);
    org.jhotdraw.standard.StandardDrawing var55 = new org.jhotdraw.standard.StandardDrawing();
    int var56 = var53.getLayer((org.jhotdraw.framework.Figure)var55);
    java.awt.Rectangle var57 = var55.displayBox();
    var23.invokeEnd(var51, var52, (org.jhotdraw.framework.Drawing)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));

  }

  public void test487() throws Throwable {

    org.jhotdraw.util.CollectionsFactory var0 = org.jhotdraw.util.CollectionsFactory.current();

  }

  public void test488() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    var4.deactivate();
    java.lang.Boolean var6 = new java.lang.Boolean(true);
    var4.setEnabled(var6);
    boolean var8 = var4.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test489() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    int var18 = 100;
    int var19 = 100;
    var17.setUserSize(var18, var19);
    java.lang.Object var21 = var17.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test490() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    int var1 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var2 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    boolean var6 = var2.remove((java.lang.Object)var3);
    org.jhotdraw.contrib.StandardLayouter var7 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var3);
    var0.removeItem((java.lang.Object)var3);
    org.jhotdraw.standard.StandardDrawing var9 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    org.jhotdraw.contrib.DiamondFigure var18 = new org.jhotdraw.contrib.DiamondFigure(var13, var17);
    org.jhotdraw.framework.HandleEnumeration var19 = var18.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.framework.Figure var23 = var9.replace((org.jhotdraw.framework.Figure)var18, (org.jhotdraw.framework.Figure)var20);
    var0.removeItem((java.lang.Object)var9);
    org.jhotdraw.util.CommandChoice var25 = new org.jhotdraw.util.CommandChoice();
    int var26 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var27 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var26);
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    boolean var31 = var27.remove((java.lang.Object)var28);
    org.jhotdraw.contrib.StandardLayouter var32 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var28);
    var25.removeItem((java.lang.Object)var28);
    org.jhotdraw.standard.StandardDrawing var34 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var35 = new java.lang.Double((-1.0d));
    java.lang.Double var36 = new java.lang.Double(100.0d);
    java.lang.Double var37 = new java.lang.Double(1.0d);
    java.awt.Point var38 = org.jhotdraw.util.Geom.polarToPoint(var35, var36, var37);
    java.lang.Double var39 = new java.lang.Double((-1.0d));
    java.lang.Double var40 = new java.lang.Double(100.0d);
    java.lang.Double var41 = new java.lang.Double(1.0d);
    java.awt.Point var42 = org.jhotdraw.util.Geom.polarToPoint(var39, var40, var41);
    org.jhotdraw.contrib.DiamondFigure var43 = new org.jhotdraw.contrib.DiamondFigure(var38, var42);
    org.jhotdraw.framework.HandleEnumeration var44 = var43.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var45 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var47 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var45, (org.jhotdraw.framework.FigureChangeListener)var46);
    org.jhotdraw.framework.Figure var48 = var34.replace((org.jhotdraw.framework.Figure)var43, (org.jhotdraw.framework.Figure)var45);
    var25.removeItem((java.lang.Object)var34);
    org.jhotdraw.util.CommandChoice var50 = new org.jhotdraw.util.CommandChoice();
    int var51 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var52 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var51);
    org.jhotdraw.contrib.GraphicalCompositeFigure var53 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var55 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var53, (org.jhotdraw.framework.FigureChangeListener)var54);
    boolean var56 = var52.remove((java.lang.Object)var53);
    org.jhotdraw.contrib.StandardLayouter var57 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var53);
    var50.removeItem((java.lang.Object)var53);
    var25.removeItemListener((java.awt.event.ItemListener)var50);
    int var60 = var25.getMaximumRowCount();
    java.awt.event.ItemListener var61 = java.awt.AWTEventMulticaster.remove((java.awt.event.ItemListener)var0, (java.awt.event.ItemListener)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 8);

  }

  public void test491() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    int var1 = 1;
    int var2 = 100;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var3 = var0.containsPoint(var1, var2);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test492() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var17 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var17.start();
    java.awt.Color var19 = var17.getForeground();
    var17.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    java.lang.String var28 = var27.getUIClassID();
    java.awt.Insets var29 = var27.getInsets();
    int var30 = (-1);
    var24.setPosition((java.awt.Component)var27, var30);
    int var32 = var24.highestLayer();
    var24.disable();
    var17.setLayeredPane(var24);
    var12.remove((java.awt.Component)var17);
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var37 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var36);
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var39 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var38);
    var36.addDependendFigure((org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.framework.Handle var41 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.contrib.CompositeFigureCreationTool var42 = new org.jhotdraw.contrib.CompositeFigureCreationTool((org.jhotdraw.framework.DrawingEditor)var12, (org.jhotdraw.framework.Figure)var38);
    org.jhotdraw.standard.CompositeFigure var43 = var42.getContainerFigure();
    org.jhotdraw.framework.DrawingEditor var44 = var42.editor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-30000));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == null);

  }

  public void test493() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    boolean var7 = var2.isFocusPainted();
    java.awt.event.MouseWheelListener[] var8 = var2.getMouseWheelListeners();
    boolean var9 = var2.isArmed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test494() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    int var89 = 0;
    var35.setHorizontalTextPosition(var89);
    javax.accessibility.AccessibleContext var91 = var35.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test495() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    int var36 = var35.getVerticalAlignment();
    java.lang.Long var37 = new java.lang.Long(10L);
    int var38 = 10;
    int var39 = (-1);
    int var40 = 100;
    int var41 = 100;
    var35.repaint(var37, var38, var39, var40, var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test496() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    var0.remove((java.awt.Component)var6);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var8 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var8.start();
    java.awt.Color var10 = var8.getForeground();
    int var11 = 0;
    int var12 = 1;
    var6.setLayer((java.awt.Component)var8, var11, var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test497() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var1 = var0.handles();
    java.lang.String var2 = "hi!";
    java.lang.Object var3 = var0.getAttribute(var2);
    java.lang.Double var4 = new java.lang.Double(1.0d);
    java.lang.Double var5 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var6 = new org.jhotdraw.standard.RelativeLocator(var4, var5);
    org.jhotdraw.standard.NullHandle var7 = new org.jhotdraw.standard.NullHandle((org.jhotdraw.framework.Figure)var0, (org.jhotdraw.framework.Locator)var6);
    int var8 = 100;
    int var9 = 100;
    org.jhotdraw.standard.OffsetLocator var10 = new org.jhotdraw.standard.OffsetLocator((org.jhotdraw.framework.Locator)var6, var8, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test498() throws Throwable {

    int var0 = 1;
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.figures.PolyLineFigure.locator(var0);

  }

  public void test499() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var18 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var20 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var19);
    var17.addDependendFigure((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.standard.CreationTool var23 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.figures.TextFigure var24 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var25 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var24);
    java.awt.Color var26 = var24.getFillColor();
    org.jhotdraw.standard.SelectAreaTracker var27 = new org.jhotdraw.standard.SelectAreaTracker((org.jhotdraw.framework.DrawingEditor)var0, var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test500() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    int var8 = 0;
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var8, var9);
    org.jhotdraw.util.RedoCommand var11 = new org.jhotdraw.util.RedoCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    int var12 = 10;
    int var13 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var14 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var12, var13);
    java.awt.Dimension var15 = var14.getUserSize();
    double var16 = var14.getZoomSpeed();
    java.awt.Dimension var17 = var14.getUserSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2.0d);

  }

}
