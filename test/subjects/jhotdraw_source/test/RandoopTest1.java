
import junit.framework.*;

public class RandoopTest1 extends TestCase {

  // Runs all the tests in this file.
  public static void main(String[] args) {
    junit.textui.TestRunner.run(RandoopTest1.class);
  }

  public void test1() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    int var10 = 100;
    int var11 = (-1);
    int var12 = (-1);
    int var13 = (-1);
    var2.reshape(var10, var11, var12, var13);
    boolean var15 = var2.isContentAreaFilled();
    javax.swing.InputVerifier var16 = var2.getInputVerifier();
    int var17 = 0;
    org.jhotdraw.util.PaletteLayout var18 = new org.jhotdraw.util.PaletteLayout(var17);
    var2.setLayout((java.awt.LayoutManager)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test2() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.figures.EllipseFigure var8 = new org.jhotdraw.figures.EllipseFigure(var3, var7);
    java.lang.String var9 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    java.awt.Component var25 = var14.add((java.awt.Component)var24);
    boolean var26 = var24.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var29 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var27, (org.jhotdraw.framework.FigureChangeListener)var28);
    java.awt.Dimension var30 = var27.size();
    var24.removeFromSelection((org.jhotdraw.framework.Figure)var27);
    var27.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var33 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var27);
    var10.nextFocus();
    java.lang.Double var35 = new java.lang.Double((-1.0d));
    java.lang.Double var36 = new java.lang.Double(100.0d);
    java.lang.Double var37 = new java.lang.Double(1.0d);
    java.awt.Point var38 = org.jhotdraw.util.Geom.polarToPoint(var35, var36, var37);
    java.awt.Component var39 = var10.getComponentAt(var38);
    var8.setAttribute(var9, (java.lang.Object)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test3() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test4() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    org.jhotdraw.framework.DrawingView var3 = org.jhotdraw.standard.NullDrawingView.getManagedDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.standard.StandardDrawing var4 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    java.lang.Double var9 = new java.lang.Double((-1.0d));
    java.lang.Double var10 = new java.lang.Double(100.0d);
    java.lang.Double var11 = new java.lang.Double(1.0d);
    java.awt.Point var12 = org.jhotdraw.util.Geom.polarToPoint(var9, var10, var11);
    org.jhotdraw.contrib.DiamondFigure var13 = new org.jhotdraw.contrib.DiamondFigure(var8, var12);
    org.jhotdraw.framework.HandleEnumeration var14 = var13.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var17 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var15, (org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.Figure var18 = var4.replace((org.jhotdraw.framework.Figure)var13, (org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.framework.Handle var19 = org.jhotdraw.standard.BoxHandleKit.north(var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var28 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var26.removeForeground((org.jhotdraw.framework.Painter)var28);
    org.jhotdraw.util.UndoableHandle var30 = new org.jhotdraw.util.UndoableHandle(var19, (org.jhotdraw.framework.DrawingView)var26);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    var44.clearSelection();
    java.awt.Color var46 = var44.getForeground();
    var37.setBackground(var46);
    org.jhotdraw.framework.FigureEnumeration var48 = var37.selectionZOrdered();
    var48.reset();
    var26.addToSelectionAll(var48);
    java.lang.Double var51 = new java.lang.Double((-1.0d));
    java.lang.Double var52 = new java.lang.Double(100.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    java.awt.Point var54 = org.jhotdraw.util.Geom.polarToPoint(var51, var52, var53);
    java.awt.Point var55 = var26.getLocation(var54);
    var26.disable();
    var0.setLocationRelativeTo((java.awt.Component)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test5() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.framework.JHotDrawRuntimeException var1 = new org.jhotdraw.framework.JHotDrawRuntimeException(var0);
    org.jhotdraw.framework.JHotDrawException var2 = new org.jhotdraw.framework.JHotDrawException((java.lang.Exception)var1);
    java.lang.Exception var3 = var2.getNestedException();

  }

  public void test6() throws Throwable {

    org.jhotdraw.figures.EllipseFigure var0 = new org.jhotdraw.figures.EllipseFigure();

  }

  public void test7() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var1 = var0.getObservedFigure();
    org.jhotdraw.standard.TextHolder var2 = var0.getTextHolder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test8() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    javax.swing.KeyStroke[] var6 = var2.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);

  }

  public void test9() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.figures.EllipseFigure var8 = new org.jhotdraw.figures.EllipseFigure(var3, var7);
    java.awt.Rectangle var9 = var8.displayBox();
    java.awt.Point var10 = org.jhotdraw.util.Geom.west(var9);

  }

  public void test10() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    int var44 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var34);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JMenu var47 = var45.createLookAndFeelMenu();
    java.lang.Character var48 = new java.lang.Character('a');
    var47.setMnemonic(var48);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    var56.clearSelection();
    var34.add((java.awt.Component)var47, (java.lang.Object)var56);
    org.jhotdraw.standard.StandardDrawing var59 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.lang.Double var64 = new java.lang.Double((-1.0d));
    java.lang.Double var65 = new java.lang.Double(100.0d);
    java.lang.Double var66 = new java.lang.Double(1.0d);
    java.awt.Point var67 = org.jhotdraw.util.Geom.polarToPoint(var64, var65, var66);
    org.jhotdraw.contrib.DiamondFigure var68 = new org.jhotdraw.contrib.DiamondFigure(var63, var67);
    org.jhotdraw.framework.HandleEnumeration var69 = var68.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    org.jhotdraw.framework.Figure var73 = var59.replace((org.jhotdraw.framework.Figure)var68, (org.jhotdraw.framework.Figure)var70);
    org.jhotdraw.framework.Handle var74 = org.jhotdraw.standard.BoxHandleKit.north(var73);
    org.jhotdraw.contrib.MDI_DrawApplication var75 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var76 = var75.isDoubleBuffered();
    javax.swing.JRootPane var77 = var75.getRootPane();
    javax.swing.JLayeredPane var78 = var75.getLayeredPane();
    int var79 = (-1);
    int var80 = 0;
    org.jhotdraw.standard.StandardDrawingView var81 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var75, var79, var80);
    var81.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var83 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var81.removeForeground((org.jhotdraw.framework.Painter)var83);
    org.jhotdraw.util.UndoableHandle var85 = new org.jhotdraw.util.UndoableHandle(var74, (org.jhotdraw.framework.DrawingView)var81);
    java.lang.Object var86 = var47.getClientProperty((java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);

  }

  public void test11() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    boolean var9 = var8.undo();
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var8.setUndoable(var10);
    boolean var12 = var8.undo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test12() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "hi!";
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    java.lang.String var18 = var0.store(var2, (org.jhotdraw.framework.Drawing)var3);
    java.lang.String var19 = "";
    var0.setFileExtension(var19);
    java.lang.String var21 = "";
    org.jhotdraw.framework.Drawing var22 = var0.restore(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);

  }

  public void test13() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    boolean var2 = var0.isFocusTraversalPolicySet();
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test14() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    boolean var18 = var10.isReadOnly();
    org.jhotdraw.contrib.ClippingUpdateStrategy var19 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var10.removeBackground((org.jhotdraw.framework.Painter)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test15() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "hi!";
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    java.lang.String var18 = var0.store(var2, (org.jhotdraw.framework.Drawing)var3);
    java.lang.String var19 = "";
    var0.setFileExtension(var19);
    javax.swing.filechooser.FileFilter var21 = var0.getFileFilter();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.equals("hi!.draw"));

  }

  public void test16() throws Throwable {

    int var0 = 10;
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.contrib.PolygonFigure.locator(var0);

  }

  public void test17() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    java.awt.Graphics var4 = var0.getGraphics();
    java.lang.Boolean var5 = new java.lang.Boolean(true);
    var0.setLocationByPlatform(var5);
    org.jhotdraw.standard.StandardDrawing var7 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    org.jhotdraw.contrib.DiamondFigure var16 = new org.jhotdraw.contrib.DiamondFigure(var11, var15);
    org.jhotdraw.framework.HandleEnumeration var17 = var16.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    org.jhotdraw.framework.Figure var21 = var7.replace((org.jhotdraw.framework.Figure)var16, (org.jhotdraw.framework.Figure)var18);
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.north(var21);
    org.jhotdraw.standard.HandleTracker var23 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var0, var22);
    boolean var24 = var0.isResizable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test18() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.util.CommandButton var4 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var3);

  }

  public void test19() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    var0.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test20() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    int var7 = 100;
    int var8 = 0;
    int var9 = 0;
    int var10 = 10;
    var2.reshape(var7, var8, var9, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test21() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));

  }

  public void test22() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test23() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    var2.release();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test24() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.standard.StandardDrawingView var27 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var21, var25, var26);
    java.awt.Component var28 = var17.add((java.awt.Component)var27);
    boolean var29 = var27.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var32 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var30, (org.jhotdraw.framework.FigureChangeListener)var31);
    java.awt.Dimension var33 = var30.size();
    var27.removeFromSelection((org.jhotdraw.framework.Figure)var30);
    var16.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var27);
    boolean var36 = var16.isExecutable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test25() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var16 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.standard.StandardDrawing var17 = new org.jhotdraw.standard.StandardDrawing();
    int var18 = var15.getLayer((org.jhotdraw.framework.Figure)var17);
    java.awt.Rectangle var19 = var17.displayBox();
    org.jhotdraw.framework.Figure var20 = var0.orphan((org.jhotdraw.framework.Figure)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test26() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    boolean var18 = var10.isReadOnly();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.util.UndoableAdapter var27 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var25);
    java.awt.Dimension var28 = var25.getPreferredSize();
    java.awt.Dimension var29 = var10.getSize(var28);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    var36.clearSelection();
    org.jhotdraw.util.UndoableAdapter var38 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var36);
    java.awt.Dimension var39 = var36.getPreferredSize();
    java.awt.Dimension var40 = var10.getSize(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test27() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    boolean var14 = var10.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test28() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test29() throws Throwable {

    int var0 = 100;
    int var1 = 10;
    int var2 = 100;
    int var3 = (-1);
    int var4 = 1;
    int var5 = 1;
    double var6 = org.jhotdraw.util.Geom.distanceFromLine(var0, var1, var2, var3, var4, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 99.0d);

  }

  public void test30() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    java.awt.Insets var44 = var10.getAutoscrollInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test31() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var1 = "";
    var0.setText(var1);

  }

  public void test32() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.framework.Figure var26 = var17.findFigureInside(var24, var25);
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    int var28 = 1;
    int var29 = 1;
    org.jhotdraw.contrib.PolygonFigure var30 = new org.jhotdraw.contrib.PolygonFigure(var28, var29);
    org.jhotdraw.framework.FigureEnumeration var31 = var30.figures();
    java.awt.Rectangle var32 = var30.displayBox();
    int var33 = 1;
    int var34 = 1;
    org.jhotdraw.contrib.PolygonFigure var35 = new org.jhotdraw.contrib.PolygonFigure(var33, var34);
    org.jhotdraw.framework.FigureEnumeration var36 = var35.figures();
    java.awt.Rectangle var37 = var35.displayBox();
    org.jhotdraw.framework.Figure var38 = var27.findFigure(var32, (org.jhotdraw.framework.Figure)var35);
    int var39 = 100;
    int var40 = (-1);
    java.lang.Double var41 = new java.lang.Double((-1.0d));
    java.lang.Double var42 = new java.lang.Double(100.0d);
    java.lang.Double var43 = new java.lang.Double(1.0d);
    java.awt.Point var44 = org.jhotdraw.util.Geom.polarToPoint(var41, var42, var43);
    java.lang.Double var45 = new java.lang.Double((-1.0d));
    java.lang.Double var46 = new java.lang.Double(100.0d);
    java.lang.Double var47 = new java.lang.Double(1.0d);
    java.awt.Point var48 = org.jhotdraw.util.Geom.polarToPoint(var45, var46, var47);
    org.jhotdraw.contrib.DiamondFigure var49 = new org.jhotdraw.contrib.DiamondFigure(var44, var48);
    org.jhotdraw.framework.Figure var50 = var27.findFigureInsideWithout(var39, var40, (org.jhotdraw.framework.Figure)var49);
    int var51 = var17.getLayer((org.jhotdraw.framework.Figure)var49);
    java.awt.Rectangle var52 = var49.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));

  }

  public void test33() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    java.lang.String var15 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test34() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    boolean var19 = var18.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test35() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    org.jhotdraw.util.CommandButton var4 = new org.jhotdraw.util.CommandButton((org.jhotdraw.util.Command)var3);
    org.jhotdraw.framework.DrawingEditor var5 = var3.getDrawingEditor();

  }

  public void test36() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.util.StandardStorageFormat var24 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var25 = var24.getFileDescription();
    java.lang.String var26 = "hi!";
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    org.jhotdraw.contrib.DiamondFigure var36 = new org.jhotdraw.contrib.DiamondFigure(var31, var35);
    org.jhotdraw.framework.HandleEnumeration var37 = var36.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    org.jhotdraw.framework.Figure var41 = var27.replace((org.jhotdraw.framework.Figure)var36, (org.jhotdraw.framework.Figure)var38);
    java.lang.String var42 = var24.store(var26, (org.jhotdraw.framework.Drawing)var27);
    org.jhotdraw.framework.FigureEnumeration var43 = var27.figures();
    var17.orphanAll(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("hi!.draw"));

  }

  public void test37() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    int var10 = 100;
    int var11 = 100;
    org.jhotdraw.standard.GridConstrainer var12 = new org.jhotdraw.standard.GridConstrainer(var10, var11);
    var6.setConstrainer((org.jhotdraw.framework.PointConstrainer)var12);
    int var14 = var12.getStepY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);

  }

  public void test38() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    org.jhotdraw.contrib.html.DisposableResourceHolder var9 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var8);
    boolean var10 = var8.undo();
    org.jhotdraw.framework.FigureEnumeration var11 = var8.getAffectedFigures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test39() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.figures.ArrowTip var16 = new org.jhotdraw.figures.ArrowTip();
    int var17 = 1;
    int var18 = 1;
    int var19 = 10;
    int var20 = 0;
    java.awt.Polygon var21 = var16.outline(var17, var18, var19, var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    java.awt.Color var30 = var28.getForeground();
    var16.setFillColor(var30);
    java.awt.Rectangle var32 = var16.displayBox();
    var0.init(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test40() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    java.awt.event.InputMethodListener[] var5 = var2.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test41() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    boolean var9 = var8.undo();
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var8.setUndoable(var10);
    boolean var12 = var8.undo();
    org.jhotdraw.util.Undoable var13 = org.jhotdraw.util.UndoRedoActivity.createUndoRedoActivity((org.jhotdraw.util.Undoable)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test42() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.util.Undoable var27 = var26.getUndoActivity();
    java.awt.Point var28 = var26.locate();
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.util.UndoableAdapter var37 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.html.DisposableResourceHolder var38 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var37);
    boolean var39 = var37.undo();
    java.lang.Boolean var40 = new java.lang.Boolean(true);
    var37.setUndoable(var40);
    var26.setUndoActivity((org.jhotdraw.util.Undoable)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test43() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.awt.Rectangle var4 = var2.displayBox();
    org.jhotdraw.util.Bounds var5 = new org.jhotdraw.util.Bounds((java.awt.geom.Rectangle2D)var4);
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    var5.setCenter((java.awt.geom.Point2D)var9);
    double var11 = var5.getNorth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);

  }

  public void test44() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var2.isActive();
    org.jhotdraw.util.Undoable var4 = var2.getUndoActivity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test45() throws Throwable {

    org.jhotdraw.figures.GroupFigure var0 = new org.jhotdraw.figures.GroupFigure();

  }

  public void test46() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.lang.String var4 = var0.getAppletInfo();
    javax.swing.JRootPane var5 = var0.getRootPane();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    org.jhotdraw.util.UndoableAdapter var14 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var12);
    java.awt.Container var15 = var12.getFocusCycleRootAncestor();
    java.awt.Color var16 = var12.getBackground();
    var0.setBackground(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test47() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    var10.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var12);
    boolean var15 = var10.requestFocusInWindow();
    java.lang.String var16 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    java.lang.String var24 = var23.getUIClassID();
    java.awt.Insets var25 = var23.getInsets();
    int var26 = (-1);
    var20.setPosition((java.awt.Component)var23, var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    int var30 = 0;
    var20.setLayer((java.awt.Component)var28, var30);
    org.jhotdraw.figures.UngroupCommand var32 = new org.jhotdraw.figures.UngroupCommand(var16, (org.jhotdraw.framework.DrawingEditor)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    java.awt.Component var44 = var33.add((java.awt.Component)var43);
    boolean var45 = var43.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var48 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var46, (org.jhotdraw.framework.FigureChangeListener)var47);
    java.awt.Dimension var49 = var46.size();
    var43.removeFromSelection((org.jhotdraw.framework.Figure)var46);
    var32.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var43);
    boolean var52 = var32.isExecutable();
    var10.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test48() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var48 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var47);
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var50 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var49);
    var47.addDependendFigure((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.framework.Handle var52 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    var66.clearSelection();
    java.awt.Color var68 = var66.getForeground();
    var59.setBackground(var68);
    org.jhotdraw.framework.FigureEnumeration var70 = var59.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    org.jhotdraw.contrib.MDI_DrawApplication var78 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var79 = var78.isDoubleBuffered();
    javax.swing.JRootPane var80 = var78.getRootPane();
    javax.swing.JLayeredPane var81 = var78.getLayeredPane();
    int var82 = (-1);
    int var83 = 0;
    org.jhotdraw.standard.StandardDrawingView var84 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var78, var82, var83);
    var84.clearSelection();
    java.awt.Color var86 = var84.getForeground();
    var77.setBackground(var86);
    org.jhotdraw.framework.FigureEnumeration var88 = var77.selectionZOrdered();
    var59.addToSelectionAll(var88);
    boolean var90 = var22.figureExists((org.jhotdraw.framework.Figure)var49, var88);
    var49.layout();
    java.awt.Rectangle var92 = var49.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test49() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.standard.StandardDrawing var6 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var7 = new java.lang.Double((-1.0d));
    java.lang.Double var8 = new java.lang.Double(100.0d);
    java.lang.Double var9 = new java.lang.Double(1.0d);
    java.awt.Point var10 = org.jhotdraw.util.Geom.polarToPoint(var7, var8, var9);
    java.lang.Double var11 = new java.lang.Double((-1.0d));
    java.lang.Double var12 = new java.lang.Double(100.0d);
    java.lang.Double var13 = new java.lang.Double(1.0d);
    java.awt.Point var14 = org.jhotdraw.util.Geom.polarToPoint(var11, var12, var13);
    org.jhotdraw.contrib.DiamondFigure var15 = new org.jhotdraw.contrib.DiamondFigure(var10, var14);
    org.jhotdraw.framework.HandleEnumeration var16 = var15.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    org.jhotdraw.framework.Figure var20 = var6.replace((org.jhotdraw.framework.Figure)var15, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.framework.Handle var21 = org.jhotdraw.standard.BoxHandleKit.north(var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var30 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var28.removeForeground((org.jhotdraw.framework.Painter)var30);
    org.jhotdraw.util.UndoableHandle var32 = new org.jhotdraw.util.UndoableHandle(var21, (org.jhotdraw.framework.DrawingView)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    var46.clearSelection();
    java.awt.Color var48 = var46.getForeground();
    var39.setBackground(var48);
    org.jhotdraw.framework.FigureEnumeration var50 = var39.selectionZOrdered();
    var50.reset();
    var28.addToSelectionAll(var50);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    java.lang.Double var54 = new java.lang.Double(100.0d);
    java.lang.Double var55 = new java.lang.Double(1.0d);
    java.awt.Point var56 = org.jhotdraw.util.Geom.polarToPoint(var53, var54, var55);
    java.awt.Point var57 = var28.getLocation(var56);
    java.awt.Point var58 = org.jhotdraw.contrib.PolygonFigure.chop(var5, var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test50() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);

  }

  public void test51() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    org.jhotdraw.framework.DrawingEditor var18 = var10.editor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test52() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    boolean var7 = var6.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test53() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    boolean var7 = var2.isFocusPainted();
    java.lang.String var8 = "";
    var2.setLabel(var8);
    int var10 = 10;
    //gustavo//timeout exception

  }

  public void test54() throws Throwable {

    int var0 = 100;
    int var1 = (-1);
    int var2 = 10;
    int var3 = 0;
    int var4 = 100;
    int var5 = (-1);
    int var6 = 1;
    int var7 = 1;
    java.awt.Point var8 = org.jhotdraw.util.Geom.intersect(var0, var1, var2, var3, var4, var5, var6, var7);

  }

  public void test55() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    int var14 = (-1);
    int var15 = 0;
    org.jhotdraw.standard.StandardDrawingView var16 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var14, var15);
    var16.clearSelection();
    org.jhotdraw.util.UndoableAdapter var18 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var16);
    boolean var19 = var18.undo();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    org.jhotdraw.standard.StandardDrawing var23 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var24 = new java.lang.Double((-1.0d));
    java.lang.Double var25 = new java.lang.Double(100.0d);
    java.lang.Double var26 = new java.lang.Double(1.0d);
    java.awt.Point var27 = org.jhotdraw.util.Geom.polarToPoint(var24, var25, var26);
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    org.jhotdraw.contrib.DiamondFigure var32 = new org.jhotdraw.contrib.DiamondFigure(var27, var31);
    org.jhotdraw.framework.HandleEnumeration var33 = var32.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var36 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var34, (org.jhotdraw.framework.FigureChangeListener)var35);
    org.jhotdraw.framework.Figure var37 = var23.replace((org.jhotdraw.framework.Figure)var32, (org.jhotdraw.framework.Figure)var34);
    org.jhotdraw.framework.Handle var38 = org.jhotdraw.standard.BoxHandleKit.north(var37);
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    javax.swing.JLayeredPane var42 = var39.getLayeredPane();
    int var43 = (-1);
    int var44 = 0;
    org.jhotdraw.standard.StandardDrawingView var45 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var39, var43, var44);
    var45.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var47 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var45.removeForeground((org.jhotdraw.framework.Painter)var47);
    org.jhotdraw.util.UndoableHandle var49 = new org.jhotdraw.util.UndoableHandle(var38, (org.jhotdraw.framework.DrawingView)var45);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    var63.clearSelection();
    java.awt.Color var65 = var63.getForeground();
    var56.setBackground(var65);
    org.jhotdraw.framework.FigureEnumeration var67 = var56.selectionZOrdered();
    var67.reset();
    var45.addToSelectionAll(var67);
    var20.orphanAll(var67);
    var18.setAffectedFigures(var67);
    var6.addToSelectionAll(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test56() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    boolean var3 = var0.isActive();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test57() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    var4.deactivate();
    var4.activate();
    java.lang.Boolean var7 = new java.lang.Boolean(true);
    var4.setUsable(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test58() throws Throwable {

    org.jhotdraw.figures.ImageFigure var0 = new org.jhotdraw.figures.ImageFigure();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.release();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test59() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = "hi!";
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var3 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var4 = var3.handles();
    org.jhotdraw.framework.Figure var5 = var2.remove((org.jhotdraw.framework.Figure)var3);
    java.lang.String var6 = var0.store(var1, (org.jhotdraw.framework.Drawing)var2);
    boolean var7 = var0.isStoreFormat();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test60() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var14 = var10.getDragSourceListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test61() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var48 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var47);
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var50 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var49);
    var47.addDependendFigure((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.framework.Handle var52 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    var66.clearSelection();
    java.awt.Color var68 = var66.getForeground();
    var59.setBackground(var68);
    org.jhotdraw.framework.FigureEnumeration var70 = var59.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    org.jhotdraw.contrib.MDI_DrawApplication var78 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var79 = var78.isDoubleBuffered();
    javax.swing.JRootPane var80 = var78.getRootPane();
    javax.swing.JLayeredPane var81 = var78.getLayeredPane();
    int var82 = (-1);
    int var83 = 0;
    org.jhotdraw.standard.StandardDrawingView var84 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var78, var82, var83);
    var84.clearSelection();
    java.awt.Color var86 = var84.getForeground();
    var77.setBackground(var86);
    org.jhotdraw.framework.FigureEnumeration var88 = var77.selectionZOrdered();
    var59.addToSelectionAll(var88);
    boolean var90 = var22.figureExists((org.jhotdraw.framework.Figure)var49, var88);
    var49.layout();
    java.lang.String var92 = "";
    org.jhotdraw.contrib.html.ContentProducerRegistry var93 = new org.jhotdraw.contrib.html.ContentProducerRegistry();
    var49.setAttribute(var92, (java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test62() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    boolean var6 = var2.isTopLevelMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test63() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    int var15 = 100;
    int var16 = (-1);
    int var17 = 10;
    int var18 = 0;
    int var19 = 100;
    int var20 = (-1);
    int var21 = 1;
    int var22 = 1;
    java.awt.Point var23 = org.jhotdraw.util.Geom.intersect(var15, var16, var17, var18, var19, var20, var21, var22);
    int var24 = 100;
    int var25 = (-1);
    int var26 = 10;
    int var27 = 0;
    int var28 = 100;
    int var29 = (-1);
    int var30 = 1;
    int var31 = 1;
    java.awt.Point var32 = org.jhotdraw.util.Geom.intersect(var24, var25, var26, var27, var28, var29, var30, var31);
    var0.basicDisplayBox(var23, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test64() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    java.awt.Component var16 = var5.add((java.awt.Component)var15);
    boolean var17 = var15.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    java.awt.Dimension var21 = var18.size();
    var15.removeFromSelection((org.jhotdraw.framework.Figure)var18);
    var18.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var24 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var1, (org.jhotdraw.framework.Figure)var18);
    var1.nextFocus();
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    java.awt.Component var30 = var1.getComponentAt(var29);
    int var31 = 1;
    int var32 = 1;
    org.jhotdraw.contrib.PolygonFigure var33 = new org.jhotdraw.contrib.PolygonFigure(var31, var32);
    java.lang.String var34 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = "hi!";
    java.lang.Long var39 = new java.lang.Long(100L);
    java.lang.Long var40 = new java.lang.Long(1L);
    var37.firePropertyChange(var38, var39, var40);
    int var42 = var37.getX();
    var33.setAttribute(var34, (java.lang.Object)var42);
    org.jhotdraw.standard.StandardDrawing var44 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var45 = new java.lang.Double((-1.0d));
    java.lang.Double var46 = new java.lang.Double(100.0d);
    java.lang.Double var47 = new java.lang.Double(1.0d);
    java.awt.Point var48 = org.jhotdraw.util.Geom.polarToPoint(var45, var46, var47);
    java.lang.Double var49 = new java.lang.Double((-1.0d));
    java.lang.Double var50 = new java.lang.Double(100.0d);
    java.lang.Double var51 = new java.lang.Double(1.0d);
    java.awt.Point var52 = org.jhotdraw.util.Geom.polarToPoint(var49, var50, var51);
    org.jhotdraw.contrib.DiamondFigure var53 = new org.jhotdraw.contrib.DiamondFigure(var48, var52);
    org.jhotdraw.framework.HandleEnumeration var54 = var53.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var55 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var56 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var57 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var55, (org.jhotdraw.framework.FigureChangeListener)var56);
    org.jhotdraw.framework.Figure var58 = var44.replace((org.jhotdraw.framework.Figure)var53, (org.jhotdraw.framework.Figure)var55);
    org.jhotdraw.framework.Handle var59 = org.jhotdraw.standard.BoxHandleKit.north(var58);
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    var66.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var68 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var66.removeForeground((org.jhotdraw.framework.Painter)var68);
    org.jhotdraw.util.UndoableHandle var70 = new org.jhotdraw.util.UndoableHandle(var59, (org.jhotdraw.framework.DrawingView)var66);
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    org.jhotdraw.contrib.MDI_DrawApplication var78 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var79 = var78.isDoubleBuffered();
    javax.swing.JRootPane var80 = var78.getRootPane();
    javax.swing.JLayeredPane var81 = var78.getLayeredPane();
    int var82 = (-1);
    int var83 = 0;
    org.jhotdraw.standard.StandardDrawingView var84 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var78, var82, var83);
    var84.clearSelection();
    java.awt.Color var86 = var84.getForeground();
    var77.setBackground(var86);
    org.jhotdraw.framework.FigureEnumeration var88 = var77.selectionZOrdered();
    var88.reset();
    var66.addToSelectionAll(var88);
    java.lang.Double var91 = new java.lang.Double((-1.0d));
    java.lang.Double var92 = new java.lang.Double(100.0d);
    java.lang.Double var93 = new java.lang.Double(1.0d);
    java.awt.Point var94 = org.jhotdraw.util.Geom.polarToPoint(var91, var92, var93);
    java.awt.Point var95 = var66.getLocation(var94);
    java.awt.Point var96 = var33.chop(var95);
    org.jhotdraw.standard.ToggleGridCommand var97 = new org.jhotdraw.standard.ToggleGridCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1, var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test65() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);

  }

  public void test66() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.util.Undoable var27 = var26.getUndoActivity();
    java.awt.Rectangle var28 = var26.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test67() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    java.awt.Component var33 = var22.add((java.awt.Component)var32);
    var14.setEditor((org.jhotdraw.framework.DrawingEditor)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    java.lang.String var42 = var41.getUIClassID();
    java.awt.Insets var43 = var41.getInsets();
    int var44 = (-1);
    var38.setPosition((java.awt.Component)var41, var44);
    boolean var46 = var38.isDisplayable();
    boolean var47 = var14.isFocusCycleRoot((java.awt.Container)var38);
    var0.setLayeredPane(var38);
    javax.swing.JLayeredPane var49 = javax.swing.JLayeredPane.getLayeredPaneAbove((java.awt.Component)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);

  }

  public void test68() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    int var7 = 100;
    int var8 = 0;
    int var9 = 0;
    int var10 = 10;
    var2.reshape(var7, var8, var9, var10);
    org.jhotdraw.standard.StandardDrawing var12 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var13 = new java.lang.Double((-1.0d));
    java.lang.Double var14 = new java.lang.Double(100.0d);
    java.lang.Double var15 = new java.lang.Double(1.0d);
    java.awt.Point var16 = org.jhotdraw.util.Geom.polarToPoint(var13, var14, var15);
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.lang.Double var18 = new java.lang.Double(100.0d);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.awt.Point var20 = org.jhotdraw.util.Geom.polarToPoint(var17, var18, var19);
    org.jhotdraw.contrib.DiamondFigure var21 = new org.jhotdraw.contrib.DiamondFigure(var16, var20);
    org.jhotdraw.framework.HandleEnumeration var22 = var21.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    org.jhotdraw.framework.Figure var26 = var12.replace((org.jhotdraw.framework.Figure)var21, (org.jhotdraw.framework.Figure)var23);
    org.jhotdraw.framework.Handle var27 = org.jhotdraw.standard.BoxHandleKit.north(var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    var34.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var36 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var34.removeForeground((org.jhotdraw.framework.Painter)var36);
    org.jhotdraw.util.UndoableHandle var38 = new org.jhotdraw.util.UndoableHandle(var27, (org.jhotdraw.framework.DrawingView)var34);
    org.jhotdraw.util.Undoable var39 = var38.getUndoActivity();
    java.awt.Rectangle var40 = var38.displayBox();
    var2.computeVisibleRect(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test69() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    int var8 = 0;
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var8, var9);
    java.lang.Boolean var11 = new java.lang.Boolean(false);
    var1.setUndecorated(var11);
    int var13 = 10;
    var1.setExtendedState(var13);
    java.lang.Object var15 = org.jhotdraw.figures.AttributeFigure.initDefaultAttribute(var0, (java.lang.Object)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test70() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    java.awt.Insets var37 = var33.getInsets();
    javax.swing.TransferHandler var38 = var33.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test71() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.util.collections.jdk11.ListWrapper var6 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test72() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    java.awt.Color var1 = var0.getBorderColor();
    java.awt.Rectangle var2 = var0.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test73() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.figures.NullConnector var21 = new org.jhotdraw.figures.NullConnector((org.jhotdraw.framework.Figure)var16);

  }

  public void test74() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    java.awt.Point var44 = var10.lastClick();
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    var51.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var53 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var51.removeForeground((org.jhotdraw.framework.Painter)var53);
    var10.removeBackground((org.jhotdraw.framework.Painter)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test75() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    var0.changed();

  }

  public void test76() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var2.isActive();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var14.transferFocusUpCycle();
    var2.deactivate((org.jhotdraw.framework.DrawingView)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test77() throws Throwable {

    org.jhotdraw.framework.Locator var0 = org.jhotdraw.standard.RelativeLocator.center();

  }

  public void test78() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.lang.Double var20 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var21 = new org.jhotdraw.standard.RelativeLocator(var19, var20);
    int var22 = (-1);
    org.jhotdraw.figures.PolyLineHandle var23 = new org.jhotdraw.figures.PolyLineHandle(var17, (org.jhotdraw.framework.Locator)var21, var22);
    int var24 = 1;
    int var25 = 100;
    int var26 = 100;
    int var27 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    var38.transferFocusUpCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.invokeStep(var24, var25, var26, var27, (org.jhotdraw.framework.DrawingView)var38);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test79() throws Throwable {

    org.jhotdraw.util.collections.jdk11.SetWrapper var0 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    int var1 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test80() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.framework.Figure var26 = var17.findFigureInside(var24, var25);
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    int var28 = 1;
    int var29 = 1;
    org.jhotdraw.contrib.PolygonFigure var30 = new org.jhotdraw.contrib.PolygonFigure(var28, var29);
    org.jhotdraw.framework.FigureEnumeration var31 = var30.figures();
    java.awt.Rectangle var32 = var30.displayBox();
    int var33 = 1;
    int var34 = 1;
    org.jhotdraw.contrib.PolygonFigure var35 = new org.jhotdraw.contrib.PolygonFigure(var33, var34);
    org.jhotdraw.framework.FigureEnumeration var36 = var35.figures();
    java.awt.Rectangle var37 = var35.displayBox();
    org.jhotdraw.framework.Figure var38 = var27.findFigure(var32, (org.jhotdraw.framework.Figure)var35);
    int var39 = 100;
    int var40 = (-1);
    java.lang.Double var41 = new java.lang.Double((-1.0d));
    java.lang.Double var42 = new java.lang.Double(100.0d);
    java.lang.Double var43 = new java.lang.Double(1.0d);
    java.awt.Point var44 = org.jhotdraw.util.Geom.polarToPoint(var41, var42, var43);
    java.lang.Double var45 = new java.lang.Double((-1.0d));
    java.lang.Double var46 = new java.lang.Double(100.0d);
    java.lang.Double var47 = new java.lang.Double(1.0d);
    java.awt.Point var48 = org.jhotdraw.util.Geom.polarToPoint(var45, var46, var47);
    org.jhotdraw.contrib.DiamondFigure var49 = new org.jhotdraw.contrib.DiamondFigure(var44, var48);
    org.jhotdraw.framework.Figure var50 = var27.findFigureInsideWithout(var39, var40, (org.jhotdraw.framework.Figure)var49);
    int var51 = var17.getLayer((org.jhotdraw.framework.Figure)var49);
    java.awt.Point var52 = var49.center();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));

  }

  public void test81() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    java.lang.String var15 = var0.getTitle();
    java.awt.Rectangle var16 = var0.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);

  }

  public void test82() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.util.collections.jdk11.ListWrapper var6 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var1);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JMenu var9 = var7.createLookAndFeelMenu();
    var7.open();
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    java.awt.Component var22 = var11.add((java.awt.Component)var21);
    boolean var23 = var21.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    java.awt.Dimension var27 = var24.size();
    var21.removeFromSelection((org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    java.awt.Component var40 = var29.add((java.awt.Component)var39);
    var21.setEditor((org.jhotdraw.framework.DrawingEditor)var29);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    java.lang.String var49 = var48.getUIClassID();
    java.awt.Insets var50 = var48.getInsets();
    int var51 = (-1);
    var45.setPosition((java.awt.Component)var48, var51);
    boolean var53 = var45.isDisplayable();
    boolean var54 = var21.isFocusCycleRoot((java.awt.Container)var45);
    var7.setLayeredPane(var45);
    boolean var56 = var6.remove((java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test83() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = "hi!";
    java.lang.Long var8 = new java.lang.Long(100L);
    java.lang.Long var9 = new java.lang.Long(1L);
    var6.firePropertyChange(var7, var8, var9);
    int var11 = var6.getX();
    var2.setAttribute(var3, (java.lang.Object)var11);
    java.awt.Point var13 = var2.center();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test84() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);

  }

  public void test85() throws Throwable {

    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    int var1 = 1;
    int var2 = 0;
    boolean var3 = var0.containsPoint(var1, var2);
    int var4 = var0.getZValue();
    org.jhotdraw.framework.HandleEnumeration var5 = var0.handles();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test86() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    boolean var18 = var10.isReadOnly();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.util.UndoableAdapter var27 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var25);
    java.awt.Dimension var28 = var25.getPreferredSize();
    java.awt.Dimension var29 = var10.getSize(var28);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    var36.clearSelection();
    org.jhotdraw.util.UndoableAdapter var38 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var36);
    java.awt.Dimension var39 = var36.getPreferredSize();
    java.awt.Dimension var40 = var10.getSize(var39);
    int var41 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    javax.swing.JLayeredPane var49 = var46.getLayeredPane();
    int var50 = (-1);
    int var51 = 0;
    org.jhotdraw.standard.StandardDrawingView var52 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var46, var50, var51);
    java.awt.Component var53 = var42.add((java.awt.Component)var52);
    boolean var54 = var52.getInheritsPopupMenu();
    javax.swing.InputMap var55 = var52.getInputMap();
    var10.setInputMap(var41, var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test87() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var1 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var2 = var1.handles();
    org.jhotdraw.framework.Figure var3 = var0.remove((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    var17.clearSelection();
    java.awt.Color var19 = var17.getForeground();
    var10.setBackground(var19);
    org.jhotdraw.framework.FigureEnumeration var21 = var10.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    java.awt.Color var37 = var35.getForeground();
    var28.setBackground(var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var28.selectionZOrdered();
    var10.addToSelectionAll(var39);
    var0.orphanAll(var39);
    java.lang.String var42 = "hi!";
    var0.setTitle(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test88() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    int var18 = (-1);
    int var19 = 0;
    org.jhotdraw.standard.StandardDrawingView var20 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var14, var18, var19);
    java.awt.Component var21 = var10.add((java.awt.Component)var20);
    boolean var22 = var20.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    java.awt.Dimension var26 = var23.size();
    var20.removeFromSelection((org.jhotdraw.framework.Figure)var23);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    var20.setEditor((org.jhotdraw.framework.DrawingEditor)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    javax.swing.JLayeredPane var44 = var41.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    java.lang.String var48 = var47.getUIClassID();
    java.awt.Insets var49 = var47.getInsets();
    int var50 = (-1);
    var44.setPosition((java.awt.Component)var47, var50);
    boolean var52 = var44.isDisplayable();
    boolean var53 = var20.isFocusCycleRoot((java.awt.Container)var44);
    java.awt.Point var54 = var20.lastClick();
    org.jhotdraw.contrib.MDI_DrawApplication var55 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var56 = var55.isDoubleBuffered();
    javax.swing.JRootPane var57 = var55.getRootPane();
    javax.swing.JLayeredPane var58 = var55.getLayeredPane();
    int var59 = (-1);
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var55, var59, var60);
    var61.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var63 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var61.removeForeground((org.jhotdraw.framework.Painter)var63);
    var20.removeBackground((org.jhotdraw.framework.Painter)var63);
    var6.setDisplayUpdate((org.jhotdraw.framework.Painter)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test89() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    java.util.Iterator var2 = var1.iterator();
    org.jhotdraw.util.ReverseListEnumerator var3 = new org.jhotdraw.util.ReverseListEnumerator((java.util.List)var1);

  }

  public void test90() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var10.setMinimumSize(var40);
    int var42 = 100;
    int var43 = 100;
    int var44 = (-1);
    int var45 = 10;
    var10.repaint(var42, var43, var44, var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test91() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.lang.Boolean var5 = new java.lang.Boolean(true);
    var2.setSelected(var5);
    int var7 = var2.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);

  }

  public void test92() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    java.lang.String var13 = var12.getUIClassID();
    java.awt.Insets var14 = var12.getInsets();
    var7.setMargin(var14);
    boolean var16 = var7.isMinimumSizeSet();
    int var17 = 0;
    org.jhotdraw.util.PaletteLayout var18 = new org.jhotdraw.util.PaletteLayout(var17);
    var7.setLayout((java.awt.LayoutManager)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test93() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = 0;
    var0.remove(var4);
    org.jhotdraw.figures.ArrowTip var6 = new org.jhotdraw.figures.ArrowTip();
    int var7 = 1;
    int var8 = 1;
    int var9 = 10;
    int var10 = 0;
    java.awt.Polygon var11 = var6.outline(var7, var8, var9, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    int var16 = (-1);
    int var17 = 0;
    org.jhotdraw.standard.StandardDrawingView var18 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var16, var17);
    var18.clearSelection();
    java.awt.Color var20 = var18.getForeground();
    var6.setFillColor(var20);
    java.awt.Rectangle var22 = var6.displayBox();
    var0.setBounds(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test94() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();

  }

  public void test95() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.StandardLayouter var6 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test96() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = "hi!";
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var3 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var4 = var3.handles();
    org.jhotdraw.framework.Figure var5 = var2.remove((org.jhotdraw.framework.Figure)var3);
    java.lang.String var6 = var0.store(var1, (org.jhotdraw.framework.Drawing)var2);
    org.jhotdraw.util.StandardStorageFormat var7 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var8 = var7.getFileDescription();
    java.lang.String var9 = "hi!";
    org.jhotdraw.standard.StandardDrawing var10 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var11 = new java.lang.Double((-1.0d));
    java.lang.Double var12 = new java.lang.Double(100.0d);
    java.lang.Double var13 = new java.lang.Double(1.0d);
    java.awt.Point var14 = org.jhotdraw.util.Geom.polarToPoint(var11, var12, var13);
    java.lang.Double var15 = new java.lang.Double((-1.0d));
    java.lang.Double var16 = new java.lang.Double(100.0d);
    java.lang.Double var17 = new java.lang.Double(1.0d);
    java.awt.Point var18 = org.jhotdraw.util.Geom.polarToPoint(var15, var16, var17);
    org.jhotdraw.contrib.DiamondFigure var19 = new org.jhotdraw.contrib.DiamondFigure(var14, var18);
    org.jhotdraw.framework.HandleEnumeration var20 = var19.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var22 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var23 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var21, (org.jhotdraw.framework.FigureChangeListener)var22);
    org.jhotdraw.framework.Figure var24 = var10.replace((org.jhotdraw.framework.Figure)var19, (org.jhotdraw.framework.Figure)var21);
    java.lang.String var25 = var7.store(var9, (org.jhotdraw.framework.Drawing)var10);
    java.lang.String var26 = "";
    var7.setFileExtension(var26);
    javax.swing.filechooser.FileFilter var28 = var7.getFileFilter();
    var0.setFileFilter(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.equals("hi!.draw"));

  }

  public void test97() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = var2.getUIClassID();
    boolean var4 = var2.isRequestFocusEnabled();
    java.awt.Dimension var5 = var2.getSize();
    java.lang.Float var6 = new java.lang.Float(0.0f);
    var2.setAlignmentY(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test98() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    java.awt.Component var33 = var22.add((java.awt.Component)var32);
    var14.setEditor((org.jhotdraw.framework.DrawingEditor)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    java.lang.String var42 = var41.getUIClassID();
    java.awt.Insets var43 = var41.getInsets();
    int var44 = (-1);
    var38.setPosition((java.awt.Component)var41, var44);
    boolean var46 = var38.isDisplayable();
    boolean var47 = var14.isFocusCycleRoot((java.awt.Container)var38);
    var0.setLayeredPane(var38);
    java.lang.Boolean var49 = new java.lang.Boolean(false);
    var38.setVerifyInputWhenFocusTarget(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test99() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    int var4 = 1;
    int var5 = 1;
    org.jhotdraw.contrib.PolygonFigure var6 = new org.jhotdraw.contrib.PolygonFigure(var4, var5);
    org.jhotdraw.framework.FigureEnumeration var7 = var6.figures();
    java.awt.Rectangle var8 = var6.displayBox();
    int var9 = 1;
    int var10 = 1;
    org.jhotdraw.contrib.PolygonFigure var11 = new org.jhotdraw.contrib.PolygonFigure(var9, var10);
    org.jhotdraw.framework.FigureEnumeration var12 = var11.figures();
    java.awt.Rectangle var13 = var11.displayBox();
    org.jhotdraw.framework.Figure var14 = var3.findFigure(var8, (org.jhotdraw.framework.Figure)var11);
    int var15 = 100;
    int var16 = (-1);
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.lang.Double var18 = new java.lang.Double(100.0d);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.awt.Point var20 = org.jhotdraw.util.Geom.polarToPoint(var17, var18, var19);
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    org.jhotdraw.contrib.DiamondFigure var25 = new org.jhotdraw.contrib.DiamondFigure(var20, var24);
    org.jhotdraw.framework.Figure var26 = var3.findFigureInsideWithout(var15, var16, (org.jhotdraw.framework.Figure)var25);
    java.util.Iterator var27 = var3.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    var41.layout();
    java.lang.Object var47 = var41.clone();
    org.jhotdraw.framework.FigureChangeEvent var48 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var41);
    var3.figureRequestUpdate(var48);
    var1.figureInvalidated(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test100() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = "";
    var0.setApplicationName(var3);
    boolean var5 = var0.isActive();
    int var6 = var0.getState();
    var0.open();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test101() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    java.awt.Container var2 = var0.getFocusCycleRootAncestor();
    boolean var3 = var0.isResizable();
    java.awt.Dimension var4 = var0.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test102() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    javax.swing.KeyStroke[] var6 = var2.getRegisteredKeyStrokes();
    java.lang.Boolean var7 = new java.lang.Boolean(false);
    var2.setSelected(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);

  }

  public void test103() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 100;
    int var13 = (-1);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.Figure var23 = var0.findFigureInsideWithout(var12, var13, (org.jhotdraw.framework.Figure)var22);
    java.util.Iterator var24 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    javax.swing.JLayeredPane var28 = var25.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    java.awt.Component var36 = var25.add((java.awt.Component)var35);
    boolean var37 = var35.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    java.awt.Dimension var41 = var38.size();
    var35.removeFromSelection((org.jhotdraw.framework.Figure)var38);
    var38.layout();
    java.lang.Object var44 = var38.clone();
    org.jhotdraw.framework.FigureChangeEvent var45 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var38);
    var0.figureRequestUpdate(var45);
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var48 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var49 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var47, (org.jhotdraw.framework.FigureChangeListener)var48);
    java.awt.Dimension var50 = var47.size();
    var0.sendToBack((org.jhotdraw.framework.Figure)var47);
    int var52 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var53 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var52);
    java.util.Iterator var54 = var53.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var55 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var56 = var55.isDoubleBuffered();
    boolean var57 = var55.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var58 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var59 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var60 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var58, (org.jhotdraw.framework.FigureChangeListener)var59);
    int var61 = var59.getZValue();
    java.lang.Object var62 = var59.clone();
    org.jhotdraw.standard.CreationTool var63 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var55, (org.jhotdraw.framework.Figure)var59);
    int var64 = 1;
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var55, var64, var65);
    boolean var67 = var53.contains((java.lang.Object)var65);
    var47.addAll((java.util.List)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test104() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    boolean var18 = var10.isReadOnly();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.util.UndoableAdapter var27 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var25);
    java.awt.Dimension var28 = var25.getPreferredSize();
    java.awt.Dimension var29 = var10.getSize(var28);
    var10.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test105() throws Throwable {

    org.jhotdraw.figures.ChopEllipseConnector var0 = new org.jhotdraw.figures.ChopEllipseConnector();

  }

  public void test106() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var36 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var36.start();
    org.jhotdraw.framework.Tool var38 = var36.tool();
    java.awt.FocusTraversalPolicy var39 = var36.getFocusTraversalPolicy();
    var35.setFocusTraversalPolicy(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);

  }

  public void test107() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.standard.CompositeFigure var19 = var18.getContainerFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test108() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.framework.Tool var12 = var10.tool();
    java.lang.String var13 = var10.getName();
    javax.swing.plaf.PanelUI var14 = var10.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);

  }

  public void test109() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    java.lang.String var44 = var34.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44.equals("javax.swing.JLayeredPane[null.layeredPane,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=,optimizedDrawingPossible=true]"));

  }

  public void test110() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var2 = new java.lang.Double((-1.0d));
    java.lang.Double var3 = new java.lang.Double(100.0d);
    java.lang.Double var4 = new java.lang.Double(1.0d);
    java.awt.Point var5 = org.jhotdraw.util.Geom.polarToPoint(var2, var3, var4);
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    org.jhotdraw.contrib.DiamondFigure var10 = new org.jhotdraw.contrib.DiamondFigure(var5, var9);
    org.jhotdraw.framework.HandleEnumeration var11 = var10.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    org.jhotdraw.framework.Figure var15 = var1.replace((org.jhotdraw.framework.Figure)var10, (org.jhotdraw.framework.Figure)var12);
    org.jhotdraw.framework.Handle var16 = org.jhotdraw.standard.BoxHandleKit.north(var15);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    var23.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var25 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var23.removeForeground((org.jhotdraw.framework.Painter)var25);
    org.jhotdraw.util.UndoableHandle var27 = new org.jhotdraw.util.UndoableHandle(var16, (org.jhotdraw.framework.DrawingView)var23);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    int var39 = (-1);
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var35, var39, var40);
    var41.clearSelection();
    java.awt.Color var43 = var41.getForeground();
    var34.setBackground(var43);
    org.jhotdraw.framework.FigureEnumeration var45 = var34.selectionZOrdered();
    var45.reset();
    var23.addToSelectionAll(var45);
    java.lang.Double var48 = new java.lang.Double((-1.0d));
    java.lang.Double var49 = new java.lang.Double(100.0d);
    java.lang.Double var50 = new java.lang.Double(1.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.polarToPoint(var48, var49, var50);
    java.awt.Point var52 = var23.getLocation(var51);
    int var53 = 0;
    var0.setPointAt(var51, var53);
    int var55 = 1;
    int var56 = 1;
    org.jhotdraw.framework.Connector var57 = var0.connectorAt(var55, var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test111() throws Throwable {

    org.jhotdraw.util.collections.jdk11.SetWrapper var0 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    int var1 = var0.size();
    int var2 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test112() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var2.addAll(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test113() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var8 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var6);
    boolean var9 = var6.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var10 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var6);
    var10.deactivate();
    int var12 = var1.indexOf((java.lang.Object)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test114() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    boolean var8 = var7.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test115() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    int var55 = (-1);
    int var56 = 10;
    var54.shiftBy(var55, var56);
    double var58 = var54.getSouth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.4d);

  }

  public void test116() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.contrib.DiamondFigure var8 = new org.jhotdraw.contrib.DiamondFigure(var3, var7);
    org.jhotdraw.framework.HandleEnumeration var9 = var8.handles();

  }

  public void test117() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    java.lang.String var11 = var10.getUIClassID();
    java.awt.Insets var12 = var10.getInsets();
    int var13 = (-1);
    var7.setPosition((java.awt.Component)var10, var13);
    int var15 = var7.highestLayer();
    var7.disable();
    var0.setLayeredPane(var7);
    java.awt.Graphics var18 = var0.getGraphics();
    var0.stop();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-30000));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test118() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    var0.nextFocus();
    var0.doLayout();
    org.jhotdraw.figures.TextFigure var26 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var27 = var26.textDisplayBox();
    var0.setMaximizedBounds(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test119() throws Throwable {

    org.jhotdraw.contrib.html.DisposableResourceManager var0 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.getManager();

  }

  public void test120() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    boolean var3 = var0.isActive();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    boolean var6 = var4.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var7 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var8 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var9 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var7, (org.jhotdraw.framework.FigureChangeListener)var8);
    int var10 = var8.getZValue();
    java.lang.Object var11 = var8.clone();
    org.jhotdraw.standard.CreationTool var12 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var4, (org.jhotdraw.framework.Figure)var8);
    java.lang.String var13 = "hi!";
    java.lang.String var14 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    java.awt.Graphics var19 = var15.getGraphics();
    java.lang.Boolean var20 = new java.lang.Boolean(true);
    var15.setLocationByPlatform(var20);
    org.jhotdraw.standard.StandardDrawing var22 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    org.jhotdraw.contrib.DiamondFigure var31 = new org.jhotdraw.contrib.DiamondFigure(var26, var30);
    org.jhotdraw.framework.HandleEnumeration var32 = var31.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    org.jhotdraw.framework.Figure var36 = var22.replace((org.jhotdraw.framework.Figure)var31, (org.jhotdraw.framework.Figure)var33);
    org.jhotdraw.framework.Handle var37 = org.jhotdraw.standard.BoxHandleKit.north(var36);
    org.jhotdraw.standard.HandleTracker var38 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var15, var37);
    org.jhotdraw.standard.ToolButton var39 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var4, var13, var14, (org.jhotdraw.framework.Tool)var38);
    org.jhotdraw.figures.TextFigure var40 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var41 = var40.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var42 = new org.jhotdraw.standard.StandardDrawing();
    int var43 = 1;
    int var44 = 1;
    org.jhotdraw.contrib.PolygonFigure var45 = new org.jhotdraw.contrib.PolygonFigure(var43, var44);
    org.jhotdraw.framework.FigureEnumeration var46 = var45.figures();
    java.awt.Rectangle var47 = var45.displayBox();
    int var48 = 1;
    int var49 = 1;
    org.jhotdraw.contrib.PolygonFigure var50 = new org.jhotdraw.contrib.PolygonFigure(var48, var49);
    org.jhotdraw.framework.FigureEnumeration var51 = var50.figures();
    java.awt.Rectangle var52 = var50.displayBox();
    org.jhotdraw.framework.Figure var53 = var42.findFigure(var47, (org.jhotdraw.framework.Figure)var50);
    int var54 = 100;
    int var55 = (-1);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    org.jhotdraw.contrib.DiamondFigure var64 = new org.jhotdraw.contrib.DiamondFigure(var59, var63);
    org.jhotdraw.framework.Figure var65 = var42.findFigureInsideWithout(var54, var55, (org.jhotdraw.framework.Figure)var64);
    java.util.Iterator var66 = var42.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    java.awt.Component var78 = var67.add((java.awt.Component)var77);
    boolean var79 = var77.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var80 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var81 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var82 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var80, (org.jhotdraw.framework.FigureChangeListener)var81);
    java.awt.Dimension var83 = var80.size();
    var77.removeFromSelection((org.jhotdraw.framework.Figure)var80);
    var80.layout();
    java.lang.Object var86 = var80.clone();
    org.jhotdraw.framework.FigureChangeEvent var87 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var80);
    var42.figureRequestUpdate(var87);
    java.awt.Rectangle var89 = var87.getInvalidatedRectangle();
    var40.figureRequestUpdate(var87);
    var39.toolActivated((java.util.EventObject)var87);
    java.lang.Boolean var92 = new java.lang.Boolean(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.paletteUserOver((org.jhotdraw.util.PaletteButton)var39, var92);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test121() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);

  }

  public void test122() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    int var9 = (-1);
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var5, var9, var10);
    var11.clearSelection();
    org.jhotdraw.util.UndoableAdapter var13 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var11);
    org.jhotdraw.contrib.html.DisposableResourceHolder var14 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var13);
    boolean var15 = var13.undo();
    var4.setUndoActivity((org.jhotdraw.util.Undoable)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test123() throws Throwable {

    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    java.awt.Polygon var1 = var0.getPolygon();

  }

  public void test124() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    var10.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var12);
    boolean var15 = var10.requestFocusInWindow();
    java.lang.String var16 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    java.lang.String var24 = var23.getUIClassID();
    java.awt.Insets var25 = var23.getInsets();
    int var26 = (-1);
    var20.setPosition((java.awt.Component)var23, var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    int var30 = 0;
    var20.setLayer((java.awt.Component)var28, var30);
    org.jhotdraw.figures.UngroupCommand var32 = new org.jhotdraw.figures.UngroupCommand(var16, (org.jhotdraw.framework.DrawingEditor)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    java.awt.Component var44 = var33.add((java.awt.Component)var43);
    boolean var45 = var43.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var48 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var46, (org.jhotdraw.framework.FigureChangeListener)var47);
    java.awt.Dimension var49 = var46.size();
    var43.removeFromSelection((org.jhotdraw.framework.Figure)var46);
    var32.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var43);
    boolean var52 = var32.isExecutable();
    var10.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var32);
    java.lang.String var54 = "";
    var32.setName(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test125() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    javax.swing.InputMap var13 = var10.getInputMap();
    java.lang.Boolean var14 = new java.lang.Boolean(false);
    var10.setReadOnly(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test126() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test127() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    int var13 = (-1);
    int var14 = 1;
    int var15 = var2.splitSegment(var13, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));

  }

  public void test128() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    int var13 = 0;
    var3.setLayer((java.awt.Component)var11, var13);
    java.awt.event.HierarchyListener[] var15 = var11.getHierarchyListeners();
    java.lang.String[] var16 = var11.getRequiredVersions();
    java.awt.Window[] var17 = var11.getOwnedWindows();
    org.jhotdraw.util.StandardStorageFormat var18 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var19 = var18.getFileDescription();
    java.lang.String var20 = "hi!";
    org.jhotdraw.standard.StandardDrawing var21 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var22 = new java.lang.Double((-1.0d));
    java.lang.Double var23 = new java.lang.Double(100.0d);
    java.lang.Double var24 = new java.lang.Double(1.0d);
    java.awt.Point var25 = org.jhotdraw.util.Geom.polarToPoint(var22, var23, var24);
    java.lang.Double var26 = new java.lang.Double((-1.0d));
    java.lang.Double var27 = new java.lang.Double(100.0d);
    java.lang.Double var28 = new java.lang.Double(1.0d);
    java.awt.Point var29 = org.jhotdraw.util.Geom.polarToPoint(var26, var27, var28);
    org.jhotdraw.contrib.DiamondFigure var30 = new org.jhotdraw.contrib.DiamondFigure(var25, var29);
    org.jhotdraw.framework.HandleEnumeration var31 = var30.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var34 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var32, (org.jhotdraw.framework.FigureChangeListener)var33);
    org.jhotdraw.framework.Figure var35 = var21.replace((org.jhotdraw.framework.Figure)var30, (org.jhotdraw.framework.Figure)var32);
    java.lang.String var36 = var18.store(var20, (org.jhotdraw.framework.Drawing)var21);
    org.jhotdraw.framework.FigureEnumeration var37 = var21.figures();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.newWindow((org.jhotdraw.framework.Drawing)var21);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36.equals("hi!.draw"));

  }

  public void test129() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();

  }

  public void test130() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.framework.JHotDrawException var1 = new org.jhotdraw.framework.JHotDrawException(var0);

  }

  public void test131() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var7 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var8 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var6, (org.jhotdraw.framework.FigureChangeListener)var7);
    int var9 = var7.getZValue();
    java.lang.Object var10 = var7.clone();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test132() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.Float var1 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    java.awt.Container var4 = var2.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var5 = new org.jhotdraw.contrib.zoom.ZoomCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    org.jhotdraw.framework.DrawingEditor var6 = var5.getDrawingEditor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test133() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var1 = var0.handles();
    int var2 = 0;
    int var3 = 1;
    boolean var4 = var0.containsPoint(var2, var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test134() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.figures.NullConnector var21 = new org.jhotdraw.figures.NullConnector((org.jhotdraw.framework.Figure)var16);
    int var22 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var23 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var22);
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    boolean var27 = var23.remove((java.lang.Object)var24);
    org.jhotdraw.contrib.StandardLayouter var28 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var24);
    var16.setLayouter((org.jhotdraw.contrib.Layouter)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test135() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var1 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var2 = var1.handles();
    org.jhotdraw.framework.Figure var3 = var0.remove((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    var17.clearSelection();
    java.awt.Color var19 = var17.getForeground();
    var10.setBackground(var19);
    org.jhotdraw.framework.FigureEnumeration var21 = var10.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    java.awt.Color var37 = var35.getForeground();
    var28.setBackground(var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var28.selectionZOrdered();
    var10.addToSelectionAll(var39);
    var0.orphanAll(var39);
    java.lang.String var42 = "hi!";
    var0.setTitle(var42);
    int var44 = 0;
    int var45 = 10;
    boolean var46 = var0.containsPoint(var44, var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test136() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.util.Undoable var27 = var26.getUndoActivity();
    org.jhotdraw.framework.Cursor var28 = var26.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test137() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    javax.swing.KeyStroke[] var6 = var2.getRegisteredKeyStrokes();
    //gustavo//timeout exception

  }

  public void test138() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.requestFocus();
    java.lang.Boolean var9 = new java.lang.Boolean(false);
    var6.setDoubleBuffered(var9);
    org.jhotdraw.figures.PolyLineFigure var11 = new org.jhotdraw.figures.PolyLineFigure();
    boolean var12 = var6.isFigureSelected((org.jhotdraw.framework.Figure)var11);
    int var13 = 100;
    int var14 = 10;
    int var15 = var11.findSegment(var13, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));

  }

  public void test139() throws Throwable {

    org.jhotdraw.contrib.html.HTMLContentProducer var0 = new org.jhotdraw.contrib.html.HTMLContentProducer();
    int var1 = 100;
    int var2 = var0.getHTMLFontSizeEquivalent(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 7);

  }

  public void test140() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var7 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var8 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var6, (org.jhotdraw.framework.FigureChangeListener)var7);
    int var9 = var7.getZValue();
    java.lang.Object var10 = var7.clone();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var7);
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    var2.displayBox(var15, var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test141() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "";
    org.jhotdraw.framework.Drawing var3 = var0.restore(var2);
    org.jhotdraw.util.StandardStorageFormat var4 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var5 = "hi!";
    org.jhotdraw.standard.StandardDrawing var6 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var7 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var8 = var7.handles();
    org.jhotdraw.framework.Figure var9 = var6.remove((org.jhotdraw.framework.Figure)var7);
    java.lang.String var10 = var4.store(var5, (org.jhotdraw.framework.Drawing)var6);
    org.jhotdraw.util.StandardStorageFormat var11 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var12 = var11.getFileDescription();
    java.lang.String var13 = "hi!";
    org.jhotdraw.standard.StandardDrawing var14 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var15 = new java.lang.Double((-1.0d));
    java.lang.Double var16 = new java.lang.Double(100.0d);
    java.lang.Double var17 = new java.lang.Double(1.0d);
    java.awt.Point var18 = org.jhotdraw.util.Geom.polarToPoint(var15, var16, var17);
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    org.jhotdraw.contrib.DiamondFigure var23 = new org.jhotdraw.contrib.DiamondFigure(var18, var22);
    org.jhotdraw.framework.HandleEnumeration var24 = var23.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var27 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var25, (org.jhotdraw.framework.FigureChangeListener)var26);
    org.jhotdraw.framework.Figure var28 = var14.replace((org.jhotdraw.framework.Figure)var23, (org.jhotdraw.framework.Figure)var25);
    java.lang.String var29 = var11.store(var13, (org.jhotdraw.framework.Drawing)var14);
    java.lang.String var30 = "";
    var11.setFileExtension(var30);
    javax.swing.filechooser.FileFilter var32 = var11.getFileFilter();
    var4.setFileFilter(var32);
    var0.setFileFilter(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29.equals("hi!.draw"));

  }

  public void test142() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    org.jhotdraw.framework.Cursor var49 = var17.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test143() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    int var23 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var24 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var23);
    java.util.Iterator var25 = var24.iterator();
    var6.addToSelectionAll((java.util.Collection)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test144() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = "";
    var0.setApplicationName(var3);
    boolean var5 = var0.isActive();
    java.awt.MenuBar var6 = var0.getMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test145() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    int var44 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var34);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JMenu var47 = var45.createLookAndFeelMenu();
    java.lang.Character var48 = new java.lang.Character('a');
    var47.setMnemonic(var48);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    var56.clearSelection();
    var34.add((java.awt.Component)var47, (java.lang.Object)var56);
    int var59 = (-1);
    int var60 = var34.getComponentCountInLayer(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test146() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    int var8 = 0;
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var8, var9);
    org.jhotdraw.util.RedoCommand var11 = new org.jhotdraw.util.RedoCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    int var12 = 10;
    int var13 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var14 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var12, var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test147() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.endAnimation();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    java.lang.String var11 = var10.getUIClassID();
    java.awt.Insets var12 = var10.getInsets();
    int var13 = (-1);
    var7.setPosition((java.awt.Component)var10, var13);
    int var15 = var7.highestLayer();
    var7.disable();
    var0.setLayeredPane(var7);
    org.jhotdraw.contrib.html.DisposableResourceHolder var18 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.toolDone();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-30000));

  }

  public void test148() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.util.StandardStorageFormat var24 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var25 = var24.getFileDescription();
    java.lang.String var26 = "hi!";
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    org.jhotdraw.contrib.DiamondFigure var36 = new org.jhotdraw.contrib.DiamondFigure(var31, var35);
    org.jhotdraw.framework.HandleEnumeration var37 = var36.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    org.jhotdraw.framework.Figure var41 = var27.replace((org.jhotdraw.framework.Figure)var36, (org.jhotdraw.framework.Figure)var38);
    java.lang.String var42 = var24.store(var26, (org.jhotdraw.framework.Drawing)var27);
    org.jhotdraw.framework.FigureEnumeration var43 = var27.figures();
    var17.orphanAll(var43);
    org.jhotdraw.framework.FigureEnumeration var45 = var17.figures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("hi!.draw"));

  }

  public void test149() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    java.awt.Dimension var6 = var3.size();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var7 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var3);
    org.jhotdraw.figures.TextFigure var8 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var9 = var8.textDisplayBox();
    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var10 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    java.awt.Insets var11 = var10.connectionInsets();
    org.jhotdraw.framework.Figure var12 = var3.findFigure(var9, (org.jhotdraw.framework.Figure)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test150() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.util.Undoable var27 = var26.getUndoActivity();
    java.awt.Rectangle var28 = var26.displayBox();
    java.awt.Point var29 = var26.locate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test151() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    org.jhotdraw.figures.ScribbleTool var18 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test152() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var1 = var0.textDisplayBox();
    int var2 = var0.overlayColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 20);

  }

  public void test153() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    int var18 = 100;
    int var19 = (-1);
    int var20 = 10;
    int var21 = 0;
    int var22 = 100;
    int var23 = (-1);
    int var24 = 1;
    int var25 = 1;
    java.awt.Point var26 = org.jhotdraw.util.Geom.intersect(var18, var19, var20, var21, var22, var23, var24, var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.setOriginPosition(var26);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test154() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var6.selectionZOrdered();
    java.awt.dnd.DragSourceListener var18 = var6.getDragSourceListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == null);

  }

  public void test155() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    boolean var10 = var8.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    int var14 = var12.getZValue();
    java.lang.Object var15 = var12.clone();
    org.jhotdraw.standard.CreationTool var16 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var8, (org.jhotdraw.framework.Figure)var12);
    java.lang.String var17 = "hi!";
    java.lang.String var18 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    java.awt.Graphics var23 = var19.getGraphics();
    java.lang.Boolean var24 = new java.lang.Boolean(true);
    var19.setLocationByPlatform(var24);
    org.jhotdraw.standard.StandardDrawing var26 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    java.lang.Double var31 = new java.lang.Double((-1.0d));
    java.lang.Double var32 = new java.lang.Double(100.0d);
    java.lang.Double var33 = new java.lang.Double(1.0d);
    java.awt.Point var34 = org.jhotdraw.util.Geom.polarToPoint(var31, var32, var33);
    org.jhotdraw.contrib.DiamondFigure var35 = new org.jhotdraw.contrib.DiamondFigure(var30, var34);
    org.jhotdraw.framework.HandleEnumeration var36 = var35.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    org.jhotdraw.framework.Figure var40 = var26.replace((org.jhotdraw.framework.Figure)var35, (org.jhotdraw.framework.Figure)var37);
    org.jhotdraw.framework.Handle var41 = org.jhotdraw.standard.BoxHandleKit.north(var40);
    org.jhotdraw.standard.HandleTracker var42 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var19, var41);
    org.jhotdraw.standard.ToolButton var43 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var8, var17, var18, (org.jhotdraw.framework.Tool)var42);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var44 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var44.start();
    org.jhotdraw.framework.Tool var46 = var44.tool();
    java.awt.FocusTraversalPolicy var47 = var44.getFocusTraversalPolicy();
    var43.setFocusTraversalPolicy(var47);
    java.lang.Boolean var49 = new java.lang.Boolean(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.paletteUserOver((org.jhotdraw.util.PaletteButton)var43, var49);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test156() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    org.jhotdraw.framework.Tool var89 = var35.tool();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test157() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    int var10 = 100;
    int var11 = (-1);
    int var12 = (-1);
    int var13 = (-1);
    var2.reshape(var10, var11, var12, var13);
    boolean var15 = var2.isContentAreaFilled();
    javax.swing.InputVerifier var16 = var2.getInputVerifier();
    javax.swing.KeyStroke var17 = var2.getAccelerator();
    int var18 = var2.getMnemonic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 65);

  }

  public void test158() throws Throwable {

    org.jhotdraw.contrib.html.HTMLLayouter var0 = new org.jhotdraw.contrib.html.HTMLLayouter();

  }

  public void test159() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));

  }

  public void test160() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.StandardLayouter var6 = new org.jhotdraw.contrib.StandardLayouter((org.jhotdraw.contrib.Layoutable)var2);
    java.awt.Insets var7 = var6.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test161() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    int var7 = 100;
    int var8 = 0;
    int var9 = 0;
    int var10 = 10;
    var2.reshape(var7, var8, var9, var10);
    org.jhotdraw.standard.StandardDrawing var12 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var13 = new java.lang.Double((-1.0d));
    java.lang.Double var14 = new java.lang.Double(100.0d);
    java.lang.Double var15 = new java.lang.Double(1.0d);
    java.awt.Point var16 = org.jhotdraw.util.Geom.polarToPoint(var13, var14, var15);
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.lang.Double var18 = new java.lang.Double(100.0d);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.awt.Point var20 = org.jhotdraw.util.Geom.polarToPoint(var17, var18, var19);
    org.jhotdraw.contrib.DiamondFigure var21 = new org.jhotdraw.contrib.DiamondFigure(var16, var20);
    org.jhotdraw.framework.HandleEnumeration var22 = var21.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    org.jhotdraw.framework.Figure var26 = var12.replace((org.jhotdraw.framework.Figure)var21, (org.jhotdraw.framework.Figure)var23);
    org.jhotdraw.framework.Handle var27 = org.jhotdraw.standard.BoxHandleKit.north(var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    var34.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var36 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var34.removeForeground((org.jhotdraw.framework.Painter)var36);
    org.jhotdraw.util.UndoableHandle var38 = new org.jhotdraw.util.UndoableHandle(var27, (org.jhotdraw.framework.DrawingView)var34);
    org.jhotdraw.util.Undoable var39 = var38.getUndoActivity();
    java.awt.Rectangle var40 = var38.displayBox();
    var2.computeVisibleRect(var40);
    java.lang.Double var42 = new java.lang.Double(10.0d);
    java.awt.Point var43 = org.jhotdraw.util.Geom.angleToPoint(var40, var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test162() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    java.lang.String var12 = "";
    int var13 = 100;
    var10.insert(var12, var13);
    int var15 = 100;
    int var16 = 0;
    int var17 = 0;
    int var18 = 10;
    var10.reshape(var15, var16, var17, var18);
    org.jhotdraw.standard.StandardDrawing var20 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    org.jhotdraw.contrib.DiamondFigure var29 = new org.jhotdraw.contrib.DiamondFigure(var24, var28);
    org.jhotdraw.framework.HandleEnumeration var30 = var29.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var32 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var33 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var31, (org.jhotdraw.framework.FigureChangeListener)var32);
    org.jhotdraw.framework.Figure var34 = var20.replace((org.jhotdraw.framework.Figure)var29, (org.jhotdraw.framework.Figure)var31);
    org.jhotdraw.framework.Handle var35 = org.jhotdraw.standard.BoxHandleKit.north(var34);
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    int var40 = (-1);
    int var41 = 0;
    org.jhotdraw.standard.StandardDrawingView var42 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var36, var40, var41);
    var42.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var44 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var42.removeForeground((org.jhotdraw.framework.Painter)var44);
    org.jhotdraw.util.UndoableHandle var46 = new org.jhotdraw.util.UndoableHandle(var35, (org.jhotdraw.framework.DrawingView)var42);
    org.jhotdraw.util.Undoable var47 = var46.getUndoActivity();
    java.awt.Rectangle var48 = var46.displayBox();
    var10.computeVisibleRect(var48);
    java.lang.Double var50 = new java.lang.Double(10.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.angleToPoint(var48, var50);
    org.jhotdraw.standard.ToggleGridCommand var52 = new org.jhotdraw.standard.ToggleGridCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1, var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test163() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    org.jhotdraw.figures.LineDecoration var2 = var0.getStartDecoration();
    int var3 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removePointAt(var3);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test164() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test165() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var1 = var0.getObservedFigure();
    org.jhotdraw.framework.Figure var2 = var0.getRepresentingFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test166() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var1 = var0.getObservedFigure();
    org.jhotdraw.standard.TextHolder var2 = var0.getTextHolder();
    int var3 = var0.overlayColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 20);

  }

  public void test167() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    org.jhotdraw.util.Command var25 = var18.getCommand();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);

  }

  public void test168() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    java.awt.Color var1 = var0.getFillColor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test169() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.standard.StandardDrawing var31 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    java.lang.Double var36 = new java.lang.Double((-1.0d));
    java.lang.Double var37 = new java.lang.Double(100.0d);
    java.lang.Double var38 = new java.lang.Double(1.0d);
    java.awt.Point var39 = org.jhotdraw.util.Geom.polarToPoint(var36, var37, var38);
    org.jhotdraw.contrib.DiamondFigure var40 = new org.jhotdraw.contrib.DiamondFigure(var35, var39);
    org.jhotdraw.framework.HandleEnumeration var41 = var40.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var43 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var44 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var42, (org.jhotdraw.framework.FigureChangeListener)var43);
    org.jhotdraw.framework.Figure var45 = var31.replace((org.jhotdraw.framework.Figure)var40, (org.jhotdraw.framework.Figure)var42);
    java.util.Iterator var46 = var31.drawingChangeListeners();
    org.jhotdraw.figures.ArrowTip var47 = new org.jhotdraw.figures.ArrowTip();
    int var48 = 1;
    int var49 = 1;
    int var50 = 10;
    int var51 = 0;
    java.awt.Polygon var52 = var47.outline(var48, var49, var50, var51);
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    var59.clearSelection();
    java.awt.Color var61 = var59.getForeground();
    var47.setFillColor(var61);
    java.awt.Rectangle var63 = var47.displayBox();
    var31.init(var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var18.newWindow((org.jhotdraw.framework.Drawing)var31);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test170() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var10 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var10.start();
    org.jhotdraw.framework.Tool var12 = var10.tool();
    var10.transferFocus();
    var9.addFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test171() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.awt.dnd.DragSourceListener var14 = var10.getDragSourceListener();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var16 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var18 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var17);
    var15.addDependendFigure((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.framework.Handle var20 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var17);
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test172() throws Throwable {

    org.jhotdraw.figures.EllipseFigure var0 = new org.jhotdraw.figures.EllipseFigure();
    org.jhotdraw.framework.FigureEnumeration var1 = var0.figures();

  }

  public void test173() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var6 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter(var5);
    int var7 = 100;
    int var8 = (-1);
    int var9 = 10;
    int var10 = 0;
    int var11 = 100;
    int var12 = (-1);
    int var13 = 1;
    int var14 = 1;
    java.awt.Point var15 = org.jhotdraw.util.Geom.intersect(var7, var8, var9, var10, var11, var12, var13, var14);
    int var16 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.insertPointAt(var15, var16);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test174() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    java.awt.Color var14 = var12.getForeground();
    var0.setFillColor(var14);
    java.awt.Rectangle var16 = var0.displayBox();
    org.jhotdraw.samples.javadraw.JavaDrawApplet var17 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var17.start();
    java.awt.Color var19 = var17.getForeground();
    var0.setBorderColor(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test175() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    org.jhotdraw.contrib.html.DisposableResourceHolder var9 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var8);
    java.lang.Object var10 = var9.getResource();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test176() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = var2.getLabel();
    java.lang.Boolean var5 = new java.lang.Boolean(false);
    var2.setContentAreaFilled(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.equals("Look'n'Feel"));

  }

  public void test177() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    org.jhotdraw.standard.StandardDrawing var4 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    java.lang.Double var9 = new java.lang.Double((-1.0d));
    java.lang.Double var10 = new java.lang.Double(100.0d);
    java.lang.Double var11 = new java.lang.Double(1.0d);
    java.awt.Point var12 = org.jhotdraw.util.Geom.polarToPoint(var9, var10, var11);
    org.jhotdraw.contrib.DiamondFigure var13 = new org.jhotdraw.contrib.DiamondFigure(var8, var12);
    org.jhotdraw.framework.HandleEnumeration var14 = var13.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var17 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var15, (org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.Figure var18 = var4.replace((org.jhotdraw.framework.Figure)var13, (org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.framework.Handle var19 = org.jhotdraw.standard.BoxHandleKit.north(var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var28 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var26.removeForeground((org.jhotdraw.framework.Painter)var28);
    org.jhotdraw.util.UndoableHandle var30 = new org.jhotdraw.util.UndoableHandle(var19, (org.jhotdraw.framework.DrawingView)var26);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    var44.clearSelection();
    java.awt.Color var46 = var44.getForeground();
    var37.setBackground(var46);
    org.jhotdraw.framework.FigureEnumeration var48 = var37.selectionZOrdered();
    var48.reset();
    var26.addToSelectionAll(var48);
    java.lang.Double var51 = new java.lang.Double((-1.0d));
    java.lang.Double var52 = new java.lang.Double(100.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    java.awt.Point var54 = org.jhotdraw.util.Geom.polarToPoint(var51, var52, var53);
    java.awt.Point var55 = var26.getLocation(var54);
    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var56 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter(var3, var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test178() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    java.awt.Color var8 = var6.getForeground();
    org.jhotdraw.framework.Tool var9 = var6.tool();
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    int var18 = 0;
    int var19 = 0;
    org.jhotdraw.standard.StandardDrawingView var20 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var18, var19);
    org.jhotdraw.util.RedoCommand var21 = new org.jhotdraw.util.RedoCommand(var10, (org.jhotdraw.framework.DrawingEditor)var11);
    int var22 = var6.getComponentZOrder((java.awt.Component)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));

  }

  public void test179() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.contrib.DiamondFigure var8 = new org.jhotdraw.contrib.DiamondFigure(var3, var7);
    org.jhotdraw.framework.HandleEnumeration var9 = var8.handles();
    java.awt.Rectangle var10 = var8.displayBox();

  }

  public void test180() throws Throwable {

    org.jhotdraw.figures.ShortestDistanceConnector var0 = new org.jhotdraw.figures.ShortestDistanceConnector();
    int var1 = (-1);
    int var2 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var3 = var0.containsPoint(var1, var2);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test181() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var1 = "";
    var0.setText(var1);
    org.jhotdraw.contrib.html.TextHolderContentProducer var3 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var0);

  }

  public void test182() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    int var27 = (-1);
    int var28 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    java.awt.Component var40 = var29.add((java.awt.Component)var39);
    boolean var41 = var39.getInheritsPopupMenu();
    javax.swing.InputMap var42 = var39.getInputMap();
    var26.invokeStart(var27, var28, (org.jhotdraw.framework.DrawingView)var39);
    java.awt.event.ComponentListener[] var44 = var39.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test183() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.layout();
    int var9 = var6.getHeight();
    var6.clearSelection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test184() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    int var55 = 1;
    int var56 = 1;
    org.jhotdraw.contrib.PolygonFigure var57 = new org.jhotdraw.contrib.PolygonFigure(var55, var56);
    org.jhotdraw.framework.FigureEnumeration var58 = var57.figures();
    java.awt.Rectangle var59 = var57.displayBox();
    org.jhotdraw.util.Bounds var60 = new org.jhotdraw.util.Bounds((java.awt.geom.Rectangle2D)var59);
    boolean var61 = var54.intersectsBounds(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test185() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    java.awt.FocusTraversalPolicy var3 = var0.getFocusTraversalPolicy();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var6 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var4, (org.jhotdraw.framework.FigureChangeListener)var5);
    java.awt.Dimension var7 = var4.size();
    var0.resize(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test186() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var1 = "";
    var0.setText(var1);
    org.jhotdraw.figures.TextFigure var3 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var4 = var3.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var5 = new org.jhotdraw.standard.StandardDrawing();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    int var11 = 1;
    int var12 = 1;
    org.jhotdraw.contrib.PolygonFigure var13 = new org.jhotdraw.contrib.PolygonFigure(var11, var12);
    org.jhotdraw.framework.FigureEnumeration var14 = var13.figures();
    java.awt.Rectangle var15 = var13.displayBox();
    org.jhotdraw.framework.Figure var16 = var5.findFigure(var10, (org.jhotdraw.framework.Figure)var13);
    int var17 = 100;
    int var18 = (-1);
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.Figure var28 = var5.findFigureInsideWithout(var17, var18, (org.jhotdraw.framework.Figure)var27);
    java.util.Iterator var29 = var5.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    java.awt.Component var41 = var30.add((java.awt.Component)var40);
    boolean var42 = var40.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var43 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var44 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var45 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var43, (org.jhotdraw.framework.FigureChangeListener)var44);
    java.awt.Dimension var46 = var43.size();
    var40.removeFromSelection((org.jhotdraw.framework.Figure)var43);
    var43.layout();
    java.lang.Object var49 = var43.clone();
    org.jhotdraw.framework.FigureChangeEvent var50 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var43);
    var5.figureRequestUpdate(var50);
    java.awt.Rectangle var52 = var50.getInvalidatedRectangle();
    var3.figureRequestUpdate(var50);
    var0.figureRequestUpdate(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test187() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    int var44 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var34);
    java.lang.String var45 = "hi!";
    java.lang.Short var46 = new java.lang.Short((short)0);
    java.lang.Short var47 = new java.lang.Short((short)(-1));
    var34.firePropertyChange(var45, var46, var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test188() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    org.jhotdraw.util.UndoableAdapter var47 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test189() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    org.jhotdraw.framework.DrawingView var9 = var8.getDrawingView();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test190() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    boolean var22 = var16.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test191() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    org.jhotdraw.contrib.html.DisposableResourceHolder var9 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var8);
    boolean var10 = var8.undo();
    org.jhotdraw.framework.FigureEnumeration var11 = var8.getAffectedFigures();
    java.lang.Boolean var12 = new java.lang.Boolean(true);
    var8.setUndoable(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test192() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    org.jhotdraw.figures.TextFigure var2 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var2);
    var0.setResource((java.lang.Object)var2);

  }

  public void test193() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    int var10 = 100;
    int var11 = (-1);
    int var12 = (-1);
    int var13 = (-1);
    var2.reshape(var10, var11, var12, var13);
    boolean var15 = var2.isContentAreaFilled();
    javax.swing.InputVerifier var16 = var2.getInputVerifier();
    int var17 = 0;
    org.jhotdraw.util.PaletteLayout var18 = new org.jhotdraw.util.PaletteLayout(var17);
    var2.setLayout((java.awt.LayoutManager)var18);
    javax.swing.JRootPane var20 = var2.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);

  }

  public void test194() throws Throwable {

    int var0 = 100;
    int var1 = 10;
    org.jhotdraw.figures.PolyLineFigure var2 = new org.jhotdraw.figures.PolyLineFigure(var0, var1);

  }

  public void test195() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    var10.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test196() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    var10.repaint();
    int var14 = var10.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test197() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.String var13 = "";
    java.lang.Character var14 = new java.lang.Character(' ');
    org.jhotdraw.contrib.html.DisposableResourceHolder var15 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var14);
    var2.setAttribute(var13, (java.lang.Object)var15);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    var23.clearSelection();
    org.jhotdraw.util.UndoableAdapter var25 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var23);
    org.jhotdraw.contrib.html.DisposableResourceHolder var26 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var25);
    boolean var27 = var25.undo();
    org.jhotdraw.framework.DrawingView var28 = var25.getDrawingView();
    var15.setResource((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test198() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    var11.layout();

  }

  public void test199() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    javax.swing.plaf.ButtonUI var8 = var2.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test200() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var1 = "";
    var0.setText(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var4 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var3);
    org.jhotdraw.standard.StandardDrawing var5 = new org.jhotdraw.standard.StandardDrawing();
    int var6 = var3.getLayer((org.jhotdraw.framework.Figure)var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    java.awt.Component var18 = var7.add((java.awt.Component)var17);
    boolean var19 = var17.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    java.awt.Dimension var23 = var20.size();
    var17.removeFromSelection((org.jhotdraw.framework.Figure)var20);
    var20.layout();
    java.lang.Object var26 = var20.clone();
    org.jhotdraw.framework.FigureChangeEvent var27 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var20);
    java.lang.Object var28 = var27.getSource();
    var5.figureInvalidated(var27);
    var0.figureChanged(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test201() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    boolean var14 = var10.getAutoscrolls();
    int var15 = 100;
    int var16 = (-1);
    var10.setLocation(var15, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test202() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    int var44 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var34);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JMenu var47 = var45.createLookAndFeelMenu();
    java.lang.Character var48 = new java.lang.Character('a');
    var47.setMnemonic(var48);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    var56.clearSelection();
    var34.add((java.awt.Component)var47, (java.lang.Object)var56);
    org.jhotdraw.standard.StandardDrawing var59 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.lang.Double var64 = new java.lang.Double((-1.0d));
    java.lang.Double var65 = new java.lang.Double(100.0d);
    java.lang.Double var66 = new java.lang.Double(1.0d);
    java.awt.Point var67 = org.jhotdraw.util.Geom.polarToPoint(var64, var65, var66);
    org.jhotdraw.contrib.DiamondFigure var68 = new org.jhotdraw.contrib.DiamondFigure(var63, var67);
    org.jhotdraw.framework.HandleEnumeration var69 = var68.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    org.jhotdraw.framework.Figure var73 = var59.replace((org.jhotdraw.framework.Figure)var68, (org.jhotdraw.framework.Figure)var70);
    org.jhotdraw.framework.Handle var74 = org.jhotdraw.standard.BoxHandleKit.north(var73);
    org.jhotdraw.contrib.MDI_DrawApplication var75 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var76 = var75.isDoubleBuffered();
    javax.swing.JRootPane var77 = var75.getRootPane();
    javax.swing.JLayeredPane var78 = var75.getLayeredPane();
    int var79 = (-1);
    int var80 = 0;
    org.jhotdraw.standard.StandardDrawingView var81 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var75, var79, var80);
    var81.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var83 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var81.removeForeground((org.jhotdraw.framework.Painter)var83);
    org.jhotdraw.util.UndoableHandle var85 = new org.jhotdraw.util.UndoableHandle(var74, (org.jhotdraw.framework.DrawingView)var81);
    java.lang.Object var86 = var47.getClientProperty((java.lang.Object)var81);
    var47.addSeparator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == null);

  }

  public void test203() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test204() throws Throwable {

    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    java.awt.Insets var1 = var0.connectionInsets();
    org.jhotdraw.framework.HandleEnumeration var2 = var0.handles();
    var0.release();
    org.jhotdraw.figures.ShortestDistanceConnector var4 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var0);

  }

  public void test205() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    int var13 = 0;
    var3.setLayer((java.awt.Component)var11, var13);
    java.awt.event.WindowStateListener[] var15 = var11.getWindowStateListeners();
    boolean var16 = var11.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test206() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    int var7 = 100;
    int var8 = 0;
    int var9 = 0;
    int var10 = 10;
    var2.reshape(var7, var8, var9, var10);
    org.jhotdraw.standard.StandardDrawing var12 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var13 = new java.lang.Double((-1.0d));
    java.lang.Double var14 = new java.lang.Double(100.0d);
    java.lang.Double var15 = new java.lang.Double(1.0d);
    java.awt.Point var16 = org.jhotdraw.util.Geom.polarToPoint(var13, var14, var15);
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.lang.Double var18 = new java.lang.Double(100.0d);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.awt.Point var20 = org.jhotdraw.util.Geom.polarToPoint(var17, var18, var19);
    org.jhotdraw.contrib.DiamondFigure var21 = new org.jhotdraw.contrib.DiamondFigure(var16, var20);
    org.jhotdraw.framework.HandleEnumeration var22 = var21.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var23 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var25 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var23, (org.jhotdraw.framework.FigureChangeListener)var24);
    org.jhotdraw.framework.Figure var26 = var12.replace((org.jhotdraw.framework.Figure)var21, (org.jhotdraw.framework.Figure)var23);
    org.jhotdraw.framework.Handle var27 = org.jhotdraw.standard.BoxHandleKit.north(var26);
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    var34.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var36 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var34.removeForeground((org.jhotdraw.framework.Painter)var36);
    org.jhotdraw.util.UndoableHandle var38 = new org.jhotdraw.util.UndoableHandle(var27, (org.jhotdraw.framework.DrawingView)var34);
    org.jhotdraw.util.Undoable var39 = var38.getUndoActivity();
    java.awt.Rectangle var40 = var38.displayBox();
    var2.computeVisibleRect(var40);
    java.lang.Double var42 = new java.lang.Double(10.0d);
    java.awt.Point var43 = org.jhotdraw.util.Geom.angleToPoint(var40, var42);
    java.lang.Double var44 = new java.lang.Double((-1.0d));
    java.lang.Double var45 = new java.lang.Double(100.0d);
    java.lang.Double var46 = new java.lang.Double(1.0d);
    java.awt.Point var47 = org.jhotdraw.util.Geom.polarToPoint(var44, var45, var46);
    org.jhotdraw.contrib.DiamondFigure var48 = new org.jhotdraw.contrib.DiamondFigure(var43, var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test207() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    org.jhotdraw.standard.StandardDrawing var4 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    java.lang.Double var9 = new java.lang.Double((-1.0d));
    java.lang.Double var10 = new java.lang.Double(100.0d);
    java.lang.Double var11 = new java.lang.Double(1.0d);
    java.awt.Point var12 = org.jhotdraw.util.Geom.polarToPoint(var9, var10, var11);
    org.jhotdraw.contrib.DiamondFigure var13 = new org.jhotdraw.contrib.DiamondFigure(var8, var12);
    org.jhotdraw.framework.HandleEnumeration var14 = var13.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var17 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var15, (org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.Figure var18 = var4.replace((org.jhotdraw.framework.Figure)var13, (org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.framework.Handle var19 = org.jhotdraw.standard.BoxHandleKit.north(var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var28 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var26.removeForeground((org.jhotdraw.framework.Painter)var28);
    org.jhotdraw.util.UndoableHandle var30 = new org.jhotdraw.util.UndoableHandle(var19, (org.jhotdraw.framework.DrawingView)var26);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    var44.clearSelection();
    java.awt.Color var46 = var44.getForeground();
    var37.setBackground(var46);
    org.jhotdraw.framework.FigureEnumeration var48 = var37.selectionZOrdered();
    var48.reset();
    var26.addToSelectionAll(var48);
    java.lang.Double var51 = new java.lang.Double((-1.0d));
    java.lang.Double var52 = new java.lang.Double(100.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    java.awt.Point var54 = org.jhotdraw.util.Geom.polarToPoint(var51, var52, var53);
    java.awt.Point var55 = var26.getLocation(var54);
    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var56 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter(var3, var55);
    var56.release();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test208() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var1 = "";
    var0.setText(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var4 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var3);
    org.jhotdraw.standard.StandardDrawing var5 = new org.jhotdraw.standard.StandardDrawing();
    int var6 = var3.getLayer((org.jhotdraw.framework.Figure)var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    java.awt.Component var18 = var7.add((java.awt.Component)var17);
    boolean var19 = var17.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    java.awt.Dimension var23 = var20.size();
    var17.removeFromSelection((org.jhotdraw.framework.Figure)var20);
    var20.layout();
    java.lang.Object var26 = var20.clone();
    org.jhotdraw.framework.FigureChangeEvent var27 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var20);
    java.lang.Object var28 = var27.getSource();
    var5.figureInvalidated(var27);
    var0.figureChanged(var27);
    boolean var31 = var0.isSizeDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test209() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    boolean var2 = var0.isTextDirty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test210() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    var13.layout();
    java.lang.String var19 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    java.lang.String var23 = var22.getUIClassID();
    var13.setAttribute(var19, (java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23.equals("RootPaneUI"));

  }

  public void test211() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);

  }

  public void test212() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.Boolean var9 = new java.lang.Boolean(false);
    var0.setFocusTraversalPolicyProvider(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test213() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.HandleEnumeration var21 = var0.handles();

  }

  public void test214() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    int var3 = 0;
    var2.removeAllFromDesktop(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test215() throws Throwable {

    org.jhotdraw.contrib.FloatingTextArea var0 = new org.jhotdraw.contrib.FloatingTextArea();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.endOverlay();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test216() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    boolean var8 = var7.isManagingFocus();
    javax.accessibility.AccessibleContext var9 = var7.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test217() throws Throwable {

    org.jhotdraw.contrib.html.HTMLLayouter var0 = new org.jhotdraw.contrib.html.HTMLLayouter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Insets var1 = var0.getInsets();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }

  }

  public void test218() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    org.jhotdraw.framework.DrawingView var44 = org.jhotdraw.contrib.Helper.getDrawingView((java.awt.Container)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == null);

  }

  public void test219() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    var0.toFront();
    var0.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test220() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.util.collections.jdk11.ListWrapper var6 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var1);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JMenu var9 = var7.createLookAndFeelMenu();
    var7.open();
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    java.awt.Component var22 = var11.add((java.awt.Component)var21);
    boolean var23 = var21.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    java.awt.Dimension var27 = var24.size();
    var21.removeFromSelection((org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    java.awt.Component var40 = var29.add((java.awt.Component)var39);
    var21.setEditor((org.jhotdraw.framework.DrawingEditor)var29);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    java.lang.String var49 = var48.getUIClassID();
    java.awt.Insets var50 = var48.getInsets();
    int var51 = (-1);
    var45.setPosition((java.awt.Component)var48, var51);
    boolean var53 = var45.isDisplayable();
    boolean var54 = var21.isFocusCycleRoot((java.awt.Container)var45);
    var7.setLayeredPane(var45);
    boolean var56 = var6.remove((java.lang.Object)var45);
    org.jhotdraw.util.collections.jdk11.SetWrapper var57 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    boolean var58 = var6.containsAll((java.util.Collection)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test221() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    var35.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test222() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var10.setMinimumSize(var40);
    java.lang.Boolean var42 = new java.lang.Boolean(true);
    var10.setLocationByPlatform(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test223() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    java.awt.Dimension var6 = var3.size();
    var2.setPreferredSize(var6);
    int var8 = 0;
    var2.setHorizontalTextPosition(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test224() throws Throwable {

    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    double var1 = var0.getRotationAngle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.5707963267948966d));

  }

  public void test225() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = "hi!";
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var3 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var4 = var3.handles();
    org.jhotdraw.framework.Figure var5 = var2.remove((org.jhotdraw.framework.Figure)var3);
    java.lang.String var6 = var0.store(var1, (org.jhotdraw.framework.Drawing)var2);
    boolean var7 = var0.isRestoreFormat();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test226() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "hi!";
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    java.lang.String var18 = var0.store(var2, (org.jhotdraw.framework.Drawing)var3);
    java.lang.String var19 = "";
    var0.setFileExtension(var19);
    javax.swing.filechooser.FileFilter var21 = var0.getFileFilter();
    java.lang.String var22 = "hi!";
    org.jhotdraw.framework.Drawing var23 = var0.restore(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);

  }

  public void test227() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    int var55 = (-1);
    int var56 = 10;
    var54.shiftBy(var55, var56);
    double var58 = var54.getWest();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-5.1d));

  }

  public void test228() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    boolean var15 = var13.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    int var19 = var17.getZValue();
    java.lang.Object var20 = var17.clone();
    org.jhotdraw.standard.CreationTool var21 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var13, (org.jhotdraw.framework.Figure)var17);
    java.lang.String var22 = "hi!";
    java.lang.String var23 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    java.awt.Graphics var28 = var24.getGraphics();
    java.lang.Boolean var29 = new java.lang.Boolean(true);
    var24.setLocationByPlatform(var29);
    org.jhotdraw.standard.StandardDrawing var31 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    java.lang.Double var36 = new java.lang.Double((-1.0d));
    java.lang.Double var37 = new java.lang.Double(100.0d);
    java.lang.Double var38 = new java.lang.Double(1.0d);
    java.awt.Point var39 = org.jhotdraw.util.Geom.polarToPoint(var36, var37, var38);
    org.jhotdraw.contrib.DiamondFigure var40 = new org.jhotdraw.contrib.DiamondFigure(var35, var39);
    org.jhotdraw.framework.HandleEnumeration var41 = var40.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var43 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var44 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var42, (org.jhotdraw.framework.FigureChangeListener)var43);
    org.jhotdraw.framework.Figure var45 = var31.replace((org.jhotdraw.framework.Figure)var40, (org.jhotdraw.framework.Figure)var42);
    org.jhotdraw.framework.Handle var46 = org.jhotdraw.standard.BoxHandleKit.north(var45);
    org.jhotdraw.standard.HandleTracker var47 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var24, var46);
    org.jhotdraw.standard.ToolButton var48 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var13, var22, var23, (org.jhotdraw.framework.Tool)var47);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var49 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var49.start();
    org.jhotdraw.framework.Tool var51 = var49.tool();
    java.awt.FocusTraversalPolicy var52 = var49.getFocusTraversalPolicy();
    var48.setFocusTraversalPolicy(var52);
    var10.removeMouseMotionListener((java.awt.event.MouseMotionListener)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test229() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    int var13 = 0;
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var13, var14);
    java.awt.Color var16 = var6.getBackground();
    var0.setFillColor(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test230() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureEnumeration var17 = var6.selectionZOrdered();
    var17.reset();
    int var19 = 100;
    org.jhotdraw.standard.StandardFigureSelection var20 = new org.jhotdraw.standard.StandardFigureSelection(var17, var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test231() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    org.jhotdraw.contrib.html.DisposableResourceHolder var9 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var8);
    boolean var10 = var8.isRedoable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test232() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    org.jhotdraw.samples.javadraw.JavaDrawApplet var3 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var3.start();
    var0.remove((java.awt.Component)var3);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    boolean var8 = var6.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var9 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var10 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var9, (org.jhotdraw.framework.FigureChangeListener)var10);
    int var12 = var10.getZValue();
    java.lang.Object var13 = var10.clone();
    org.jhotdraw.standard.CreationTool var14 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var6, (org.jhotdraw.framework.Figure)var10);
    java.lang.String var15 = "hi!";
    java.lang.String var16 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    java.awt.Graphics var21 = var17.getGraphics();
    java.lang.Boolean var22 = new java.lang.Boolean(true);
    var17.setLocationByPlatform(var22);
    org.jhotdraw.standard.StandardDrawing var24 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var25 = new java.lang.Double((-1.0d));
    java.lang.Double var26 = new java.lang.Double(100.0d);
    java.lang.Double var27 = new java.lang.Double(1.0d);
    java.awt.Point var28 = org.jhotdraw.util.Geom.polarToPoint(var25, var26, var27);
    java.lang.Double var29 = new java.lang.Double((-1.0d));
    java.lang.Double var30 = new java.lang.Double(100.0d);
    java.lang.Double var31 = new java.lang.Double(1.0d);
    java.awt.Point var32 = org.jhotdraw.util.Geom.polarToPoint(var29, var30, var31);
    org.jhotdraw.contrib.DiamondFigure var33 = new org.jhotdraw.contrib.DiamondFigure(var28, var32);
    org.jhotdraw.framework.HandleEnumeration var34 = var33.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var37 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var35, (org.jhotdraw.framework.FigureChangeListener)var36);
    org.jhotdraw.framework.Figure var38 = var24.replace((org.jhotdraw.framework.Figure)var33, (org.jhotdraw.framework.Figure)var35);
    org.jhotdraw.framework.Handle var39 = org.jhotdraw.standard.BoxHandleKit.north(var38);
    org.jhotdraw.standard.HandleTracker var40 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var17, var39);
    org.jhotdraw.standard.ToolButton var41 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var6, var15, var16, (org.jhotdraw.framework.Tool)var40);
    org.jhotdraw.figures.TextFigure var42 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var43 = var42.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var44 = new org.jhotdraw.standard.StandardDrawing();
    int var45 = 1;
    int var46 = 1;
    org.jhotdraw.contrib.PolygonFigure var47 = new org.jhotdraw.contrib.PolygonFigure(var45, var46);
    org.jhotdraw.framework.FigureEnumeration var48 = var47.figures();
    java.awt.Rectangle var49 = var47.displayBox();
    int var50 = 1;
    int var51 = 1;
    org.jhotdraw.contrib.PolygonFigure var52 = new org.jhotdraw.contrib.PolygonFigure(var50, var51);
    org.jhotdraw.framework.FigureEnumeration var53 = var52.figures();
    java.awt.Rectangle var54 = var52.displayBox();
    org.jhotdraw.framework.Figure var55 = var44.findFigure(var49, (org.jhotdraw.framework.Figure)var52);
    int var56 = 100;
    int var57 = (-1);
    java.lang.Double var58 = new java.lang.Double((-1.0d));
    java.lang.Double var59 = new java.lang.Double(100.0d);
    java.lang.Double var60 = new java.lang.Double(1.0d);
    java.awt.Point var61 = org.jhotdraw.util.Geom.polarToPoint(var58, var59, var60);
    java.lang.Double var62 = new java.lang.Double((-1.0d));
    java.lang.Double var63 = new java.lang.Double(100.0d);
    java.lang.Double var64 = new java.lang.Double(1.0d);
    java.awt.Point var65 = org.jhotdraw.util.Geom.polarToPoint(var62, var63, var64);
    org.jhotdraw.contrib.DiamondFigure var66 = new org.jhotdraw.contrib.DiamondFigure(var61, var65);
    org.jhotdraw.framework.Figure var67 = var44.findFigureInsideWithout(var56, var57, (org.jhotdraw.framework.Figure)var66);
    java.util.Iterator var68 = var44.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var69 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var70 = var69.isDoubleBuffered();
    javax.swing.JRootPane var71 = var69.getRootPane();
    javax.swing.JLayeredPane var72 = var69.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var73 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var74 = var73.isDoubleBuffered();
    javax.swing.JRootPane var75 = var73.getRootPane();
    javax.swing.JLayeredPane var76 = var73.getLayeredPane();
    int var77 = (-1);
    int var78 = 0;
    org.jhotdraw.standard.StandardDrawingView var79 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var73, var77, var78);
    java.awt.Component var80 = var69.add((java.awt.Component)var79);
    boolean var81 = var79.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var82 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var83 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var84 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var82, (org.jhotdraw.framework.FigureChangeListener)var83);
    java.awt.Dimension var85 = var82.size();
    var79.removeFromSelection((org.jhotdraw.framework.Figure)var82);
    var82.layout();
    java.lang.Object var88 = var82.clone();
    org.jhotdraw.framework.FigureChangeEvent var89 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var82);
    var44.figureRequestUpdate(var89);
    java.awt.Rectangle var91 = var89.getInvalidatedRectangle();
    var42.figureRequestUpdate(var89);
    var41.toolActivated((java.util.EventObject)var89);
    var41.select();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.paletteUserSelected((org.jhotdraw.util.PaletteButton)var41);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test233() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.lang.Double var20 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var21 = new org.jhotdraw.standard.RelativeLocator(var19, var20);
    int var22 = (-1);
    org.jhotdraw.figures.PolyLineHandle var23 = new org.jhotdraw.figures.PolyLineHandle(var17, (org.jhotdraw.framework.Locator)var21, var22);
    int var24 = (-1);
    int var25 = 1;
    int var26 = 0;
    int var27 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.invokeStep(var24, var25, var26, var27, (org.jhotdraw.framework.DrawingView)var38);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test234() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    java.lang.Double var31 = new java.lang.Double((-1.0d));
    java.lang.Double var32 = new java.lang.Double(100.0d);
    java.lang.Double var33 = new java.lang.Double(1.0d);
    java.awt.Point var34 = org.jhotdraw.util.Geom.polarToPoint(var31, var32, var33);
    org.jhotdraw.figures.EllipseFigure var35 = new org.jhotdraw.figures.EllipseFigure(var30, var34);
    boolean var36 = var2.containsFigure((org.jhotdraw.framework.Figure)var35);
    int var37 = 1;
    int var38 = 1;
    org.jhotdraw.contrib.PolygonFigure var39 = new org.jhotdraw.contrib.PolygonFigure(var37, var38);
    org.jhotdraw.framework.FigureEnumeration var40 = var39.figures();
    java.awt.Rectangle var41 = var39.displayBox();
    org.jhotdraw.framework.FigureEnumeration var42 = var2.figures(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test235() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.framework.FigureEnumeration var7 = var6.selectionZOrdered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test236() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    int var3 = var0.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test237() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    java.lang.Double var55 = new java.lang.Double(10.0d);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double((-1.0d));
    java.lang.Double var58 = new java.lang.Double(100.0d);
    boolean var59 = var54.completelyContainsLine(var55, var56, var57, var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test238() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    int var9 = 1;
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var9, var10);
    java.awt.Dimension var12 = var11.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test239() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    var2.release();
    org.jhotdraw.figures.ArrowTip var28 = new org.jhotdraw.figures.ArrowTip();
    int var29 = 1;
    int var30 = 1;
    int var31 = 10;
    int var32 = 0;
    java.awt.Polygon var33 = var28.outline(var29, var30, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var28.setFillColor(var42);
    java.awt.Rectangle var44 = var28.displayBox();
    org.jhotdraw.framework.Figure var45 = var2.findFigure(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == null);

  }

  public void test240() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.awt.Font var89 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var90 = var35.getFontMetrics(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test241() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.endAnimation();
    javax.swing.JMenuBar var4 = var0.getJMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test242() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    var16.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test243() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    boolean var14 = var11.isContentAreaFilled();
    javax.swing.Action var15 = var11.getAction();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JMenu var18 = var16.createLookAndFeelMenu();
    var16.open();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.util.UndoableAdapter var28 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var26);
    java.awt.Dimension var29 = var26.getPreferredSize();
    var16.setMinimumSize(var29);
    int var31 = 10;
    int var32 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var33 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var31, var32);
    org.jhotdraw.figures.ScribbleTool var34 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var16);
    var7.add((java.awt.Component)var11, (java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test244() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var8 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var6);
    boolean var9 = var6.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var10 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var6);
    var10.deactivate();
    int var12 = var1.indexOf((java.lang.Object)var10);
    org.jhotdraw.framework.DrawingView var13 = var10.getActiveView();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == null);

  }

  public void test245() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    java.lang.String var2 = "";
    java.lang.Long var3 = new java.lang.Long(10L);
    java.lang.Long var4 = new java.lang.Long(0L);
    var0.firePropertyChange(var2, var3, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test246() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.figures.ArrowTip var16 = new org.jhotdraw.figures.ArrowTip();
    int var17 = 1;
    int var18 = 1;
    int var19 = 10;
    int var20 = 0;
    java.awt.Polygon var21 = var16.outline(var17, var18, var19, var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    java.awt.Color var30 = var28.getForeground();
    var16.setFillColor(var30);
    java.awt.Rectangle var32 = var16.displayBox();
    var0.init(var32);
    java.lang.String var34 = "hi!";
    var0.setTitle(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test247() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    var16.removeNotify();
    javax.swing.event.MenuDragMouseListener[] var23 = var16.getMenuDragMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test248() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = "";
    var0.setApplicationName(var3);
    boolean var5 = var0.isActive();
    java.lang.String var6 = var0.getWarningString();
    java.lang.Boolean var7 = new java.lang.Boolean(false);
    var0.setFocusableWindowState(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);

  }

  public void test249() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    java.lang.Double var27 = new java.lang.Double((-1.0d));
    java.lang.Double var28 = new java.lang.Double(100.0d);
    java.lang.Double var29 = new java.lang.Double(1.0d);
    java.awt.Point var30 = org.jhotdraw.util.Geom.polarToPoint(var27, var28, var29);
    java.lang.Double var31 = new java.lang.Double((-1.0d));
    java.lang.Double var32 = new java.lang.Double(100.0d);
    java.lang.Double var33 = new java.lang.Double(1.0d);
    java.awt.Point var34 = org.jhotdraw.util.Geom.polarToPoint(var31, var32, var33);
    org.jhotdraw.figures.EllipseFigure var35 = new org.jhotdraw.figures.EllipseFigure(var30, var34);
    boolean var36 = var2.containsFigure((org.jhotdraw.framework.Figure)var35);
    org.jhotdraw.figures.ArrowTip var37 = new org.jhotdraw.figures.ArrowTip();
    int var38 = 1;
    int var39 = 1;
    int var40 = 10;
    int var41 = 0;
    java.awt.Polygon var42 = var37.outline(var38, var39, var40, var41);
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    javax.swing.JRootPane var45 = var43.getRootPane();
    javax.swing.JLayeredPane var46 = var43.getLayeredPane();
    int var47 = (-1);
    int var48 = 0;
    org.jhotdraw.standard.StandardDrawingView var49 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var43, var47, var48);
    var49.clearSelection();
    java.awt.Color var51 = var49.getForeground();
    var37.setFillColor(var51);
    java.awt.Rectangle var53 = var37.displayBox();
    org.jhotdraw.framework.FigureChangeEvent var54 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var2, var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test250() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.contrib.DiamondFigure var8 = new org.jhotdraw.contrib.DiamondFigure(var3, var7);
    org.jhotdraw.framework.HandleEnumeration var9 = var8.handles();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    var8.basicDisplayBox(var13, var17);
    org.jhotdraw.standard.TextHolder var19 = var8.getTextHolder();
    java.awt.Rectangle var20 = var8.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test251() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "hi!";
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    java.lang.String var18 = var0.store(var2, (org.jhotdraw.framework.Drawing)var3);
    java.lang.String var19 = "";
    var0.setFileExtension(var19);
    javax.swing.filechooser.FileFilter var21 = var0.getFileFilter();
    java.lang.String var22 = "hi!";
    org.jhotdraw.framework.Drawing var23 = var0.restore(var22);
    java.lang.String var24 = var0.getFileDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24.equals("Internal Format (draw)"));

  }

  public void test252() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    java.lang.String var6 = "hi!";
    var2.setActionCommand(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);

  }

  public void test253() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    java.lang.Boolean var10 = new java.lang.Boolean(true);
    var2.setFocusTraversalPolicyProvider(var10);
    var2.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test254() throws Throwable {

    org.jhotdraw.util.collections.jdk11.SetWrapper var0 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    int var1 = var0.size();
    int var2 = var0.size();
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    int var4 = 1;
    int var5 = 1;
    org.jhotdraw.contrib.PolygonFigure var6 = new org.jhotdraw.contrib.PolygonFigure(var4, var5);
    org.jhotdraw.framework.FigureEnumeration var7 = var6.figures();
    java.awt.Rectangle var8 = var6.displayBox();
    int var9 = 1;
    int var10 = 1;
    org.jhotdraw.contrib.PolygonFigure var11 = new org.jhotdraw.contrib.PolygonFigure(var9, var10);
    org.jhotdraw.framework.FigureEnumeration var12 = var11.figures();
    java.awt.Rectangle var13 = var11.displayBox();
    org.jhotdraw.framework.Figure var14 = var3.findFigure(var8, (org.jhotdraw.framework.Figure)var11);
    int var15 = 100;
    int var16 = (-1);
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.lang.Double var18 = new java.lang.Double(100.0d);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.awt.Point var20 = org.jhotdraw.util.Geom.polarToPoint(var17, var18, var19);
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    org.jhotdraw.contrib.DiamondFigure var25 = new org.jhotdraw.contrib.DiamondFigure(var20, var24);
    org.jhotdraw.framework.Figure var26 = var3.findFigureInsideWithout(var15, var16, (org.jhotdraw.framework.Figure)var25);
    java.util.Iterator var27 = var3.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    var41.layout();
    java.lang.Object var47 = var41.clone();
    org.jhotdraw.framework.FigureChangeEvent var48 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var41);
    var3.figureRequestUpdate(var48);
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var51 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var52 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var50, (org.jhotdraw.framework.FigureChangeListener)var51);
    java.awt.Dimension var53 = var50.size();
    var3.sendToBack((org.jhotdraw.framework.Figure)var50);
    int var55 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var56 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var55);
    java.util.Iterator var57 = var56.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var58 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var59 = var58.isDoubleBuffered();
    boolean var60 = var58.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    int var64 = var62.getZValue();
    java.lang.Object var65 = var62.clone();
    org.jhotdraw.standard.CreationTool var66 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var58, (org.jhotdraw.framework.Figure)var62);
    int var67 = 1;
    int var68 = 0;
    org.jhotdraw.standard.StandardDrawingView var69 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var58, var67, var68);
    boolean var70 = var56.contains((java.lang.Object)var68);
    var50.addAll((java.util.List)var56);
    boolean var72 = var0.containsAll((java.util.Collection)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test255() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    java.awt.Dimension var13 = var10.getPreferredSize();
    var0.setMinimumSize(var13);
    int var15 = 10;
    int var16 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var17 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var15, var16);
    double var18 = var17.getScale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1.0d);

  }

  public void test256() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    boolean var10 = var6.isEnabled();
    float var11 = var6.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test257() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.standard.CompositeFigure var19 = var18.getContainerFigure();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Drawing var20 = var18.getActiveDrawing();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == null);

  }

  public void test258() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.endAnimation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.applet.AppletContext var4 = var0.getAppletContext();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test259() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.lang.Boolean var5 = new java.lang.Boolean(true);
    var2.setSelected(var5);
    java.awt.event.ActionListener[] var7 = var2.getActionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test260() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.lang.String var4 = var0.getAppletInfo();
    javax.swing.JRootPane var5 = var0.getRootPane();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    javax.swing.JLayeredPane var13 = var10.getLayeredPane();
    int var14 = (-1);
    int var15 = 0;
    org.jhotdraw.standard.StandardDrawingView var16 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var14, var15);
    java.awt.Component var17 = var6.add((java.awt.Component)var16);
    boolean var18 = var16.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var21 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var19, (org.jhotdraw.framework.FigureChangeListener)var20);
    java.awt.Dimension var22 = var19.size();
    var16.removeFromSelection((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    java.awt.Component var35 = var24.add((java.awt.Component)var34);
    var16.setEditor((org.jhotdraw.framework.DrawingEditor)var24);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var41 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var42 = var41.isDoubleBuffered();
    javax.swing.JRootPane var43 = var41.getRootPane();
    java.lang.String var44 = var43.getUIClassID();
    java.awt.Insets var45 = var43.getInsets();
    int var46 = (-1);
    var40.setPosition((java.awt.Component)var43, var46);
    boolean var48 = var40.isDisplayable();
    boolean var49 = var16.isFocusCycleRoot((java.awt.Container)var40);
    int var50 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var40);
    org.jhotdraw.contrib.MDI_DrawApplication var51 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var52 = var51.isDoubleBuffered();
    javax.swing.JMenu var53 = var51.createLookAndFeelMenu();
    java.lang.Character var54 = new java.lang.Character('a');
    var53.setMnemonic(var54);
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    int var60 = (-1);
    int var61 = 0;
    org.jhotdraw.standard.StandardDrawingView var62 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var56, var60, var61);
    var62.clearSelection();
    var40.add((java.awt.Component)var53, (java.lang.Object)var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var62);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test261() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    var0.open();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    java.awt.Component var33 = var22.add((java.awt.Component)var32);
    var14.setEditor((org.jhotdraw.framework.DrawingEditor)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    java.lang.String var42 = var41.getUIClassID();
    java.awt.Insets var43 = var41.getInsets();
    int var44 = (-1);
    var38.setPosition((java.awt.Component)var41, var44);
    boolean var46 = var38.isDisplayable();
    boolean var47 = var14.isFocusCycleRoot((java.awt.Container)var38);
    var0.setLayeredPane(var38);
    java.lang.Boolean var49 = new java.lang.Boolean(false);
    var0.setLocationByPlatform(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test262() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var42 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var40.removeForeground((org.jhotdraw.framework.Painter)var42);
    org.jhotdraw.util.UndoableHandle var44 = new org.jhotdraw.util.UndoableHandle(var33, (org.jhotdraw.framework.DrawingView)var40);
    org.jhotdraw.util.Undoable var45 = var44.getUndoActivity();
    java.awt.Point var46 = var44.locate();
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    javax.swing.JLayeredPane var50 = var47.getLayeredPane();
    int var51 = (-1);
    int var52 = 0;
    org.jhotdraw.standard.StandardDrawingView var53 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var47, var51, var52);
    var53.clearSelection();
    org.jhotdraw.util.UndoableAdapter var55 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var53);
    org.jhotdraw.contrib.html.DisposableResourceHolder var56 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.createStandardHolder((java.lang.Object)var55);
    boolean var57 = var55.undo();
    java.lang.Boolean var58 = new java.lang.Boolean(true);
    var55.setUndoable(var58);
    var44.setUndoActivity((org.jhotdraw.util.Undoable)var55);
    var16.setUndoActivity((org.jhotdraw.util.Undoable)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test263() throws Throwable {

    org.jhotdraw.framework.Locator var0 = org.jhotdraw.standard.RelativeLocator.north();

  }

  public void test264() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var16 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.standard.StandardDrawing var17 = new org.jhotdraw.standard.StandardDrawing();
    int var18 = var15.getLayer((org.jhotdraw.framework.Figure)var17);
    java.awt.Rectangle var19 = var17.displayBox();
    org.jhotdraw.framework.Figure var20 = var0.orphan((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.figures.TextFigure var21 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var21);
    org.jhotdraw.standard.StandardDrawing var23 = new org.jhotdraw.standard.StandardDrawing();
    int var24 = 1;
    int var25 = 1;
    org.jhotdraw.contrib.PolygonFigure var26 = new org.jhotdraw.contrib.PolygonFigure(var24, var25);
    org.jhotdraw.framework.FigureEnumeration var27 = var26.figures();
    java.awt.Rectangle var28 = var26.displayBox();
    int var29 = 1;
    int var30 = 1;
    org.jhotdraw.contrib.PolygonFigure var31 = new org.jhotdraw.contrib.PolygonFigure(var29, var30);
    org.jhotdraw.framework.FigureEnumeration var32 = var31.figures();
    java.awt.Rectangle var33 = var31.displayBox();
    org.jhotdraw.framework.Figure var34 = var23.findFigure(var28, (org.jhotdraw.framework.Figure)var31);
    int var35 = 100;
    int var36 = (-1);
    java.lang.Double var37 = new java.lang.Double((-1.0d));
    java.lang.Double var38 = new java.lang.Double(100.0d);
    java.lang.Double var39 = new java.lang.Double(1.0d);
    java.awt.Point var40 = org.jhotdraw.util.Geom.polarToPoint(var37, var38, var39);
    java.lang.Double var41 = new java.lang.Double((-1.0d));
    java.lang.Double var42 = new java.lang.Double(100.0d);
    java.lang.Double var43 = new java.lang.Double(1.0d);
    java.awt.Point var44 = org.jhotdraw.util.Geom.polarToPoint(var41, var42, var43);
    org.jhotdraw.contrib.DiamondFigure var45 = new org.jhotdraw.contrib.DiamondFigure(var40, var44);
    org.jhotdraw.framework.Figure var46 = var23.findFigureInsideWithout(var35, var36, (org.jhotdraw.framework.Figure)var45);
    java.util.Iterator var47 = var23.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    int var56 = (-1);
    int var57 = 0;
    org.jhotdraw.standard.StandardDrawingView var58 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var52, var56, var57);
    java.awt.Component var59 = var48.add((java.awt.Component)var58);
    boolean var60 = var58.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    java.awt.Dimension var64 = var61.size();
    var58.removeFromSelection((org.jhotdraw.framework.Figure)var61);
    var61.layout();
    java.lang.Object var67 = var61.clone();
    org.jhotdraw.framework.FigureChangeEvent var68 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var61);
    var23.figureRequestUpdate(var68);
    org.jhotdraw.contrib.GraphicalCompositeFigure var70 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var71 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var72 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var70, (org.jhotdraw.framework.FigureChangeListener)var71);
    java.awt.Dimension var73 = var70.size();
    var23.sendToBack((org.jhotdraw.framework.Figure)var70);
    var21.disconnect((org.jhotdraw.framework.Figure)var70);
    var0.sendToBack((org.jhotdraw.framework.Figure)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test265() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    boolean var14 = var11.isContentAreaFilled();
    javax.swing.Action var15 = var11.getAction();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JMenu var18 = var16.createLookAndFeelMenu();
    var16.open();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.util.UndoableAdapter var28 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var26);
    java.awt.Dimension var29 = var26.getPreferredSize();
    var16.setMinimumSize(var29);
    int var31 = 10;
    int var32 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var33 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var31, var32);
    org.jhotdraw.figures.ScribbleTool var34 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var16);
    var7.add((java.awt.Component)var11, (java.lang.Object)var16);
    boolean var36 = var7.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test266() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    boolean var10 = var6.isEnabled();
    float var11 = var6.getAlignmentX();
    java.awt.Font var12 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var13 = var6.getFontMetrics(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test267() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var42 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var40.removeForeground((org.jhotdraw.framework.Painter)var42);
    org.jhotdraw.util.UndoableHandle var44 = new org.jhotdraw.util.UndoableHandle(var33, (org.jhotdraw.framework.DrawingView)var40);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    int var56 = (-1);
    int var57 = 0;
    org.jhotdraw.standard.StandardDrawingView var58 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var52, var56, var57);
    var58.clearSelection();
    java.awt.Color var60 = var58.getForeground();
    var51.setBackground(var60);
    org.jhotdraw.framework.FigureEnumeration var62 = var51.selectionZOrdered();
    var62.reset();
    var40.addToSelectionAll(var62);
    java.lang.Double var65 = new java.lang.Double((-1.0d));
    java.lang.Double var66 = new java.lang.Double(100.0d);
    java.lang.Double var67 = new java.lang.Double(1.0d);
    java.awt.Point var68 = org.jhotdraw.util.Geom.polarToPoint(var65, var66, var67);
    java.awt.Point var69 = var40.getLocation(var68);
    var40.disable();
    var16.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test268() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    org.jhotdraw.figures.ArrowTip var12 = new org.jhotdraw.figures.ArrowTip();
    int var13 = 1;
    int var14 = 1;
    int var15 = 10;
    int var16 = 0;
    java.awt.Polygon var17 = var12.outline(var13, var14, var15, var16);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    var24.clearSelection();
    java.awt.Color var26 = var24.getForeground();
    var12.setFillColor(var26);
    java.awt.Rectangle var28 = var12.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var29 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var0, var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test269() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    boolean var9 = var8.undo();
    org.jhotdraw.framework.FigureEnumeration var10 = var8.getAffectedFigures();
    boolean var11 = var10.hasNextFigure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test270() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    var16.removeNotify();
    java.lang.Boolean var23 = new java.lang.Boolean(false);
    var16.setEnabled(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test271() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.framework.Tool var12 = var10.tool();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    java.lang.String var16 = var15.getUIClassID();
    java.awt.Insets var17 = var15.getInsets();
    java.awt.Insets var18 = var10.getInsets(var17);
    org.jhotdraw.standard.StandardDrawing var19 = new org.jhotdraw.standard.StandardDrawing();
    int var20 = 1;
    int var21 = 1;
    org.jhotdraw.contrib.PolygonFigure var22 = new org.jhotdraw.contrib.PolygonFigure(var20, var21);
    org.jhotdraw.framework.FigureEnumeration var23 = var22.figures();
    java.awt.Rectangle var24 = var22.displayBox();
    int var25 = 1;
    int var26 = 1;
    org.jhotdraw.contrib.PolygonFigure var27 = new org.jhotdraw.contrib.PolygonFigure(var25, var26);
    org.jhotdraw.framework.FigureEnumeration var28 = var27.figures();
    java.awt.Rectangle var29 = var27.displayBox();
    org.jhotdraw.framework.Figure var30 = var19.findFigure(var24, (org.jhotdraw.framework.Figure)var27);
    org.jhotdraw.figures.ArrowTip var31 = new org.jhotdraw.figures.ArrowTip();
    int var32 = 1;
    int var33 = 1;
    int var34 = 10;
    int var35 = 0;
    java.awt.Polygon var36 = var31.outline(var32, var33, var34, var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    java.awt.Color var45 = var43.getForeground();
    var31.setFillColor(var45);
    java.awt.Rectangle var47 = var31.displayBox();
    org.jhotdraw.framework.DrawingChangeEvent var48 = new org.jhotdraw.framework.DrawingChangeEvent((org.jhotdraw.framework.Drawing)var19, var47);
    var10.drawingTitleChanged(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test272() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    int var44 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var45 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var44);
    boolean var46 = var28.removeAll((java.util.Collection)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test273() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    int var3 = var0.getValue();
    org.jhotdraw.contrib.html.TextHolderContentProducer var4 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test274() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.String var1 = "";
    java.lang.String var2 = org.jhotdraw.util.VersionManagement.readVersionFromFile(var0, var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test275() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    var7.clearSelection();
    org.jhotdraw.util.UndoableAdapter var9 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var7);
    var0.removeDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Dimension var11 = var7.getMinimumSize();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test276() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = "hi!";
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var3 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var4 = var3.handles();
    org.jhotdraw.framework.Figure var5 = var2.remove((org.jhotdraw.framework.Figure)var3);
    java.lang.String var6 = var0.store(var1, (org.jhotdraw.framework.Drawing)var2);
    boolean var7 = var0.isRestoreFormat();
    java.lang.String var8 = "";
    org.jhotdraw.framework.Drawing var9 = var0.restore(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);

  }

  public void test277() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.framework.Tool var12 = var10.tool();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    java.lang.String var16 = var15.getUIClassID();
    java.awt.Insets var17 = var15.getInsets();
    java.awt.Insets var18 = var10.getInsets(var17);
    java.lang.Object var19 = var10.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.equals("RootPaneUI"));

  }

  public void test278() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    java.lang.String var6 = "hi!";
    var2.setActionCommand(var6);
    javax.swing.KeyStroke var8 = var2.getAccelerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);

  }

  public void test279() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    boolean var7 = var2.isFocusPainted();
    java.lang.String var8 = "";
    var2.setLabel(var8);
    javax.swing.ButtonModel var10 = var2.getModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test280() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.framework.Tool var3 = var1.tool();
    java.awt.FocusTraversalPolicy var4 = var1.getFocusTraversalPolicy();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var7 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var5, (org.jhotdraw.framework.FigureChangeListener)var6);
    java.awt.Dimension var8 = var5.size();
    var1.resize(var8);
    org.jhotdraw.standard.DuplicateCommand var10 = new org.jhotdraw.standard.DuplicateCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test281() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.framework.Tool var12 = var10.tool();
    java.lang.Boolean var13 = new java.lang.Boolean(false);
    var10.setVisible(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test282() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    boolean var14 = var11.isContentAreaFilled();
    javax.swing.Action var15 = var11.getAction();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JMenu var18 = var16.createLookAndFeelMenu();
    var16.open();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.util.UndoableAdapter var28 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var26);
    java.awt.Dimension var29 = var26.getPreferredSize();
    var16.setMinimumSize(var29);
    int var31 = 10;
    int var32 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var33 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var31, var32);
    org.jhotdraw.figures.ScribbleTool var34 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var16);
    var7.add((java.awt.Component)var11, (java.lang.Object)var16);
    javax.swing.event.MenuListener[] var36 = var11.getMenuListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test283() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    int var15 = 1;
    int var16 = 1;
    org.jhotdraw.contrib.PolygonFigure var17 = new org.jhotdraw.contrib.PolygonFigure(var15, var16);
    org.jhotdraw.framework.FigureEnumeration var18 = var17.figures();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    var17.basicDisplayBox(var22, var26);
    java.lang.Double var28 = new java.lang.Double(0.0d);
    java.lang.Double var29 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var30 = new org.jhotdraw.standard.RelativeLocator(var28, var29);
    int var31 = 0;
    org.jhotdraw.contrib.PolygonHandle var32 = new org.jhotdraw.contrib.PolygonHandle(var17, (org.jhotdraw.framework.Locator)var30, var31);
    int var33 = 10;
    int var34 = 1;
    int var35 = 0;
    int var36 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    org.jhotdraw.util.UndoableAdapter var45 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var43);
    java.awt.Dimension var46 = var43.getPreferredSize();
    var32.invokeEnd(var33, var34, var35, var36, (org.jhotdraw.framework.DrawingView)var43);
    int var48 = 0;
    int var49 = 1;
    org.jhotdraw.standard.StandardDrawing var50 = new org.jhotdraw.standard.StandardDrawing();
    int var51 = 1;
    int var52 = 1;
    org.jhotdraw.contrib.PolygonFigure var53 = new org.jhotdraw.contrib.PolygonFigure(var51, var52);
    org.jhotdraw.framework.FigureEnumeration var54 = var53.figures();
    java.awt.Rectangle var55 = var53.displayBox();
    int var56 = 1;
    int var57 = 1;
    org.jhotdraw.contrib.PolygonFigure var58 = new org.jhotdraw.contrib.PolygonFigure(var56, var57);
    org.jhotdraw.framework.FigureEnumeration var59 = var58.figures();
    java.awt.Rectangle var60 = var58.displayBox();
    org.jhotdraw.framework.Figure var61 = var50.findFigure(var55, (org.jhotdraw.framework.Figure)var58);
    var32.invokeEnd(var48, var49, (org.jhotdraw.framework.Drawing)var50);
    java.awt.Rectangle var63 = var32.displayBox();
    org.jhotdraw.framework.Figure var64 = var0.findFigure(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == null);

  }

  public void test284() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.framework.JHotDrawRuntimeException var1 = new org.jhotdraw.framework.JHotDrawRuntimeException(var0);
    org.jhotdraw.framework.JHotDrawException var2 = new org.jhotdraw.framework.JHotDrawException((java.lang.Exception)var1);
    java.lang.Exception var3 = var1.getNestedException();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test285() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    boolean var2 = var0.isFocusTraversalPolicySet();
    var0.destroy();
    org.jhotdraw.util.UndoManager var4 = var0.getUndoManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test286() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var4 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var0);
    var4.deactivate();
    boolean var6 = var4.isActive();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test287() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var10.setMinimumSize(var40);
    java.lang.Boolean var42 = new java.lang.Boolean(true);
    var10.setLocationByPlatform(var42);
    java.lang.String[] var44 = var10.getRequiredVersions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test288() throws Throwable {

    org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12 var0 = new org.jhotdraw.util.collections.jdk12.CollectionsFactoryJDK12();

  }

  public void test289() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    boolean var15 = var13.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    int var19 = var17.getZValue();
    java.lang.Object var20 = var17.clone();
    org.jhotdraw.standard.CreationTool var21 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var13, (org.jhotdraw.framework.Figure)var17);
    java.lang.String var22 = "hi!";
    java.lang.String var23 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    java.awt.Graphics var28 = var24.getGraphics();
    java.lang.Boolean var29 = new java.lang.Boolean(true);
    var24.setLocationByPlatform(var29);
    org.jhotdraw.standard.StandardDrawing var31 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    java.lang.Double var36 = new java.lang.Double((-1.0d));
    java.lang.Double var37 = new java.lang.Double(100.0d);
    java.lang.Double var38 = new java.lang.Double(1.0d);
    java.awt.Point var39 = org.jhotdraw.util.Geom.polarToPoint(var36, var37, var38);
    org.jhotdraw.contrib.DiamondFigure var40 = new org.jhotdraw.contrib.DiamondFigure(var35, var39);
    org.jhotdraw.framework.HandleEnumeration var41 = var40.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var43 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var44 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var42, (org.jhotdraw.framework.FigureChangeListener)var43);
    org.jhotdraw.framework.Figure var45 = var31.replace((org.jhotdraw.framework.Figure)var40, (org.jhotdraw.framework.Figure)var42);
    org.jhotdraw.framework.Handle var46 = org.jhotdraw.standard.BoxHandleKit.north(var45);
    org.jhotdraw.standard.HandleTracker var47 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var24, var46);
    org.jhotdraw.standard.ToolButton var48 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var13, var22, var23, (org.jhotdraw.framework.Tool)var47);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var49 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var49.start();
    org.jhotdraw.framework.Tool var51 = var49.tool();
    java.awt.FocusTraversalPolicy var52 = var49.getFocusTraversalPolicy();
    var48.setFocusTraversalPolicy(var52);
    var10.removeMouseMotionListener((java.awt.event.MouseMotionListener)var48);
    var48.select();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == null);

  }

  public void test290() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var1 = var0.handles();
    org.jhotdraw.figures.LineDecoration var2 = var0.getStartDecoration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test291() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    java.lang.String var17 = "hi!";
    var0.setText(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test292() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var8 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var6);
    boolean var9 = var6.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var10 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var6);
    var10.deactivate();
    int var12 = var1.indexOf((java.lang.Object)var10);
    var10.deactivate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test293() throws Throwable {

    int var0 = 100;
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    org.jhotdraw.util.PaletteLayout var5 = new org.jhotdraw.util.PaletteLayout(var0, var4);

  }

  public void test294() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    java.awt.Rectangle var88 = var83.getInvalidatedRectangle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test295() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    org.jhotdraw.figures.ShortestDistanceConnector var2 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var0);
    int var3 = 100;
    int var4 = (-1);
    boolean var5 = var2.containsPoint(var3, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test296() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    boolean var18 = var10.isReadOnly();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.util.UndoableAdapter var27 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var25);
    java.awt.Dimension var28 = var25.getPreferredSize();
    java.awt.Dimension var29 = var10.getSize(var28);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    var36.clearSelection();
    org.jhotdraw.util.UndoableAdapter var38 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var36);
    java.awt.Dimension var39 = var36.getPreferredSize();
    java.awt.Dimension var40 = var10.getSize(var39);
    int var41 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    javax.swing.JLayeredPane var49 = var46.getLayeredPane();
    int var50 = (-1);
    int var51 = 0;
    org.jhotdraw.standard.StandardDrawingView var52 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var46, var50, var51);
    java.awt.Component var53 = var42.add((java.awt.Component)var52);
    boolean var54 = var52.getInheritsPopupMenu();
    javax.swing.InputMap var55 = var52.getInputMap();
    var10.setInputMap(var41, var55);
    boolean var57 = var10.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test297() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = (-1);
    int var19 = 10;
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var21 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var20);
    org.jhotdraw.standard.StandardDrawing var22 = new org.jhotdraw.standard.StandardDrawing();
    int var23 = var20.getLayer((org.jhotdraw.framework.Figure)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    java.awt.Component var35 = var24.add((java.awt.Component)var34);
    boolean var36 = var34.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var34.removeFromSelection((org.jhotdraw.framework.Figure)var37);
    var37.layout();
    java.lang.Object var43 = var37.clone();
    org.jhotdraw.framework.FigureChangeEvent var44 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var37);
    java.lang.Object var45 = var44.getSource();
    var22.figureInvalidated(var44);
    int var47 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var48 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var47);
    java.util.Iterator var49 = var48.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    boolean var52 = var50.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var53 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var55 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var53, (org.jhotdraw.framework.FigureChangeListener)var54);
    int var56 = var54.getZValue();
    java.lang.Object var57 = var54.clone();
    org.jhotdraw.standard.CreationTool var58 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var50, (org.jhotdraw.framework.Figure)var54);
    int var59 = 1;
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var59, var60);
    boolean var62 = var48.contains((java.lang.Object)var60);
    var22.orphanAll((java.util.List)var48);
    var17.invokeStep(var18, var19, (org.jhotdraw.framework.Drawing)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test298() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    boolean var22 = var16.getInheritsPopupMenu();
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    int var27 = (-1);
    int var28 = 0;
    org.jhotdraw.standard.StandardDrawingView var29 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var23, var27, var28);
    var29.clearSelection();
    org.jhotdraw.util.UndoableAdapter var31 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var29);
    java.awt.Dimension var32 = var29.getPreferredSize();
    var16.setMinimumSize(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test299() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var7 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var8 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var6, (org.jhotdraw.framework.FigureChangeListener)var7);
    int var9 = var7.getZValue();
    java.lang.Object var10 = var7.clone();
    org.jhotdraw.framework.FigureChangeListener var11 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var7);
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    var2.displayBox(var15, var24);
    org.jhotdraw.contrib.Layouter var26 = var2.getLayouter();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test300() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    var16.removeNotify();
    java.lang.Boolean var23 = new java.lang.Boolean(false);
    var16.setEnabled(var23);
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JMenu var27 = var25.createLookAndFeelMenu();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = "";
    int var30 = 100;
    var27.insert(var29, var30);
    javax.swing.JMenuItem var32 = var16.add((javax.swing.JMenuItem)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);

  }

  public void test301() throws Throwable {

    org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.TriangleFigureGeometricAdapter();
    double var1 = var0.getRotationAngle();
    java.lang.Double var2 = new java.lang.Double((-1.0d));
    java.lang.Double var3 = new java.lang.Double(100.0d);
    java.lang.Double var4 = new java.lang.Double(1.0d);
    java.awt.Point var5 = org.jhotdraw.util.Geom.polarToPoint(var2, var3, var4);
    java.awt.Point var6 = var0.chop(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.5707963267948966d));

  }

  public void test302() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    int var3 = 1;
    int var4 = (-1);
    var0.moveBy(var3, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);

  }

  public void test303() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = "hi!";
    org.jhotdraw.framework.Drawing var2 = var0.restore(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test304() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    java.lang.String var2 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.Character var6 = new java.lang.Character('a');
    var5.setMnemonic(var6);
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JMenu var10 = var8.createLookAndFeelMenu();
    java.lang.String var11 = var10.getName();
    boolean var12 = var5.isMenuComponent((java.awt.Component)var10);
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setBorderPainted(var13);
    var0.setAttribute(var2, (java.lang.Object)var13);
    org.jhotdraw.framework.Figure var16 = var0.getObservedFigure();
    java.lang.String var17 = "hi!";
    var0.setText(var17);
    java.awt.Rectangle var19 = var0.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);

  }

  public void test305() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    var0.lock();

  }

  public void test306() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var10 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var10.start();
    org.jhotdraw.framework.Tool var12 = var10.tool();
    var10.transferFocus();
    var9.addFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    int var15 = 1;
    int var16 = 10;
    boolean var17 = var9.contains(var15, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test307() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.requestFocus();
    boolean var9 = var6.isDoubleBuffered();
    org.jhotdraw.framework.Tool var10 = var6.tool();
    org.jhotdraw.standard.StandardDrawing var11 = new org.jhotdraw.standard.StandardDrawing();
    int var12 = 1;
    int var13 = 1;
    org.jhotdraw.contrib.PolygonFigure var14 = new org.jhotdraw.contrib.PolygonFigure(var12, var13);
    org.jhotdraw.framework.FigureEnumeration var15 = var14.figures();
    java.awt.Rectangle var16 = var14.displayBox();
    int var17 = 1;
    int var18 = 1;
    org.jhotdraw.contrib.PolygonFigure var19 = new org.jhotdraw.contrib.PolygonFigure(var17, var18);
    org.jhotdraw.framework.FigureEnumeration var20 = var19.figures();
    java.awt.Rectangle var21 = var19.displayBox();
    org.jhotdraw.framework.Figure var22 = var11.findFigure(var16, (org.jhotdraw.framework.Figure)var19);
    int var23 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var24 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var23);
    var11.orphanAll((java.util.List)var24);
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var27 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var26);
    org.jhotdraw.standard.StandardDrawing var28 = new org.jhotdraw.standard.StandardDrawing();
    int var29 = var26.getLayer((org.jhotdraw.framework.Figure)var28);
    java.awt.Rectangle var30 = var28.displayBox();
    org.jhotdraw.framework.Figure var31 = var11.orphan((org.jhotdraw.framework.Figure)var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.toggleSelection((org.jhotdraw.framework.Figure)var11);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));

  }

  public void test308() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    var0.remove((java.awt.Component)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test309() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test310() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var10 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var10.start();
    org.jhotdraw.framework.Tool var12 = var10.tool();
    var10.transferFocus();
    var9.addFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    java.beans.VetoableChangeListener[] var15 = var9.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test311() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    int var9 = 1;
    int var10 = 0;
    org.jhotdraw.standard.StandardDrawingView var11 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var9, var10);
    java.awt.Dimension var12 = var11.getSize();
    java.beans.VetoableChangeListener[] var13 = var11.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test312() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    int var44 = 1;
    int var45 = 100;
    boolean var46 = var2.containsPoint(var44, var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test313() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    javax.swing.JRootPane var12 = var10.getRootPane();
    java.lang.String var13 = var12.getUIClassID();
    java.awt.Insets var14 = var12.getInsets();
    var7.setMargin(var14);
    boolean var16 = var7.isMinimumSizeSet();
    int var17 = 0;
    org.jhotdraw.util.PaletteLayout var18 = new org.jhotdraw.util.PaletteLayout(var17);
    var7.setLayout((java.awt.LayoutManager)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JMenu var22 = var20.createLookAndFeelMenu();
    java.lang.Character var23 = new java.lang.Character('a');
    var22.setMnemonic(var23);
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JMenu var27 = var25.createLookAndFeelMenu();
    java.lang.String var28 = var27.getName();
    boolean var29 = var22.isMenuComponent((java.awt.Component)var27);
    int var30 = 100;
    int var31 = (-1);
    int var32 = (-1);
    int var33 = (-1);
    var22.reshape(var30, var31, var32, var33);
    boolean var35 = var22.isContentAreaFilled();
    javax.swing.InputVerifier var36 = var22.getInputVerifier();
    javax.swing.KeyStroke var37 = var22.getAccelerator();
    int var38 = var22.getMnemonic();
    var7.remove((javax.swing.JMenuItem)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 65);

  }

  public void test314() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    org.jhotdraw.framework.Cursor var49 = var17.getCursor();
    int var50 = 1;
    int var51 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    int var60 = (-1);
    int var61 = 0;
    org.jhotdraw.standard.StandardDrawingView var62 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var56, var60, var61);
    java.awt.Component var63 = var52.add((java.awt.Component)var62);
    boolean var64 = var62.getInheritsPopupMenu();
    boolean var65 = var62.requestDefaultFocus();
    java.lang.String var66 = "hi!";
    java.lang.Character var67 = new java.lang.Character(' ');
    java.lang.Character var68 = new java.lang.Character(' ');
    var62.firePropertyChange(var66, var67, var68);
    var17.invokeStart(var50, var51, (org.jhotdraw.framework.DrawingView)var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test315() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "hi!";
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    java.lang.String var18 = var0.store(var2, (org.jhotdraw.framework.Drawing)var3);
    org.jhotdraw.framework.FigureEnumeration var19 = var3.figures();
    org.jhotdraw.standard.InsertIntoDrawingVisitor var20 = new org.jhotdraw.standard.InsertIntoDrawingVisitor((org.jhotdraw.framework.Drawing)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.equals("hi!.draw"));

  }

  public void test316() throws Throwable {

    org.jhotdraw.util.collections.jdk11.SetWrapper var0 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    org.jhotdraw.util.collections.jdk11.SetWrapper var1 = new org.jhotdraw.util.collections.jdk11.SetWrapper((java.util.Set)var0);

  }

  public void test317() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.framework.JHotDrawRuntimeException var1 = new org.jhotdraw.framework.JHotDrawRuntimeException(var0);
    org.jhotdraw.framework.JHotDrawException var2 = new org.jhotdraw.framework.JHotDrawException((java.lang.Exception)var1);
    java.lang.Exception var3 = var1.getNestedException();
    java.lang.Exception var4 = var1.getNestedException();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test318() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var2 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    boolean var3 = var0.isCursorSet();
    java.lang.String var4 = "";
    java.lang.Character var5 = new java.lang.Character('#');
    java.lang.Character var6 = new java.lang.Character('a');
    var0.firePropertyChange(var4, var5, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test319() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    boolean var2 = var0.isTextDirty();
    java.lang.Boolean var3 = new java.lang.Boolean(true);
    var0.setSizeDirty(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test320() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var3 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    int var4 = 1;
    int var5 = 0;
    boolean var6 = var3.containsPoint(var4, var5);
    org.jhotdraw.contrib.TextAreaTool var7 = new org.jhotdraw.contrib.TextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var3);
    java.lang.Object var8 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test321() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.lang.Double var89 = new java.lang.Double((-1.0d));
    java.lang.Double var90 = new java.lang.Double(100.0d);
    java.lang.Double var91 = new java.lang.Double(1.0d);
    java.awt.Point var92 = org.jhotdraw.util.Geom.polarToPoint(var89, var90, var91);
    java.lang.Double var93 = new java.lang.Double((-1.0d));
    java.lang.Double var94 = new java.lang.Double(100.0d);
    java.lang.Double var95 = new java.lang.Double(1.0d);
    java.awt.Point var96 = org.jhotdraw.util.Geom.polarToPoint(var93, var94, var95);
    org.jhotdraw.figures.EllipseFigure var97 = new org.jhotdraw.figures.EllipseFigure(var92, var96);
    java.awt.Rectangle var98 = var97.displayBox();
    java.awt.Rectangle var99 = var35.getBounds(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test322() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    boolean var14 = var11.isContentAreaFilled();
    javax.swing.Action var15 = var11.getAction();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JMenu var18 = var16.createLookAndFeelMenu();
    var16.open();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.util.UndoableAdapter var28 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var26);
    java.awt.Dimension var29 = var26.getPreferredSize();
    var16.setMinimumSize(var29);
    int var31 = 10;
    int var32 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var33 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var31, var32);
    org.jhotdraw.figures.ScribbleTool var34 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var16);
    var7.add((java.awt.Component)var11, (java.lang.Object)var16);
    boolean var36 = var7.isPreferredSizeSet();
    var7.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test323() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 10;
    int var2 = (-1);
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    org.jhotdraw.framework.Handle var18 = org.jhotdraw.standard.BoxHandleKit.north(var17);
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var27 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var25.removeForeground((org.jhotdraw.framework.Painter)var27);
    org.jhotdraw.util.UndoableHandle var29 = new org.jhotdraw.util.UndoableHandle(var18, (org.jhotdraw.framework.DrawingView)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    java.awt.Color var45 = var43.getForeground();
    var36.setBackground(var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var36.selectionZOrdered();
    var47.reset();
    var25.addToSelectionAll(var47);
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var51 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var50);
    org.jhotdraw.contrib.GraphicalCompositeFigure var52 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var53 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var52);
    var50.addDependendFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.framework.Handle var55 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    int var60 = (-1);
    int var61 = 0;
    org.jhotdraw.standard.StandardDrawingView var62 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var56, var60, var61);
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    int var67 = (-1);
    int var68 = 0;
    org.jhotdraw.standard.StandardDrawingView var69 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var63, var67, var68);
    var69.clearSelection();
    java.awt.Color var71 = var69.getForeground();
    var62.setBackground(var71);
    org.jhotdraw.framework.FigureEnumeration var73 = var62.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var74 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var75 = var74.isDoubleBuffered();
    javax.swing.JRootPane var76 = var74.getRootPane();
    javax.swing.JLayeredPane var77 = var74.getLayeredPane();
    int var78 = (-1);
    int var79 = 0;
    org.jhotdraw.standard.StandardDrawingView var80 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var74, var78, var79);
    org.jhotdraw.contrib.MDI_DrawApplication var81 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var82 = var81.isDoubleBuffered();
    javax.swing.JRootPane var83 = var81.getRootPane();
    javax.swing.JLayeredPane var84 = var81.getLayeredPane();
    int var85 = (-1);
    int var86 = 0;
    org.jhotdraw.standard.StandardDrawingView var87 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var81, var85, var86);
    var87.clearSelection();
    java.awt.Color var89 = var87.getForeground();
    var80.setBackground(var89);
    org.jhotdraw.framework.FigureEnumeration var91 = var80.selectionZOrdered();
    var62.addToSelectionAll(var91);
    boolean var93 = var25.figureExists((org.jhotdraw.framework.Figure)var52, var91);
    var52.layout();
    java.awt.Rectangle var95 = var52.displayBox();
    org.jhotdraw.framework.Figure var96 = var0.findFigureWithout(var1, var2, (org.jhotdraw.framework.Figure)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == null);

  }

  public void test324() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    java.lang.String var14 = "hi!";
    java.lang.Character var15 = new java.lang.Character(' ');
    java.lang.Character var16 = new java.lang.Character(' ');
    var10.firePropertyChange(var14, var15, var16);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    var24.clearSelection();
    org.jhotdraw.util.UndoableAdapter var26 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var24);
    java.awt.Dimension var27 = var24.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    javax.swing.JLayeredPane var49 = var46.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    java.awt.Component var57 = var46.add((java.awt.Component)var56);
    var38.setEditor((org.jhotdraw.framework.DrawingEditor)var46);
    org.jhotdraw.contrib.MDI_DrawApplication var59 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var60 = var59.isDoubleBuffered();
    javax.swing.JRootPane var61 = var59.getRootPane();
    javax.swing.JLayeredPane var62 = var59.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    java.lang.String var66 = var65.getUIClassID();
    java.awt.Insets var67 = var65.getInsets();
    int var68 = (-1);
    var62.setPosition((java.awt.Component)var65, var68);
    boolean var70 = var62.isDisplayable();
    boolean var71 = var38.isFocusCycleRoot((java.awt.Container)var62);
    java.awt.Point var72 = var38.lastClick();
    org.jhotdraw.contrib.MDI_DrawApplication var73 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var74 = var73.isDoubleBuffered();
    javax.swing.JRootPane var75 = var73.getRootPane();
    javax.swing.JLayeredPane var76 = var73.getLayeredPane();
    int var77 = (-1);
    int var78 = 0;
    org.jhotdraw.standard.StandardDrawingView var79 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var73, var77, var78);
    var79.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var81 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var79.removeForeground((org.jhotdraw.framework.Painter)var81);
    var38.removeBackground((org.jhotdraw.framework.Painter)var81);
    var24.setDisplayUpdate((org.jhotdraw.framework.Painter)var81);
    var10.removeBackground((org.jhotdraw.framework.Painter)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test325() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    org.jhotdraw.framework.Cursor var49 = var17.getCursor();
    int var50 = 1;
    int var51 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var56 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var57 = var56.isDoubleBuffered();
    javax.swing.JRootPane var58 = var56.getRootPane();
    javax.swing.JLayeredPane var59 = var56.getLayeredPane();
    int var60 = (-1);
    int var61 = 0;
    org.jhotdraw.standard.StandardDrawingView var62 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var56, var60, var61);
    java.awt.Component var63 = var52.add((java.awt.Component)var62);
    boolean var64 = var62.getInheritsPopupMenu();
    boolean var65 = var62.requestDefaultFocus();
    java.lang.String var66 = "hi!";
    java.lang.Character var67 = new java.lang.Character(' ');
    java.lang.Character var68 = new java.lang.Character(' ');
    var62.firePropertyChange(var66, var67, var68);
    var17.invokeStart(var50, var51, (org.jhotdraw.framework.DrawingView)var62);
    int var71 = 1;
    int var72 = 1;
    org.jhotdraw.contrib.PolygonFigure var73 = new org.jhotdraw.contrib.PolygonFigure(var71, var72);
    org.jhotdraw.framework.FigureEnumeration var74 = var73.figures();
    java.awt.Rectangle var75 = var73.displayBox();
    org.jhotdraw.contrib.MDI_DrawApplication var76 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var77 = var76.isDoubleBuffered();
    javax.swing.JRootPane var78 = var76.getRootPane();
    javax.swing.JLayeredPane var79 = var76.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var80 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var81 = var80.isDoubleBuffered();
    javax.swing.JRootPane var82 = var80.getRootPane();
    javax.swing.JLayeredPane var83 = var80.getLayeredPane();
    int var84 = (-1);
    int var85 = 0;
    org.jhotdraw.standard.StandardDrawingView var86 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var80, var84, var85);
    java.awt.Component var87 = var76.add((java.awt.Component)var86);
    boolean var88 = var86.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var89 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var90 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var91 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var89, (org.jhotdraw.framework.FigureChangeListener)var90);
    java.awt.Dimension var92 = var89.size();
    var86.removeFromSelection((org.jhotdraw.framework.Figure)var89);
    var89.layout();
    var73.addToContainer((org.jhotdraw.framework.FigureChangeListener)var89);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Figure var96 = var62.remove((org.jhotdraw.framework.Figure)var73);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test326() throws Throwable {

    java.awt.Window[] var0 = java.awt.Window.getOwnerlessWindows();

  }

  public void test327() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    boolean var15 = var13.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var13.removeFromSelection((org.jhotdraw.framework.Figure)var16);
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    javax.swing.JLayeredPane var28 = var25.getLayeredPane();
    int var29 = (-1);
    int var30 = 0;
    org.jhotdraw.standard.StandardDrawingView var31 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var25, var29, var30);
    java.awt.Component var32 = var21.add((java.awt.Component)var31);
    var13.setEditor((org.jhotdraw.framework.DrawingEditor)var21);
    javax.swing.InputVerifier var34 = var13.getInputVerifier();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var39 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var40 = var39.isDoubleBuffered();
    javax.swing.JRootPane var41 = var39.getRootPane();
    java.lang.String var42 = var41.getUIClassID();
    java.awt.Insets var43 = var41.getInsets();
    int var44 = (-1);
    var38.setPosition((java.awt.Component)var41, var44);
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    int var48 = 0;
    var38.setLayer((java.awt.Component)var46, var48);
    java.awt.event.HierarchyListener[] var50 = var46.getHierarchyListeners();
    var13.setEditor((org.jhotdraw.framework.DrawingEditor)var46);
    int var52 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.addToDesktop((org.jhotdraw.framework.DrawingView)var13, var52);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test328() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    var10.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test329() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = "hi!";
    java.lang.Long var8 = new java.lang.Long(100L);
    java.lang.Long var9 = new java.lang.Long(1L);
    var6.firePropertyChange(var7, var8, var9);
    int var11 = var6.getX();
    var2.setAttribute(var3, (java.lang.Object)var11);
    org.jhotdraw.standard.StandardDrawing var13 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.HandleEnumeration var23 = var22.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    org.jhotdraw.framework.Figure var27 = var13.replace((org.jhotdraw.framework.Figure)var22, (org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Handle var28 = org.jhotdraw.standard.BoxHandleKit.north(var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var37 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var35.removeForeground((org.jhotdraw.framework.Painter)var37);
    org.jhotdraw.util.UndoableHandle var39 = new org.jhotdraw.util.UndoableHandle(var28, (org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    javax.swing.JLayeredPane var50 = var47.getLayeredPane();
    int var51 = (-1);
    int var52 = 0;
    org.jhotdraw.standard.StandardDrawingView var53 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var47, var51, var52);
    var53.clearSelection();
    java.awt.Color var55 = var53.getForeground();
    var46.setBackground(var55);
    org.jhotdraw.framework.FigureEnumeration var57 = var46.selectionZOrdered();
    var57.reset();
    var35.addToSelectionAll(var57);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.awt.Point var64 = var35.getLocation(var63);
    java.awt.Point var65 = var2.chop(var64);
    java.lang.Double var66 = new java.lang.Double((-1.0d));
    java.lang.Double var67 = new java.lang.Double(100.0d);
    java.lang.Double var68 = new java.lang.Double(1.0d);
    java.awt.Point var69 = org.jhotdraw.util.Geom.polarToPoint(var66, var67, var68);
    org.jhotdraw.util.Bounds var70 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var65, (java.awt.geom.Point2D)var69);
    java.lang.Double var71 = new java.lang.Double((-1.0d));
    java.lang.Double var72 = new java.lang.Double(100.0d);
    java.lang.Double var73 = new java.lang.Double(1.0d);
    java.awt.Point var74 = org.jhotdraw.util.Geom.polarToPoint(var71, var72, var73);
    var70.setCenter((java.awt.geom.Point2D)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test330() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = var2.getLabel();
    java.lang.Boolean var5 = new java.lang.Boolean(false);
    var2.setContentAreaFilled(var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    java.awt.Component var22 = var11.add((java.awt.Component)var21);
    boolean var23 = var21.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    java.awt.Dimension var27 = var24.size();
    var21.removeFromSelection((org.jhotdraw.framework.Figure)var24);
    var24.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var30 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var7, (org.jhotdraw.framework.Figure)var24);
    var7.nextFocus();
    var7.doLayout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var33 = var2.add((java.awt.Component)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4.equals("Look'n'Feel"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test331() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    java.awt.Point var44 = var10.lastClick();
    var10.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test332() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.requestFocus();
    var6.repairDamage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test333() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    boolean var10 = var6.isEnabled();
    float var11 = var6.getAlignmentX();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    java.awt.Component var23 = var12.add((java.awt.Component)var22);
    boolean var24 = var22.getInheritsPopupMenu();
    boolean var25 = var22.requestDefaultFocus();
    java.lang.String var26 = "hi!";
    java.lang.Character var27 = new java.lang.Character(' ');
    java.lang.Character var28 = new java.lang.Character(' ');
    var22.firePropertyChange(var26, var27, var28);
    boolean var30 = var22.isReadOnly();
    org.jhotdraw.contrib.ClippingUpdateStrategy var31 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeBackground((org.jhotdraw.framework.Painter)var31);
    var6.setDisplayUpdate((org.jhotdraw.framework.Painter)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test334() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    org.jhotdraw.framework.DrawingEditor var10 = var6.editor();
    int var11 = var6.getComponentCount();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    java.awt.Component var23 = var12.add((java.awt.Component)var22);
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    java.awt.Dimension var27 = var24.size();
    var12.setPreferredSize(var27);
    var6.setEditor((org.jhotdraw.framework.DrawingEditor)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test335() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    org.jhotdraw.framework.Cursor var49 = var17.getCursor();
    org.jhotdraw.framework.Figure var50 = var17.owner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test336() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    int var25 = (-1);
    int var26 = 0;
    org.jhotdraw.standard.StandardDrawingView var27 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var21, var25, var26);
    java.awt.Component var28 = var17.add((java.awt.Component)var27);
    boolean var29 = var27.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var31 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var32 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var30, (org.jhotdraw.framework.FigureChangeListener)var31);
    java.awt.Dimension var33 = var30.size();
    var27.removeFromSelection((org.jhotdraw.framework.Figure)var30);
    var16.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var27);
    boolean var36 = var16.isExecutable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var37 = var16.isExecutableWithView();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test337() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    org.jhotdraw.util.Command var25 = var18.getCommand();
    float var26 = var18.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);

  }

  public void test338() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    boolean var14 = var11.isContentAreaFilled();
    javax.swing.Action var15 = var11.getAction();
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JMenu var18 = var16.createLookAndFeelMenu();
    var16.open();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.util.UndoableAdapter var28 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var26);
    java.awt.Dimension var29 = var26.getPreferredSize();
    var16.setMinimumSize(var29);
    int var31 = 10;
    int var32 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var33 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var31, var32);
    org.jhotdraw.figures.ScribbleTool var34 = new org.jhotdraw.figures.ScribbleTool((org.jhotdraw.framework.DrawingEditor)var16);
    var7.add((java.awt.Component)var11, (java.lang.Object)var16);
    int var36 = (-1);
    //gustavo//timeout exception

  }

  public void test339() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    int var44 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var34);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JMenu var47 = var45.createLookAndFeelMenu();
    java.lang.Character var48 = new java.lang.Character('a');
    var47.setMnemonic(var48);
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    javax.swing.JRootPane var52 = var50.getRootPane();
    javax.swing.JLayeredPane var53 = var50.getLayeredPane();
    int var54 = (-1);
    int var55 = 0;
    org.jhotdraw.standard.StandardDrawingView var56 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var54, var55);
    var56.clearSelection();
    var34.add((java.awt.Component)var47, (java.lang.Object)var56);
    boolean var59 = var47.isSelected();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test340() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.Float var1 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    java.awt.Container var4 = var2.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var5 = new org.jhotdraw.contrib.zoom.ZoomCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    float var6 = var5.getScale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0f);

  }

  public void test341() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 100;
    int var13 = (-1);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.Figure var23 = var0.findFigureInsideWithout(var12, var13, (org.jhotdraw.framework.Figure)var22);
    java.util.Iterator var24 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    javax.swing.JLayeredPane var28 = var25.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    java.awt.Component var36 = var25.add((java.awt.Component)var35);
    boolean var37 = var35.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    java.awt.Dimension var41 = var38.size();
    var35.removeFromSelection((org.jhotdraw.framework.Figure)var38);
    var38.layout();
    java.lang.Object var44 = var38.clone();
    org.jhotdraw.framework.FigureChangeEvent var45 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var38);
    var0.figureRequestUpdate(var45);
    org.jhotdraw.figures.PolyLineFigure var47 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var48 = var47.handles();
    org.jhotdraw.framework.Figure var49 = var0.add((org.jhotdraw.framework.Figure)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test342() throws Throwable {

    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    java.awt.Insets var1 = var0.connectionInsets();
    org.jhotdraw.framework.HandleEnumeration var2 = var0.handles();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JMenu var5 = var3.createLookAndFeelMenu();
    java.lang.String var6 = var5.getName();
    java.lang.String var7 = "";
    int var8 = 100;
    var5.insert(var7, var8);
    int var10 = 100;
    int var11 = 0;
    int var12 = 0;
    int var13 = 10;
    var5.reshape(var10, var11, var12, var13);
    org.jhotdraw.standard.StandardDrawing var15 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.HandleEnumeration var25 = var24.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var28 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var26, (org.jhotdraw.framework.FigureChangeListener)var27);
    org.jhotdraw.framework.Figure var29 = var15.replace((org.jhotdraw.framework.Figure)var24, (org.jhotdraw.framework.Figure)var26);
    org.jhotdraw.framework.Handle var30 = org.jhotdraw.standard.BoxHandleKit.north(var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    var37.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var39 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var37.removeForeground((org.jhotdraw.framework.Painter)var39);
    org.jhotdraw.util.UndoableHandle var41 = new org.jhotdraw.util.UndoableHandle(var30, (org.jhotdraw.framework.DrawingView)var37);
    org.jhotdraw.util.Undoable var42 = var41.getUndoActivity();
    java.awt.Rectangle var43 = var41.displayBox();
    var5.computeVisibleRect(var43);
    java.lang.Double var45 = new java.lang.Double(10.0d);
    java.awt.Point var46 = org.jhotdraw.util.Geom.angleToPoint(var43, var45);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    var0.basicDisplayBox(var46, var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test343() throws Throwable {

    org.jhotdraw.contrib.TriangleFigure var0 = new org.jhotdraw.contrib.TriangleFigure();

  }

  public void test344() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    var10.repaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Dimension var14 = var10.getMinimumSize();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test345() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    int var9 = var2.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test346() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.Color var2 = var0.getForeground();
    var0.endAnimation();
    java.awt.Dimension var4 = var0.getMaximumSize();

  }

  public void test347() throws Throwable {

    org.jhotdraw.contrib.html.ContentProducerRegistry var0 = new org.jhotdraw.contrib.html.ContentProducerRegistry();
    org.jhotdraw.contrib.html.ContentProducerRegistry var1 = new org.jhotdraw.contrib.html.ContentProducerRegistry(var0);
    org.jhotdraw.contrib.html.ContentProducerRegistry var2 = new org.jhotdraw.contrib.html.ContentProducerRegistry();
    org.jhotdraw.contrib.html.ContentProducerRegistry var3 = new org.jhotdraw.contrib.html.ContentProducerRegistry(var2);
    var0.setParent(var3);

  }

  public void test348() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    int var9 = var2.getDebugGraphicsOptions();
    int var10 = 100;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setVerticalAlignment(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test349() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    int var13 = 0;
    var3.setLayer((java.awt.Component)var11, var13);
    java.awt.event.HierarchyListener[] var15 = var11.getHierarchyListeners();
    java.lang.String[] var16 = var11.getRequiredVersions();
    org.jhotdraw.contrib.MDI_DrawApplication var17 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var18 = var17.isDoubleBuffered();
    javax.swing.JRootPane var19 = var17.getRootPane();
    javax.swing.JLayeredPane var20 = var17.getLayeredPane();
    int var21 = (-1);
    int var22 = 0;
    org.jhotdraw.standard.StandardDrawingView var23 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var17, var21, var22);
    var23.clearSelection();
    var23.requestFocus();
    boolean var26 = var23.isDoubleBuffered();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.figureSelectionChanged((org.jhotdraw.framework.DrawingView)var23);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test350() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    java.awt.Color var14 = var12.getForeground();
    var0.setFillColor(var14);
    java.awt.Rectangle var16 = var0.displayBox();
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.awt.Point var18 = org.jhotdraw.util.Geom.ovalAngleToPoint(var16, var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test351() throws Throwable {

    int var0 = 100;
    int var1 = 100;
    int var2 = 100;
    int var3 = 0;
    int var4 = 1;
    int var5 = (-1);
    double var6 = org.jhotdraw.util.Geom.distanceFromLine(var0, var1, var2, var3, var4, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.7976931348623157E308d);

  }

  public void test352() throws Throwable {

    int var0 = 1;
    org.jhotdraw.util.UndoManager var1 = new org.jhotdraw.util.UndoManager(var0);

  }

  public void test353() throws Throwable {

    org.jhotdraw.standard.BufferedUpdateStrategy var0 = new org.jhotdraw.standard.BufferedUpdateStrategy();

  }

  public void test354() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    int var3 = var0.getValue();
    org.jhotdraw.contrib.html.TextHolderContentProducer var4 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var0);
    java.awt.Rectangle var5 = var0.textDisplayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test355() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(1.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    double var55 = var54.getGreaterY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5d);

  }

  public void test356() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    int var17 = var6.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test357() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var48 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var47);
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var50 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var49);
    var47.addDependendFigure((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.framework.Handle var52 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var49);
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    var66.clearSelection();
    java.awt.Color var68 = var66.getForeground();
    var59.setBackground(var68);
    org.jhotdraw.framework.FigureEnumeration var70 = var59.selectionZOrdered();
    org.jhotdraw.contrib.MDI_DrawApplication var71 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var72 = var71.isDoubleBuffered();
    javax.swing.JRootPane var73 = var71.getRootPane();
    javax.swing.JLayeredPane var74 = var71.getLayeredPane();
    int var75 = (-1);
    int var76 = 0;
    org.jhotdraw.standard.StandardDrawingView var77 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var71, var75, var76);
    org.jhotdraw.contrib.MDI_DrawApplication var78 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var79 = var78.isDoubleBuffered();
    javax.swing.JRootPane var80 = var78.getRootPane();
    javax.swing.JLayeredPane var81 = var78.getLayeredPane();
    int var82 = (-1);
    int var83 = 0;
    org.jhotdraw.standard.StandardDrawingView var84 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var78, var82, var83);
    var84.clearSelection();
    java.awt.Color var86 = var84.getForeground();
    var77.setBackground(var86);
    org.jhotdraw.framework.FigureEnumeration var88 = var77.selectionZOrdered();
    var59.addToSelectionAll(var88);
    boolean var90 = var22.figureExists((org.jhotdraw.framework.Figure)var49, var88);
    var88.reset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test358() throws Throwable {

    org.jhotdraw.samples.javadraw.BouncingDrawing var0 = new org.jhotdraw.samples.javadraw.BouncingDrawing();

  }

  public void test359() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    java.awt.event.InputMethodListener[] var5 = var2.getInputMethodListeners();
    boolean var6 = var2.isRolloverEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test360() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    java.awt.Color var8 = var6.getForeground();
    org.jhotdraw.framework.Tool var9 = var6.tool();
    int var10 = 1;
    int var11 = 1;
    org.jhotdraw.contrib.PolygonFigure var12 = new org.jhotdraw.contrib.PolygonFigure(var10, var11);
    org.jhotdraw.framework.FigureEnumeration var13 = var12.figures();
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    var12.basicDisplayBox(var17, var21);
    java.lang.Double var23 = new java.lang.Double(0.0d);
    java.lang.Double var24 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var25 = new org.jhotdraw.standard.RelativeLocator(var23, var24);
    int var26 = 0;
    org.jhotdraw.contrib.PolygonHandle var27 = new org.jhotdraw.contrib.PolygonHandle(var12, (org.jhotdraw.framework.Locator)var25, var26);
    int var28 = 10;
    int var29 = 1;
    int var30 = 0;
    int var31 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    var38.clearSelection();
    org.jhotdraw.util.UndoableAdapter var40 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var38);
    java.awt.Dimension var41 = var38.getPreferredSize();
    var27.invokeEnd(var28, var29, var30, var31, (org.jhotdraw.framework.DrawingView)var38);
    int var43 = 0;
    int var44 = 1;
    org.jhotdraw.standard.StandardDrawing var45 = new org.jhotdraw.standard.StandardDrawing();
    int var46 = 1;
    int var47 = 1;
    org.jhotdraw.contrib.PolygonFigure var48 = new org.jhotdraw.contrib.PolygonFigure(var46, var47);
    org.jhotdraw.framework.FigureEnumeration var49 = var48.figures();
    java.awt.Rectangle var50 = var48.displayBox();
    int var51 = 1;
    int var52 = 1;
    org.jhotdraw.contrib.PolygonFigure var53 = new org.jhotdraw.contrib.PolygonFigure(var51, var52);
    org.jhotdraw.framework.FigureEnumeration var54 = var53.figures();
    java.awt.Rectangle var55 = var53.displayBox();
    org.jhotdraw.framework.Figure var56 = var45.findFigure(var50, (org.jhotdraw.framework.Figure)var53);
    var27.invokeEnd(var43, var44, (org.jhotdraw.framework.Drawing)var45);
    java.awt.Rectangle var58 = var27.displayBox();
    var6.scrollRectToVisible(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == null);

  }

  public void test361() throws Throwable {

    org.jhotdraw.contrib.html.ResourceManagerNotSetException var0 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    org.jhotdraw.contrib.html.ResourceManagerNotSetException var1 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    java.lang.Throwable var2 = var0.initCause((java.lang.Throwable)var1);
    java.lang.StackTraceElement[] var3 = var0.getStackTrace();

  }

  public void test362() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    int var10 = 100;
    int var11 = 100;
    org.jhotdraw.standard.GridConstrainer var12 = new org.jhotdraw.standard.GridConstrainer(var10, var11);
    var6.setConstrainer((org.jhotdraw.framework.PointConstrainer)var12);
    int var14 = var12.getStepY();
    int var15 = var12.getStepY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100);

  }

  public void test363() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    java.awt.Dimension var3 = var0.size();
    org.jhotdraw.framework.Locator var4 = org.jhotdraw.standard.RelativeLocator.east();
    org.jhotdraw.standard.LocatorConnector var5 = new org.jhotdraw.standard.LocatorConnector((org.jhotdraw.framework.Figure)var0, var4);

  }

  public void test364() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var3 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    int var4 = 1;
    int var5 = 0;
    boolean var6 = var3.containsPoint(var4, var5);
    org.jhotdraw.contrib.TextAreaTool var7 = new org.jhotdraw.contrib.TextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var3);
    boolean var8 = var7.isUsable();
    boolean var9 = var7.isActivated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test365() throws Throwable {

    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    var0.basicDisplayBox(var4, var8);
    java.awt.Shape var10 = var0.getShape();

  }

  public void test366() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.util.StandardStorageFormat var24 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var25 = var24.getFileDescription();
    java.lang.String var26 = "hi!";
    org.jhotdraw.standard.StandardDrawing var27 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var28 = new java.lang.Double((-1.0d));
    java.lang.Double var29 = new java.lang.Double(100.0d);
    java.lang.Double var30 = new java.lang.Double(1.0d);
    java.awt.Point var31 = org.jhotdraw.util.Geom.polarToPoint(var28, var29, var30);
    java.lang.Double var32 = new java.lang.Double((-1.0d));
    java.lang.Double var33 = new java.lang.Double(100.0d);
    java.lang.Double var34 = new java.lang.Double(1.0d);
    java.awt.Point var35 = org.jhotdraw.util.Geom.polarToPoint(var32, var33, var34);
    org.jhotdraw.contrib.DiamondFigure var36 = new org.jhotdraw.contrib.DiamondFigure(var31, var35);
    org.jhotdraw.framework.HandleEnumeration var37 = var36.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var40 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var38, (org.jhotdraw.framework.FigureChangeListener)var39);
    org.jhotdraw.framework.Figure var41 = var27.replace((org.jhotdraw.framework.Figure)var36, (org.jhotdraw.framework.Figure)var38);
    java.lang.String var42 = var24.store(var26, (org.jhotdraw.framework.Drawing)var27);
    org.jhotdraw.framework.FigureEnumeration var43 = var27.figures();
    var17.orphanAll(var43);
    org.jhotdraw.framework.FigureEnumeration var45 = var17.figures();
    org.jhotdraw.framework.Locator var46 = org.jhotdraw.standard.RelativeLocator.center();
    org.jhotdraw.standard.LocatorHandle var47 = new org.jhotdraw.standard.LocatorHandle((org.jhotdraw.framework.Figure)var17, var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42.equals("hi!.draw"));

  }

  public void test367() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    org.jhotdraw.framework.DrawingView var3 = org.jhotdraw.standard.NullDrawingView.getManagedDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.standard.StandardDrawing var4 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    java.lang.Double var9 = new java.lang.Double((-1.0d));
    java.lang.Double var10 = new java.lang.Double(100.0d);
    java.lang.Double var11 = new java.lang.Double(1.0d);
    java.awt.Point var12 = org.jhotdraw.util.Geom.polarToPoint(var9, var10, var11);
    org.jhotdraw.contrib.DiamondFigure var13 = new org.jhotdraw.contrib.DiamondFigure(var8, var12);
    org.jhotdraw.framework.HandleEnumeration var14 = var13.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var17 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var15, (org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.Figure var18 = var4.replace((org.jhotdraw.framework.Figure)var13, (org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.framework.Handle var19 = org.jhotdraw.standard.BoxHandleKit.north(var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var28 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var26.removeForeground((org.jhotdraw.framework.Painter)var28);
    org.jhotdraw.util.UndoableHandle var30 = new org.jhotdraw.util.UndoableHandle(var19, (org.jhotdraw.framework.DrawingView)var26);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    var44.clearSelection();
    java.awt.Color var46 = var44.getForeground();
    var37.setBackground(var46);
    org.jhotdraw.framework.FigureEnumeration var48 = var37.selectionZOrdered();
    var48.reset();
    var26.addToSelectionAll(var48);
    java.lang.Double var51 = new java.lang.Double((-1.0d));
    java.lang.Double var52 = new java.lang.Double(100.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    java.awt.Point var54 = org.jhotdraw.util.Geom.polarToPoint(var51, var52, var53);
    java.awt.Point var55 = var26.getLocation(var54);
    var26.disable();
    var0.setLocationRelativeTo((java.awt.Component)var26);
    org.jhotdraw.util.StorageFormatManager var58 = var0.getStorageFormatManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == null);

  }

  public void test368() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = "hi!";
    java.lang.Long var8 = new java.lang.Long(100L);
    java.lang.Long var9 = new java.lang.Long(1L);
    var6.firePropertyChange(var7, var8, var9);
    int var11 = var6.getX();
    var2.setAttribute(var3, (java.lang.Object)var11);
    org.jhotdraw.standard.StandardDrawing var13 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.HandleEnumeration var23 = var22.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    org.jhotdraw.framework.Figure var27 = var13.replace((org.jhotdraw.framework.Figure)var22, (org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Handle var28 = org.jhotdraw.standard.BoxHandleKit.north(var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var37 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var35.removeForeground((org.jhotdraw.framework.Painter)var37);
    org.jhotdraw.util.UndoableHandle var39 = new org.jhotdraw.util.UndoableHandle(var28, (org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    javax.swing.JLayeredPane var50 = var47.getLayeredPane();
    int var51 = (-1);
    int var52 = 0;
    org.jhotdraw.standard.StandardDrawingView var53 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var47, var51, var52);
    var53.clearSelection();
    java.awt.Color var55 = var53.getForeground();
    var46.setBackground(var55);
    org.jhotdraw.framework.FigureEnumeration var57 = var46.selectionZOrdered();
    var57.reset();
    var35.addToSelectionAll(var57);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.awt.Point var64 = var35.getLocation(var63);
    java.awt.Point var65 = var2.chop(var64);
    var2.willChange();
    java.lang.Double var67 = new java.lang.Double((-1.0d));
    java.lang.Double var68 = new java.lang.Double(100.0d);
    java.lang.Double var69 = new java.lang.Double(1.0d);
    java.awt.Point var70 = org.jhotdraw.util.Geom.polarToPoint(var67, var68, var69);
    java.lang.Double var71 = new java.lang.Double((-1.0d));
    java.lang.Double var72 = new java.lang.Double(100.0d);
    java.lang.Double var73 = new java.lang.Double(1.0d);
    java.awt.Point var74 = org.jhotdraw.util.Geom.polarToPoint(var71, var72, var73);
    org.jhotdraw.figures.EllipseFigure var75 = new org.jhotdraw.figures.EllipseFigure(var70, var74);
    java.awt.Rectangle var76 = var75.displayBox();
    org.jhotdraw.framework.FigureChangeEvent var77 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var2, var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test369() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.figures.PolyLineFigure var17 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.contrib.NestedCreationTool var18 = new org.jhotdraw.contrib.NestedCreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.lang.Double var20 = new java.lang.Double(100.0d);
    org.jhotdraw.standard.RelativeLocator var21 = new org.jhotdraw.standard.RelativeLocator(var19, var20);
    int var22 = (-1);
    org.jhotdraw.figures.PolyLineHandle var23 = new org.jhotdraw.figures.PolyLineHandle(var17, (org.jhotdraw.framework.Locator)var21, var22);
    int var24 = 1;
    int var25 = 1;
    int var26 = 0;
    int var27 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    boolean var41 = var38.requestDefaultFocus();
    java.lang.String var42 = "hi!";
    java.lang.Character var43 = new java.lang.Character(' ');
    java.lang.Character var44 = new java.lang.Character(' ');
    var38.firePropertyChange(var42, var43, var44);
    boolean var46 = var38.isReadOnly();
    org.jhotdraw.contrib.ClippingUpdateStrategy var47 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var38.removeBackground((org.jhotdraw.framework.Painter)var47);
    var23.invokeEnd(var24, var25, var26, var27, (org.jhotdraw.framework.DrawingView)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test370() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var0.setUndecorated(var10);
    int var12 = 10;
    var0.setExtendedState(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JRootPane var16 = var14.getRootPane();
    javax.swing.JLayeredPane var17 = var14.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    int var22 = (-1);
    int var23 = 0;
    org.jhotdraw.standard.StandardDrawingView var24 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var18, var22, var23);
    java.awt.Component var25 = var14.add((java.awt.Component)var24);
    org.jhotdraw.framework.Tool var26 = var24.tool();
    java.lang.Boolean var27 = new java.lang.Boolean(false);
    var24.setVisible(var27);
    org.jhotdraw.contrib.dnd.JHDDragSourceListener var29 = new org.jhotdraw.contrib.dnd.JHDDragSourceListener((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.DrawingView)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);

  }

  public void test371() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var18 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.standard.StandardDrawing var19 = new org.jhotdraw.standard.StandardDrawing();
    int var20 = var17.getLayer((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.contrib.MDI_DrawApplication var21 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var22 = var21.isDoubleBuffered();
    javax.swing.JRootPane var23 = var21.getRootPane();
    javax.swing.JLayeredPane var24 = var21.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JRootPane var27 = var25.getRootPane();
    javax.swing.JLayeredPane var28 = var25.getLayeredPane();
    int var29 = (-1);
    int var30 = 0;
    org.jhotdraw.standard.StandardDrawingView var31 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var25, var29, var30);
    java.awt.Component var32 = var21.add((java.awt.Component)var31);
    boolean var33 = var31.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var36 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var34, (org.jhotdraw.framework.FigureChangeListener)var35);
    java.awt.Dimension var37 = var34.size();
    var31.removeFromSelection((org.jhotdraw.framework.Figure)var34);
    var34.layout();
    java.lang.Object var40 = var34.clone();
    org.jhotdraw.framework.FigureChangeEvent var41 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var34);
    java.lang.Object var42 = var41.getSource();
    var19.figureInvalidated(var41);
    java.lang.Double var44 = new java.lang.Double((-1.0d));
    java.lang.Double var45 = new java.lang.Double(100.0d);
    java.lang.Double var46 = new java.lang.Double(1.0d);
    java.awt.Point var47 = org.jhotdraw.util.Geom.polarToPoint(var44, var45, var46);
    java.lang.Double var48 = new java.lang.Double((-1.0d));
    java.lang.Double var49 = new java.lang.Double(100.0d);
    java.lang.Double var50 = new java.lang.Double(1.0d);
    java.awt.Point var51 = org.jhotdraw.util.Geom.polarToPoint(var48, var49, var50);
    org.jhotdraw.figures.EllipseFigure var52 = new org.jhotdraw.figures.EllipseFigure(var47, var51);
    boolean var53 = var19.containsFigure((org.jhotdraw.framework.Figure)var52);
    org.jhotdraw.figures.ArrowTip var54 = new org.jhotdraw.figures.ArrowTip();
    int var55 = 1;
    int var56 = 1;
    int var57 = 10;
    int var58 = 0;
    java.awt.Polygon var59 = var54.outline(var55, var56, var57, var58);
    org.jhotdraw.contrib.MDI_DrawApplication var60 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var61 = var60.isDoubleBuffered();
    javax.swing.JRootPane var62 = var60.getRootPane();
    javax.swing.JLayeredPane var63 = var60.getLayeredPane();
    int var64 = (-1);
    int var65 = 0;
    org.jhotdraw.standard.StandardDrawingView var66 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var60, var64, var65);
    var66.clearSelection();
    java.awt.Color var68 = var66.getForeground();
    var54.setFillColor(var68);
    java.awt.Rectangle var70 = var54.displayBox();
    org.jhotdraw.framework.FigureChangeEvent var71 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var19, var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Figure var72 = var6.add((org.jhotdraw.framework.Figure)var19);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test372() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    int var48 = 0;
    int var49 = (-1);
    int var50 = 1;
    int var51 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    int var56 = (-1);
    int var57 = 0;
    org.jhotdraw.standard.StandardDrawingView var58 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var52, var56, var57);
    var58.clearSelection();
    org.jhotdraw.util.UndoableAdapter var60 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var58);
    java.awt.Container var61 = var58.getFocusCycleRootAncestor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var17.invokeStep(var48, var49, var50, var51, (org.jhotdraw.framework.DrawingView)var58);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);

  }

  public void test373() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    java.lang.Boolean var10 = new java.lang.Boolean(false);
    var0.setUndecorated(var10);
    int var12 = 10;
    var0.setExtendedState(var12);
    java.awt.Component[] var14 = var0.getComponents();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    var21.clearSelection();
    org.jhotdraw.util.UndoableAdapter var23 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var21);
    java.awt.Dimension var24 = var21.getPreferredSize();
    var0.setSize(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test374() throws Throwable {

    org.jhotdraw.contrib.html.AttributeFigureContentProducer var0 = new org.jhotdraw.contrib.html.AttributeFigureContentProducer();

  }

  public void test375() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();

  }

  public void test376() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    int var1 = 100;
    int var2 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Connector var3 = var0.connectorAt(var1, var2);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test377() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.framework.Tool var3 = var1.tool();
    java.awt.FocusTraversalPolicy var4 = var1.getFocusTraversalPolicy();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var6 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var7 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var5, (org.jhotdraw.framework.FigureChangeListener)var6);
    java.awt.Dimension var8 = var5.size();
    var1.resize(var8);
    org.jhotdraw.standard.DuplicateCommand var10 = new org.jhotdraw.standard.DuplicateCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);

  }

  public void test378() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    int var6 = 1;
    javax.swing.JMenuItem var7 = var2.getItem(var6);
    java.awt.Toolkit var8 = var7.getToolkit();
    float var9 = var7.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);

  }

  public void test379() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.framework.Tool var12 = var10.tool();
    org.jhotdraw.contrib.MDI_DrawApplication var13 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var14 = var13.isDoubleBuffered();
    javax.swing.JRootPane var15 = var13.getRootPane();
    java.lang.String var16 = var15.getUIClassID();
    java.awt.Insets var17 = var15.getInsets();
    java.awt.Insets var18 = var10.getInsets(var17);
    java.lang.Object var19 = var10.getTreeLock();
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    java.lang.String var27 = var26.getUIClassID();
    java.awt.Insets var28 = var26.getInsets();
    int var29 = (-1);
    var23.setPosition((java.awt.Component)var26, var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    int var33 = 0;
    var23.setLayer((java.awt.Component)var31, var33);
    java.awt.event.HierarchyListener[] var35 = var31.getHierarchyListeners();
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test380() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    int var1 = var0.overlayColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);

  }

  public void test381() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    var2.release();
    org.jhotdraw.figures.ArrowTip var28 = new org.jhotdraw.figures.ArrowTip();
    int var29 = 1;
    int var30 = 1;
    int var31 = 10;
    int var32 = 0;
    java.awt.Polygon var33 = var28.outline(var29, var30, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var28.setFillColor(var42);
    java.awt.Rectangle var44 = var28.displayBox();
    var2.init(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test382() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    int var17 = var6.getX();
    boolean var18 = var6.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test383() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    org.jhotdraw.figures.TextFigure var2 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var3 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var2);
    var0.setResource((java.lang.Object)var2);
    org.jhotdraw.standard.SingleFigureEnumerator var5 = new org.jhotdraw.standard.SingleFigureEnumerator((org.jhotdraw.framework.Figure)var2);

  }

  public void test384() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    var28.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test385() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    var13.clearSelection();
    java.awt.Color var15 = var13.getForeground();
    var6.setBackground(var15);
    org.jhotdraw.framework.FigureSelection var17 = var6.getFigureSelection();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test386() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Figure var1 = var0.getObservedFigure();
    org.jhotdraw.standard.TextHolder var2 = var0.getTextHolder();
    java.lang.String var3 = "";
    org.jhotdraw.util.StandardStorageFormat var4 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var5 = var4.getFileDescription();
    java.lang.String var6 = "hi!";
    org.jhotdraw.standard.StandardDrawing var7 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    org.jhotdraw.contrib.DiamondFigure var16 = new org.jhotdraw.contrib.DiamondFigure(var11, var15);
    org.jhotdraw.framework.HandleEnumeration var17 = var16.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    org.jhotdraw.framework.Figure var21 = var7.replace((org.jhotdraw.framework.Figure)var16, (org.jhotdraw.framework.Figure)var18);
    java.lang.String var22 = var4.store(var6, (org.jhotdraw.framework.Drawing)var7);
    java.lang.String var23 = "";
    var4.setFileExtension(var23);
    javax.swing.filechooser.FileFilter var25 = var4.getFileFilter();
    java.lang.String var26 = "hi!";
    org.jhotdraw.framework.Drawing var27 = var4.restore(var26);
    var0.setAttribute(var3, (java.lang.Object)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22.equals("hi!.draw"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == null);

  }

  public void test387() throws Throwable {

    org.jhotdraw.standard.FigureChangeAdapter var0 = new org.jhotdraw.standard.FigureChangeAdapter();

  }

  public void test388() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    org.jhotdraw.framework.DrawingEditor var10 = var6.editor();
    int var11 = var6.getComponentCount();
    java.awt.im.InputContext var12 = var6.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test389() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    boolean var3 = var1.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var5 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var6 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var4, (org.jhotdraw.framework.FigureChangeListener)var5);
    int var7 = var5.getZValue();
    java.lang.Object var8 = var5.clone();
    org.jhotdraw.standard.CreationTool var9 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var1, (org.jhotdraw.framework.Figure)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Locator var10 = var0.connectedTextLocator((org.jhotdraw.framework.Figure)var5);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test390() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    long var1 = var0.getLastTimeAccessed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);

  }

  public void test391() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.awt.Rectangle var4 = var2.displayBox();
    org.jhotdraw.util.Bounds var5 = new org.jhotdraw.util.Bounds((java.awt.geom.Rectangle2D)var4);
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.util.Bounds var11 = new org.jhotdraw.util.Bounds((java.awt.geom.Rectangle2D)var10);
    java.lang.Double var12 = new java.lang.Double((-1.0d));
    java.lang.Double var13 = new java.lang.Double(100.0d);
    java.lang.Double var14 = new java.lang.Double(1.0d);
    java.awt.Point var15 = org.jhotdraw.util.Geom.polarToPoint(var12, var13, var14);
    var11.setCenter((java.awt.geom.Point2D)var15);
    boolean var17 = var5.isCompletelyInside(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test392() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    int var9 = var2.getDebugGraphicsOptions();
    java.lang.Boolean var10 = new java.lang.Boolean(true);
    var2.enable(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test393() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var42 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var40.removeForeground((org.jhotdraw.framework.Painter)var42);
    org.jhotdraw.util.UndoableHandle var44 = new org.jhotdraw.util.UndoableHandle(var33, (org.jhotdraw.framework.DrawingView)var40);
    org.jhotdraw.contrib.MDI_DrawApplication var45 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var46 = var45.isDoubleBuffered();
    javax.swing.JRootPane var47 = var45.getRootPane();
    javax.swing.JLayeredPane var48 = var45.getLayeredPane();
    int var49 = (-1);
    int var50 = 0;
    org.jhotdraw.standard.StandardDrawingView var51 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var45, var49, var50);
    org.jhotdraw.contrib.MDI_DrawApplication var52 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var53 = var52.isDoubleBuffered();
    javax.swing.JRootPane var54 = var52.getRootPane();
    javax.swing.JLayeredPane var55 = var52.getLayeredPane();
    int var56 = (-1);
    int var57 = 0;
    org.jhotdraw.standard.StandardDrawingView var58 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var52, var56, var57);
    var58.clearSelection();
    java.awt.Color var60 = var58.getForeground();
    var51.setBackground(var60);
    org.jhotdraw.framework.FigureEnumeration var62 = var51.selectionZOrdered();
    var62.reset();
    var40.addToSelectionAll(var62);
    java.lang.Double var65 = new java.lang.Double((-1.0d));
    java.lang.Double var66 = new java.lang.Double(100.0d);
    java.lang.Double var67 = new java.lang.Double(1.0d);
    java.awt.Point var68 = org.jhotdraw.util.Geom.polarToPoint(var65, var66, var67);
    java.awt.Point var69 = var40.getLocation(var68);
    java.lang.Double var70 = new java.lang.Double((-1.0d));
    java.lang.Double var71 = new java.lang.Double(100.0d);
    java.lang.Double var72 = new java.lang.Double(1.0d);
    java.awt.Point var73 = org.jhotdraw.util.Geom.polarToPoint(var70, var71, var72);
    var2.basicDisplayBox(var69, var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test394() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var18 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var20 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var19);
    var17.addDependendFigure((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.standard.CreationTool var23 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var19);
    var19.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test395() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    org.jhotdraw.contrib.JPanelDesktop var2 = new org.jhotdraw.contrib.JPanelDesktop((org.jhotdraw.application.DrawApplication)var0);
    int var3 = 0;
    var2.removeAllFromDesktop(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    java.awt.Component var16 = var5.add((java.awt.Component)var15);
    boolean var17 = var15.getInheritsPopupMenu();
    boolean var18 = var15.requestDefaultFocus();
    boolean var19 = var15.getAutoscrolls();
    int var20 = 100;
    int var21 = (-1);
    var15.setLocation(var20, var21);
    int var23 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.addToDesktop((org.jhotdraw.framework.DrawingView)var15, var23);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test396() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var6 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter(var5);
    org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter var7 = new org.jhotdraw.contrib.html.PolygonFigureGeometricAdapter(var5);
    java.awt.Insets var8 = var7.connectionInsets();

  }

  public void test397() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    java.awt.Dimension var31 = var10.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test398() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    int var7 = 0;
    int var8 = 0;
    org.jhotdraw.standard.StandardDrawingView var9 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var7, var8);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var10 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var10.start();
    org.jhotdraw.framework.Tool var12 = var10.tool();
    var10.transferFocus();
    var9.addFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    var9.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test399() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    org.jhotdraw.framework.FigureEnumeration var7 = var6.selectionZOrdered();
    boolean var8 = var6.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test400() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var18 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var20 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var19);
    var17.addDependendFigure((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.framework.Handle var22 = org.jhotdraw.standard.BoxHandleKit.northWest((org.jhotdraw.framework.Figure)var19);
    org.jhotdraw.standard.CreationTool var23 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var19);
    var19.update();
    org.jhotdraw.contrib.TextAreaFigure var25 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var26 = "";
    var25.setText(var26);
    org.jhotdraw.contrib.html.TextHolderContentProducer var28 = new org.jhotdraw.contrib.html.TextHolderContentProducer((org.jhotdraw.standard.TextHolder)var25);
    org.jhotdraw.framework.Figure var29 = var19.remove((org.jhotdraw.framework.Figure)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test401() throws Throwable {

    int var0 = 100;
    int var1 = 10;
    org.jhotdraw.figures.PolyLineFigure var2 = new org.jhotdraw.figures.PolyLineFigure(var0, var1);
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    org.jhotdraw.framework.Handle var18 = org.jhotdraw.standard.BoxHandleKit.north(var17);
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    var25.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var27 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var25.removeForeground((org.jhotdraw.framework.Painter)var27);
    org.jhotdraw.util.UndoableHandle var29 = new org.jhotdraw.util.UndoableHandle(var18, (org.jhotdraw.framework.DrawingView)var25);
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    org.jhotdraw.contrib.MDI_DrawApplication var37 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var38 = var37.isDoubleBuffered();
    javax.swing.JRootPane var39 = var37.getRootPane();
    javax.swing.JLayeredPane var40 = var37.getLayeredPane();
    int var41 = (-1);
    int var42 = 0;
    org.jhotdraw.standard.StandardDrawingView var43 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var37, var41, var42);
    var43.clearSelection();
    java.awt.Color var45 = var43.getForeground();
    var36.setBackground(var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var36.selectionZOrdered();
    var47.reset();
    var25.addToSelectionAll(var47);
    java.lang.Double var50 = new java.lang.Double((-1.0d));
    java.lang.Double var51 = new java.lang.Double(100.0d);
    java.lang.Double var52 = new java.lang.Double(1.0d);
    java.awt.Point var53 = org.jhotdraw.util.Geom.polarToPoint(var50, var51, var52);
    java.awt.Point var54 = var25.getLocation(var53);
    int var55 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.insertPointAt(var53, var55);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test402() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.Float var1 = new java.lang.Float(1.0f);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    java.awt.Container var4 = var2.getFocusCycleRootAncestor();
    org.jhotdraw.contrib.zoom.ZoomCommand var5 = new org.jhotdraw.contrib.zoom.ZoomCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    float var6 = var5.getScale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.execute();
      fail("Expected exception of type org.jhotdraw.framework.JHotDrawRuntimeException");
    } catch (org.jhotdraw.framework.JHotDrawRuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0f);

  }

  public void test403() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    java.awt.Insets var37 = var33.getInsets();
    javax.swing.TransferHandler var38 = var33.getTransferHandler();
    java.awt.Graphics var39 = var33.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == null);

  }

  public void test404() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    boolean var27 = var22.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test405() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    var2.removeNotify();
    int var6 = 100;
    int var7 = (-1);
    boolean var8 = var2.contains(var6, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test406() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.framework.Figure var26 = var17.findFigureInside(var24, var25);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    java.awt.Component var38 = var27.add((java.awt.Component)var37);
    boolean var39 = var37.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var42 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var40, (org.jhotdraw.framework.FigureChangeListener)var41);
    java.awt.Dimension var43 = var40.size();
    var37.removeFromSelection((org.jhotdraw.framework.Figure)var40);
    var40.layout();
    java.lang.Object var46 = var40.clone();
    int var47 = 1;
    int var48 = 1;
    org.jhotdraw.contrib.PolygonFigure var49 = new org.jhotdraw.contrib.PolygonFigure(var47, var48);
    org.jhotdraw.framework.FigureEnumeration var50 = var49.figures();
    java.awt.Rectangle var51 = var49.displayBox();
    org.jhotdraw.framework.Figure var52 = var17.replace((org.jhotdraw.framework.Figure)var40, (org.jhotdraw.framework.Figure)var49);
    var17.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test407() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test408() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var8 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var6.removeForeground((org.jhotdraw.framework.Painter)var8);
    int var10 = 100;
    int var11 = 100;
    org.jhotdraw.standard.GridConstrainer var12 = new org.jhotdraw.standard.GridConstrainer(var10, var11);
    var6.setConstrainer((org.jhotdraw.framework.PointConstrainer)var12);
    java.lang.Long var14 = new java.lang.Long(1L);
    int var15 = 10;
    int var16 = 1;
    int var17 = 10;
    int var18 = 0;
    var6.repaint(var14, var15, var16, var17, var18);
    java.awt.event.ComponentListener[] var20 = var6.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test409() throws Throwable {

    org.jhotdraw.samples.javadraw.BouncingDrawing var0 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    var0.animationStep();

  }

  public void test410() throws Throwable {

    org.jhotdraw.figures.GroupFigure var0 = new org.jhotdraw.figures.GroupFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var2 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    int var4 = var1.getLayer((org.jhotdraw.framework.Figure)var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    java.awt.Component var16 = var5.add((java.awt.Component)var15);
    boolean var17 = var15.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    java.awt.Dimension var21 = var18.size();
    var15.removeFromSelection((org.jhotdraw.framework.Figure)var18);
    var18.layout();
    java.lang.Object var24 = var18.clone();
    org.jhotdraw.framework.FigureChangeEvent var25 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var18);
    java.lang.Object var26 = var25.getSource();
    var3.figureInvalidated(var25);
    var0.figureChanged(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test411() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.awt.Rectangle var4 = var2.displayBox();
    org.jhotdraw.util.Bounds var5 = new org.jhotdraw.util.Bounds((java.awt.geom.Rectangle2D)var4);
    java.lang.Double var6 = new java.lang.Double((-1.0d));
    java.lang.Double var7 = new java.lang.Double(100.0d);
    java.lang.Double var8 = new java.lang.Double(1.0d);
    java.awt.Point var9 = org.jhotdraw.util.Geom.polarToPoint(var6, var7, var8);
    var5.setCenter((java.awt.geom.Point2D)var9);
    java.lang.String var11 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11.equals("54.0 0.0 54.0 0.0"));

  }

  public void test412() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    java.lang.String var8 = var7.getUIClassID();
    java.awt.Insets var9 = var7.getInsets();
    int var10 = (-1);
    var4.setPosition((java.awt.Component)var7, var10);
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    int var14 = 0;
    var4.setLayer((java.awt.Component)var12, var14);
    org.jhotdraw.figures.UngroupCommand var16 = new org.jhotdraw.figures.UngroupCommand(var0, (org.jhotdraw.framework.DrawingEditor)var12);
    org.jhotdraw.util.Undoable var17 = var16.getUndoActivity();
    org.jhotdraw.contrib.CommandCheckBoxMenuItem var18 = new org.jhotdraw.contrib.CommandCheckBoxMenuItem((org.jhotdraw.util.Command)var16);
    java.lang.String var19 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var20 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var20.start();
    org.jhotdraw.standard.CopyCommand var22 = new org.jhotdraw.standard.CopyCommand(var19, (org.jhotdraw.framework.DrawingEditor)var20);
    var22.dispose();
    var18.setCommand((org.jhotdraw.util.Command)var22);
    java.lang.Object[] var25 = var18.getSelectedObjects();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == null);

  }

  public void test413() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 100;
    int var34 = (-1);
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var36 = new java.lang.Double((-1.0d));
    java.lang.Double var37 = new java.lang.Double(100.0d);
    java.lang.Double var38 = new java.lang.Double(1.0d);
    java.awt.Point var39 = org.jhotdraw.util.Geom.polarToPoint(var36, var37, var38);
    java.lang.Double var40 = new java.lang.Double((-1.0d));
    java.lang.Double var41 = new java.lang.Double(100.0d);
    java.lang.Double var42 = new java.lang.Double(1.0d);
    java.awt.Point var43 = org.jhotdraw.util.Geom.polarToPoint(var40, var41, var42);
    org.jhotdraw.contrib.DiamondFigure var44 = new org.jhotdraw.contrib.DiamondFigure(var39, var43);
    org.jhotdraw.framework.HandleEnumeration var45 = var44.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var46 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var47 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var48 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var46, (org.jhotdraw.framework.FigureChangeListener)var47);
    org.jhotdraw.framework.Figure var49 = var35.replace((org.jhotdraw.framework.Figure)var44, (org.jhotdraw.framework.Figure)var46);
    java.util.Iterator var50 = var35.drawingChangeListeners();
    org.jhotdraw.figures.ArrowTip var51 = new org.jhotdraw.figures.ArrowTip();
    int var52 = 1;
    int var53 = 1;
    int var54 = 10;
    int var55 = 0;
    java.awt.Polygon var56 = var51.outline(var52, var53, var54, var55);
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    javax.swing.JLayeredPane var60 = var57.getLayeredPane();
    int var61 = (-1);
    int var62 = 0;
    org.jhotdraw.standard.StandardDrawingView var63 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var57, var61, var62);
    var63.clearSelection();
    java.awt.Color var65 = var63.getForeground();
    var51.setFillColor(var65);
    java.awt.Rectangle var67 = var51.displayBox();
    var35.init(var67);
    java.lang.String var69 = "hi!";
    var35.setTitle(var69);
    var17.invokeStep(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test414() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    org.jhotdraw.contrib.GraphicalCompositeFigure var2 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var4 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var2, (org.jhotdraw.framework.FigureChangeListener)var3);
    boolean var5 = var1.remove((java.lang.Object)var2);
    org.jhotdraw.util.collections.jdk11.ListWrapper var6 = new org.jhotdraw.util.collections.jdk11.ListWrapper((java.util.Collection)var1);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JMenu var9 = var7.createLookAndFeelMenu();
    var7.open();
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    int var19 = (-1);
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var15, var19, var20);
    java.awt.Component var22 = var11.add((java.awt.Component)var21);
    boolean var23 = var21.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    java.awt.Dimension var27 = var24.size();
    var21.removeFromSelection((org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    java.awt.Component var40 = var29.add((java.awt.Component)var39);
    var21.setEditor((org.jhotdraw.framework.DrawingEditor)var29);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var46 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var47 = var46.isDoubleBuffered();
    javax.swing.JRootPane var48 = var46.getRootPane();
    java.lang.String var49 = var48.getUIClassID();
    java.awt.Insets var50 = var48.getInsets();
    int var51 = (-1);
    var45.setPosition((java.awt.Component)var48, var51);
    boolean var53 = var45.isDisplayable();
    boolean var54 = var21.isFocusCycleRoot((java.awt.Container)var45);
    var7.setLayeredPane(var45);
    boolean var56 = var6.remove((java.lang.Object)var45);
    int var57 = 0;
    java.util.ListIterator var58 = var6.listIterator(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test415() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    java.util.Iterator var15 = var0.drawingChangeListeners();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var0.addToContainer((org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.figures.NullConnector var21 = new org.jhotdraw.figures.NullConnector((org.jhotdraw.framework.Figure)var16);
    org.jhotdraw.framework.FigureChangeListener var22 = var16.listener();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == null);

  }

  public void test416() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    var13.layout();
    var13.update();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test417() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    int var44 = 1;
    int var45 = 100;
    boolean var46 = var2.containsPoint(var44, var45);
    org.jhotdraw.util.StandardStorageFormat var47 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var48 = var47.getFileDescription();
    java.lang.String var49 = "hi!";
    org.jhotdraw.standard.StandardDrawing var50 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var51 = new java.lang.Double((-1.0d));
    java.lang.Double var52 = new java.lang.Double(100.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    java.awt.Point var54 = org.jhotdraw.util.Geom.polarToPoint(var51, var52, var53);
    java.lang.Double var55 = new java.lang.Double((-1.0d));
    java.lang.Double var56 = new java.lang.Double(100.0d);
    java.lang.Double var57 = new java.lang.Double(1.0d);
    java.awt.Point var58 = org.jhotdraw.util.Geom.polarToPoint(var55, var56, var57);
    org.jhotdraw.contrib.DiamondFigure var59 = new org.jhotdraw.contrib.DiamondFigure(var54, var58);
    org.jhotdraw.framework.HandleEnumeration var60 = var59.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    org.jhotdraw.framework.Figure var64 = var50.replace((org.jhotdraw.framework.Figure)var59, (org.jhotdraw.framework.Figure)var61);
    java.lang.String var65 = var47.store(var49, (org.jhotdraw.framework.Drawing)var50);
    org.jhotdraw.framework.FigureEnumeration var66 = var50.figures();
    org.jhotdraw.standard.InsertIntoDrawingVisitor var67 = new org.jhotdraw.standard.InsertIntoDrawingVisitor((org.jhotdraw.framework.Drawing)var50);
    var2.visit((org.jhotdraw.framework.FigureVisitor)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65.equals("hi!.draw"));

  }

  public void test418() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    java.lang.String var38 = var37.getUIClassID();
    java.awt.Insets var39 = var37.getInsets();
    int var40 = (-1);
    var34.setPosition((java.awt.Component)var37, var40);
    boolean var42 = var34.isDisplayable();
    boolean var43 = var10.isFocusCycleRoot((java.awt.Container)var34);
    int var44 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var34);
    java.lang.String var45 = "hi!";
    java.lang.Short var46 = new java.lang.Short((short)0);
    java.lang.Short var47 = new java.lang.Short((short)(-1));
    var34.firePropertyChange(var45, var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    java.lang.String var52 = var51.getUIClassID();
    java.awt.Insets var53 = var51.getInsets();
    java.awt.Insets var54 = var34.getInsets(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52.equals("RootPaneUI"));

  }

  public void test419() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    int var2 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.createBufferStrategy(var2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test420() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    java.awt.Dimension var16 = var13.size();
    var10.removeFromSelection((org.jhotdraw.framework.Figure)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var18 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var19 = var18.isDoubleBuffered();
    javax.swing.JRootPane var20 = var18.getRootPane();
    javax.swing.JLayeredPane var21 = var18.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    java.awt.Component var29 = var18.add((java.awt.Component)var28);
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var18);
    javax.swing.InputVerifier var31 = var10.getInputVerifier();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    java.lang.String var39 = var38.getUIClassID();
    java.awt.Insets var40 = var38.getInsets();
    int var41 = (-1);
    var35.setPosition((java.awt.Component)var38, var41);
    org.jhotdraw.contrib.MDI_DrawApplication var43 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var44 = var43.isDoubleBuffered();
    int var45 = 0;
    var35.setLayer((java.awt.Component)var43, var45);
    java.awt.event.HierarchyListener[] var47 = var43.getHierarchyListeners();
    var10.setEditor((org.jhotdraw.framework.DrawingEditor)var43);
    java.lang.Boolean var49 = new java.lang.Boolean(true);
    var43.setVisible(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test421() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    int var10 = 100;
    int var11 = (-1);
    int var12 = (-1);
    int var13 = (-1);
    var2.reshape(var10, var11, var12, var13);
    boolean var15 = var2.isContentAreaFilled();
    javax.swing.InputVerifier var16 = var2.getInputVerifier();
    int var17 = 0;
    org.jhotdraw.util.PaletteLayout var18 = new org.jhotdraw.util.PaletteLayout(var17);
    var2.setLayout((java.awt.LayoutManager)var18);
    javax.swing.JRootPane var20 = var2.getRootPane();
    java.lang.Boolean var21 = new java.lang.Boolean(true);
    var2.setEnabled(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == null);

  }

  public void test422() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    javax.swing.JInternalFrame var10 = var9.getSelectedFrame();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);

  }

  public void test423() throws Throwable {

    org.jhotdraw.samples.javadraw.BouncingDrawing var0 = new org.jhotdraw.samples.javadraw.BouncingDrawing();
    var0.animationStep();
    var0.animationStep();

  }

  public void test424() throws Throwable {

    org.jhotdraw.contrib.html.DisposableResourceManager var0 = org.jhotdraw.contrib.html.DisposableResourceManagerFactory.getManager();
    var0.startDisposing();

  }

  public void test425() throws Throwable {

    org.jhotdraw.figures.NumberTextFigure var0 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var1 = var0.getText();
    int var2 = var0.overlayColumns();
    int var3 = var0.getValue();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var12 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var13 = var12.isDoubleBuffered();
    javax.swing.JRootPane var14 = var12.getRootPane();
    javax.swing.JLayeredPane var15 = var12.getLayeredPane();
    int var16 = (-1);
    int var17 = 0;
    org.jhotdraw.standard.StandardDrawingView var18 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var12, var16, var17);
    java.awt.Component var19 = var8.add((java.awt.Component)var18);
    boolean var20 = var18.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var22 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var23 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var21, (org.jhotdraw.framework.FigureChangeListener)var22);
    java.awt.Dimension var24 = var21.size();
    var18.removeFromSelection((org.jhotdraw.framework.Figure)var21);
    var21.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var27 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var4, (org.jhotdraw.framework.Figure)var21);
    int var28 = (-1);
    int var29 = 0;
    org.jhotdraw.framework.Figure var30 = var21.findFigureInside(var28, var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var35 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var36 = var35.isDoubleBuffered();
    javax.swing.JRootPane var37 = var35.getRootPane();
    javax.swing.JLayeredPane var38 = var35.getLayeredPane();
    int var39 = (-1);
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var35, var39, var40);
    java.awt.Component var42 = var31.add((java.awt.Component)var41);
    boolean var43 = var41.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var44 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var45 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var46 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var44, (org.jhotdraw.framework.FigureChangeListener)var45);
    java.awt.Dimension var47 = var44.size();
    var41.removeFromSelection((org.jhotdraw.framework.Figure)var44);
    var44.layout();
    java.lang.Object var50 = var44.clone();
    int var51 = 1;
    int var52 = 1;
    org.jhotdraw.contrib.PolygonFigure var53 = new org.jhotdraw.contrib.PolygonFigure(var51, var52);
    org.jhotdraw.framework.FigureEnumeration var54 = var53.figures();
    java.awt.Rectangle var55 = var53.displayBox();
    org.jhotdraw.framework.Figure var56 = var21.replace((org.jhotdraw.framework.Figure)var44, (org.jhotdraw.framework.Figure)var53);
    var0.addDependendFigure((org.jhotdraw.framework.Figure)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test426() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    var0.toFront();
    float var5 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);

  }

  public void test427() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var1 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var0);
    java.util.Iterator var2 = var1.iterator();
    org.jhotdraw.util.ReverseListEnumerator var3 = new org.jhotdraw.util.ReverseListEnumerator((java.util.List)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = var3.next();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  public void test428() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    var2.revalidate();
    int var5 = var2.getIconTextGap();
    boolean var6 = var2.isTopLevelMenu();
    boolean var7 = var2.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test429() throws Throwable {

    org.jhotdraw.util.StandardStorageFormat var0 = new org.jhotdraw.util.StandardStorageFormat();
    java.lang.String var1 = var0.getFileDescription();
    java.lang.String var2 = "hi!";
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    org.jhotdraw.contrib.DiamondFigure var12 = new org.jhotdraw.contrib.DiamondFigure(var7, var11);
    org.jhotdraw.framework.HandleEnumeration var13 = var12.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var16 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var14, (org.jhotdraw.framework.FigureChangeListener)var15);
    org.jhotdraw.framework.Figure var17 = var3.replace((org.jhotdraw.framework.Figure)var12, (org.jhotdraw.framework.Figure)var14);
    java.lang.String var18 = var0.store(var2, (org.jhotdraw.framework.Drawing)var3);
    org.jhotdraw.framework.FigureEnumeration var19 = var3.figures();
    org.jhotdraw.standard.InsertIntoDrawingVisitor var20 = new org.jhotdraw.standard.InsertIntoDrawingVisitor((org.jhotdraw.framework.Drawing)var3);
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var22 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var21);
    var20.visitFigureChangeListener((org.jhotdraw.framework.FigureChangeListener)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Internal Format (draw)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18.equals("hi!.draw"));

  }

  public void test430() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = (-1);
    int var19 = 10;
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var21 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var20);
    org.jhotdraw.standard.StandardDrawing var22 = new org.jhotdraw.standard.StandardDrawing();
    int var23 = var20.getLayer((org.jhotdraw.framework.Figure)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    javax.swing.JRootPane var26 = var24.getRootPane();
    javax.swing.JLayeredPane var27 = var24.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    int var32 = (-1);
    int var33 = 0;
    org.jhotdraw.standard.StandardDrawingView var34 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var28, var32, var33);
    java.awt.Component var35 = var24.add((java.awt.Component)var34);
    boolean var36 = var34.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var37 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var38 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var39 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var37, (org.jhotdraw.framework.FigureChangeListener)var38);
    java.awt.Dimension var40 = var37.size();
    var34.removeFromSelection((org.jhotdraw.framework.Figure)var37);
    var37.layout();
    java.lang.Object var43 = var37.clone();
    org.jhotdraw.framework.FigureChangeEvent var44 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var37);
    java.lang.Object var45 = var44.getSource();
    var22.figureInvalidated(var44);
    int var47 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var48 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var47);
    java.util.Iterator var49 = var48.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var50 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var51 = var50.isDoubleBuffered();
    boolean var52 = var50.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var53 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var54 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var55 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var53, (org.jhotdraw.framework.FigureChangeListener)var54);
    int var56 = var54.getZValue();
    java.lang.Object var57 = var54.clone();
    org.jhotdraw.standard.CreationTool var58 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var50, (org.jhotdraw.framework.Figure)var54);
    int var59 = 1;
    int var60 = 0;
    org.jhotdraw.standard.StandardDrawingView var61 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var50, var59, var60);
    boolean var62 = var48.contains((java.lang.Object)var60);
    var22.orphanAll((java.util.List)var48);
    var17.invokeStep(var18, var19, (org.jhotdraw.framework.Drawing)var22);
    int var65 = 1;
    int var66 = 100;
    org.jhotdraw.standard.StandardDrawing var67 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.contrib.MDI_DrawApplication var68 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var69 = var68.isDoubleBuffered();
    javax.swing.JRootPane var70 = var68.getRootPane();
    javax.swing.JLayeredPane var71 = var68.getLayeredPane();
    int var72 = (-1);
    int var73 = 0;
    org.jhotdraw.standard.StandardDrawingView var74 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var68, var72, var73);
    var74.clearSelection();
    org.jhotdraw.util.UndoableAdapter var76 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var74);
    var67.removeDrawingChangeListener((org.jhotdraw.framework.DrawingChangeListener)var74);
    var17.invokeEnd(var65, var66, (org.jhotdraw.framework.Drawing)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test431() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    int var13 = 0;
    var3.setLayer((java.awt.Component)var11, var13);
    java.awt.event.HierarchyListener[] var15 = var11.getHierarchyListeners();
    java.lang.String[] var16 = var11.getRequiredVersions();
    java.awt.Window[] var17 = var11.getOwnedWindows();
    int var18 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var19 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var18);
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    boolean var23 = var19.remove((java.lang.Object)var20);
    org.jhotdraw.contrib.MDI_DrawApplication var24 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var25 = var24.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var26 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var24);
    boolean var27 = var24.isCursorSet();
    org.jhotdraw.contrib.dnd.DragNDropTool var28 = new org.jhotdraw.contrib.dnd.DragNDropTool((org.jhotdraw.framework.DrawingEditor)var24);
    var28.deactivate();
    int var30 = var19.indexOf((java.lang.Object)var28);
    var11.setIconImages((java.util.List)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));

  }

  public void test432() throws Throwable {

    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var0 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var0.resetDelay();
    var0.lock();
    long var3 = var0.getLastTimeAccessed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1261293178648L);

  }

  public void test433() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.awt.Graphics var4 = var0.getGraphics();
    java.util.Locale var5 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test434() throws Throwable {

    org.jhotdraw.figures.ArrowTip var0 = new org.jhotdraw.figures.ArrowTip();
    int var1 = 1;
    int var2 = 1;
    int var3 = 10;
    int var4 = 0;
    java.awt.Polygon var5 = var0.outline(var1, var2, var3, var4);
    org.jhotdraw.standard.StandardDrawing var6 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var7 = new java.lang.Double((-1.0d));
    java.lang.Double var8 = new java.lang.Double(100.0d);
    java.lang.Double var9 = new java.lang.Double(1.0d);
    java.awt.Point var10 = org.jhotdraw.util.Geom.polarToPoint(var7, var8, var9);
    java.lang.Double var11 = new java.lang.Double((-1.0d));
    java.lang.Double var12 = new java.lang.Double(100.0d);
    java.lang.Double var13 = new java.lang.Double(1.0d);
    java.awt.Point var14 = org.jhotdraw.util.Geom.polarToPoint(var11, var12, var13);
    org.jhotdraw.contrib.DiamondFigure var15 = new org.jhotdraw.contrib.DiamondFigure(var10, var14);
    org.jhotdraw.framework.HandleEnumeration var16 = var15.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    org.jhotdraw.framework.Figure var20 = var6.replace((org.jhotdraw.framework.Figure)var15, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.framework.Handle var21 = org.jhotdraw.standard.BoxHandleKit.north(var20);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var30 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var28.removeForeground((org.jhotdraw.framework.Painter)var30);
    org.jhotdraw.util.UndoableHandle var32 = new org.jhotdraw.util.UndoableHandle(var21, (org.jhotdraw.framework.DrawingView)var28);
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    var46.clearSelection();
    java.awt.Color var48 = var46.getForeground();
    var39.setBackground(var48);
    org.jhotdraw.framework.FigureEnumeration var50 = var39.selectionZOrdered();
    var50.reset();
    var28.addToSelectionAll(var50);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    java.lang.Double var54 = new java.lang.Double(100.0d);
    java.lang.Double var55 = new java.lang.Double(1.0d);
    java.awt.Point var56 = org.jhotdraw.util.Geom.polarToPoint(var53, var54, var55);
    java.awt.Point var57 = var28.getLocation(var56);
    java.awt.Point var58 = org.jhotdraw.contrib.PolygonFigure.chop(var5, var56);
    java.lang.Double var59 = new java.lang.Double((-1.0d));
    java.lang.Double var60 = new java.lang.Double(100.0d);
    java.lang.Double var61 = new java.lang.Double(1.0d);
    java.awt.Point var62 = org.jhotdraw.util.Geom.polarToPoint(var59, var60, var61);
    java.awt.Point var63 = org.jhotdraw.contrib.PolygonFigure.chop(var5, var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test435() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    boolean var22 = var16.getInheritsPopupMenu();
    java.lang.Boolean var23 = new java.lang.Boolean(true);
    var16.setIgnoreRepaint(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test436() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    java.lang.Boolean var13 = new java.lang.Boolean(true);
    var10.setEnabled(var13);
    org.jhotdraw.contrib.MDI_DrawApplication var15 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var16 = var15.isDoubleBuffered();
    javax.swing.JRootPane var17 = var15.getRootPane();
    javax.swing.JLayeredPane var18 = var15.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var19 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var20 = var19.isDoubleBuffered();
    javax.swing.JRootPane var21 = var19.getRootPane();
    javax.swing.JLayeredPane var22 = var19.getLayeredPane();
    int var23 = (-1);
    int var24 = 0;
    org.jhotdraw.standard.StandardDrawingView var25 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var19, var23, var24);
    java.awt.Component var26 = var15.add((java.awt.Component)var25);
    boolean var27 = var25.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var28 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var30 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var28, (org.jhotdraw.framework.FigureChangeListener)var29);
    java.awt.Dimension var31 = var28.size();
    var25.removeFromSelection((org.jhotdraw.framework.Figure)var28);
    var28.layout();
    java.lang.Object var34 = var28.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jhotdraw.framework.Figure var35 = var10.remove((org.jhotdraw.framework.Figure)var28);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test437() throws Throwable {

    org.jhotdraw.util.collections.jdk11.SetWrapper var0 = new org.jhotdraw.util.collections.jdk11.SetWrapper();
    int var1 = var0.size();
    int var2 = var0.size();
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    int var4 = 1;
    int var5 = 1;
    org.jhotdraw.contrib.PolygonFigure var6 = new org.jhotdraw.contrib.PolygonFigure(var4, var5);
    org.jhotdraw.framework.FigureEnumeration var7 = var6.figures();
    java.awt.Rectangle var8 = var6.displayBox();
    int var9 = 1;
    int var10 = 1;
    org.jhotdraw.contrib.PolygonFigure var11 = new org.jhotdraw.contrib.PolygonFigure(var9, var10);
    org.jhotdraw.framework.FigureEnumeration var12 = var11.figures();
    java.awt.Rectangle var13 = var11.displayBox();
    org.jhotdraw.framework.Figure var14 = var3.findFigure(var8, (org.jhotdraw.framework.Figure)var11);
    int var15 = 100;
    int var16 = (-1);
    java.lang.Double var17 = new java.lang.Double((-1.0d));
    java.lang.Double var18 = new java.lang.Double(100.0d);
    java.lang.Double var19 = new java.lang.Double(1.0d);
    java.awt.Point var20 = org.jhotdraw.util.Geom.polarToPoint(var17, var18, var19);
    java.lang.Double var21 = new java.lang.Double((-1.0d));
    java.lang.Double var22 = new java.lang.Double(100.0d);
    java.lang.Double var23 = new java.lang.Double(1.0d);
    java.awt.Point var24 = org.jhotdraw.util.Geom.polarToPoint(var21, var22, var23);
    org.jhotdraw.contrib.DiamondFigure var25 = new org.jhotdraw.contrib.DiamondFigure(var20, var24);
    org.jhotdraw.framework.Figure var26 = var3.findFigureInsideWithout(var15, var16, (org.jhotdraw.framework.Figure)var25);
    java.util.Iterator var27 = var3.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var28 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var29 = var28.isDoubleBuffered();
    javax.swing.JRootPane var30 = var28.getRootPane();
    javax.swing.JLayeredPane var31 = var28.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var32 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var33 = var32.isDoubleBuffered();
    javax.swing.JRootPane var34 = var32.getRootPane();
    javax.swing.JLayeredPane var35 = var32.getLayeredPane();
    int var36 = (-1);
    int var37 = 0;
    org.jhotdraw.standard.StandardDrawingView var38 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var32, var36, var37);
    java.awt.Component var39 = var28.add((java.awt.Component)var38);
    boolean var40 = var38.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var41 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var42 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var43 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var41, (org.jhotdraw.framework.FigureChangeListener)var42);
    java.awt.Dimension var44 = var41.size();
    var38.removeFromSelection((org.jhotdraw.framework.Figure)var41);
    var41.layout();
    java.lang.Object var47 = var41.clone();
    org.jhotdraw.framework.FigureChangeEvent var48 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var41);
    var3.figureRequestUpdate(var48);
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var51 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var52 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var50, (org.jhotdraw.framework.FigureChangeListener)var51);
    java.awt.Dimension var53 = var50.size();
    var3.sendToBack((org.jhotdraw.framework.Figure)var50);
    int var55 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var56 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var55);
    java.util.Iterator var57 = var56.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var58 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var59 = var58.isDoubleBuffered();
    boolean var60 = var58.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var61 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var63 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var61, (org.jhotdraw.framework.FigureChangeListener)var62);
    int var64 = var62.getZValue();
    java.lang.Object var65 = var62.clone();
    org.jhotdraw.standard.CreationTool var66 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var58, (org.jhotdraw.framework.Figure)var62);
    int var67 = 1;
    int var68 = 0;
    org.jhotdraw.standard.StandardDrawingView var69 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var58, var67, var68);
    boolean var70 = var56.contains((java.lang.Object)var68);
    var50.addAll((java.util.List)var56);
    boolean var72 = var0.containsAll((java.util.Collection)var56);
    int var73 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var74 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var73);
    org.jhotdraw.contrib.GraphicalCompositeFigure var75 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var77 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var75, (org.jhotdraw.framework.FigureChangeListener)var76);
    boolean var78 = var74.remove((java.lang.Object)var75);
    org.jhotdraw.contrib.GraphicalCompositeFigure var79 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var80 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var81 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var79, (org.jhotdraw.framework.FigureChangeListener)var80);
    int var82 = var80.getZValue();
    java.lang.Object var83 = var80.clone();
    org.jhotdraw.framework.FigureChangeListener var84 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var75, (org.jhotdraw.framework.FigureChangeListener)var80);
    boolean var85 = var0.remove((java.lang.Object)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test438() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    int var1 = 1;
    int var2 = 1;
    org.jhotdraw.contrib.PolygonFigure var3 = new org.jhotdraw.contrib.PolygonFigure(var1, var2);
    org.jhotdraw.framework.FigureEnumeration var4 = var3.figures();
    java.awt.Rectangle var5 = var3.displayBox();
    int var6 = 1;
    int var7 = 1;
    org.jhotdraw.contrib.PolygonFigure var8 = new org.jhotdraw.contrib.PolygonFigure(var6, var7);
    org.jhotdraw.framework.FigureEnumeration var9 = var8.figures();
    java.awt.Rectangle var10 = var8.displayBox();
    org.jhotdraw.framework.Figure var11 = var0.findFigure(var5, (org.jhotdraw.framework.Figure)var8);
    int var12 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var13 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var12);
    var0.orphanAll((java.util.List)var13);
    java.lang.String var15 = var0.getTitle();
    int var16 = 1;
    int var17 = 100;
    org.jhotdraw.figures.NumberTextFigure var18 = new org.jhotdraw.figures.NumberTextFigure();
    java.lang.String var19 = var18.getText();
    int var20 = var18.overlayColumns();
    int var21 = var18.getValue();
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    javax.swing.JRootPane var32 = var30.getRootPane();
    javax.swing.JLayeredPane var33 = var30.getLayeredPane();
    int var34 = (-1);
    int var35 = 0;
    org.jhotdraw.standard.StandardDrawingView var36 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var34, var35);
    java.awt.Component var37 = var26.add((java.awt.Component)var36);
    boolean var38 = var36.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var39 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var40 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var41 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var39, (org.jhotdraw.framework.FigureChangeListener)var40);
    java.awt.Dimension var42 = var39.size();
    var36.removeFromSelection((org.jhotdraw.framework.Figure)var39);
    var39.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var45 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var22, (org.jhotdraw.framework.Figure)var39);
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.framework.Figure var48 = var39.findFigureInside(var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    int var57 = (-1);
    int var58 = 0;
    org.jhotdraw.standard.StandardDrawingView var59 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var53, var57, var58);
    java.awt.Component var60 = var49.add((java.awt.Component)var59);
    boolean var61 = var59.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var62 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var63 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var64 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var62, (org.jhotdraw.framework.FigureChangeListener)var63);
    java.awt.Dimension var65 = var62.size();
    var59.removeFromSelection((org.jhotdraw.framework.Figure)var62);
    var62.layout();
    java.lang.Object var68 = var62.clone();
    int var69 = 1;
    int var70 = 1;
    org.jhotdraw.contrib.PolygonFigure var71 = new org.jhotdraw.contrib.PolygonFigure(var69, var70);
    org.jhotdraw.framework.FigureEnumeration var72 = var71.figures();
    java.awt.Rectangle var73 = var71.displayBox();
    org.jhotdraw.framework.Figure var74 = var39.replace((org.jhotdraw.framework.Figure)var62, (org.jhotdraw.framework.Figure)var71);
    var18.addDependendFigure((org.jhotdraw.framework.Figure)var39);
    org.jhotdraw.framework.Figure var76 = var0.findFigureWithout(var16, var17, (org.jhotdraw.framework.Figure)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == null);

  }

  public void test439() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    java.lang.Double var8 = new java.lang.Double((-1.0d));
    java.lang.Double var9 = new java.lang.Double(100.0d);
    java.lang.Double var10 = new java.lang.Double(1.0d);
    java.awt.Point var11 = org.jhotdraw.util.Geom.polarToPoint(var8, var9, var10);
    var2.basicDisplayBox(var7, var11);
    java.lang.Double var13 = new java.lang.Double(0.0d);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    org.jhotdraw.standard.RelativeLocator var15 = new org.jhotdraw.standard.RelativeLocator(var13, var14);
    int var16 = 0;
    org.jhotdraw.contrib.PolygonHandle var17 = new org.jhotdraw.contrib.PolygonHandle(var2, (org.jhotdraw.framework.Locator)var15, var16);
    int var18 = 10;
    int var19 = 1;
    int var20 = 0;
    int var21 = (-1);
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    int var26 = (-1);
    int var27 = 0;
    org.jhotdraw.standard.StandardDrawingView var28 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var22, var26, var27);
    var28.clearSelection();
    org.jhotdraw.util.UndoableAdapter var30 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var28);
    java.awt.Dimension var31 = var28.getPreferredSize();
    var17.invokeEnd(var18, var19, var20, var21, (org.jhotdraw.framework.DrawingView)var28);
    int var33 = 0;
    int var34 = 1;
    org.jhotdraw.standard.StandardDrawing var35 = new org.jhotdraw.standard.StandardDrawing();
    int var36 = 1;
    int var37 = 1;
    org.jhotdraw.contrib.PolygonFigure var38 = new org.jhotdraw.contrib.PolygonFigure(var36, var37);
    org.jhotdraw.framework.FigureEnumeration var39 = var38.figures();
    java.awt.Rectangle var40 = var38.displayBox();
    int var41 = 1;
    int var42 = 1;
    org.jhotdraw.contrib.PolygonFigure var43 = new org.jhotdraw.contrib.PolygonFigure(var41, var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var43.figures();
    java.awt.Rectangle var45 = var43.displayBox();
    org.jhotdraw.framework.Figure var46 = var35.findFigure(var40, (org.jhotdraw.framework.Figure)var43);
    var17.invokeEnd(var33, var34, (org.jhotdraw.framework.Drawing)var35);
    java.awt.Rectangle var48 = var17.displayBox();
    org.jhotdraw.framework.Cursor var49 = var17.getCursor();
    org.jhotdraw.framework.Cursor var50 = var17.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test440() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();

  }

  public void test441() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);

  }

  public void test442() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = "";
    int var5 = 100;
    var2.insert(var4, var5);
    boolean var7 = var2.isFocusPainted();
    java.lang.String var8 = "";
    var2.setLabel(var8);
    javax.swing.ButtonModel var10 = var2.getModel();
    java.awt.Dimension var11 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test443() throws Throwable {

    java.lang.String var0 = "hi!";
    java.lang.String var1 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    javax.swing.JMenu var4 = var2.createLookAndFeelMenu();
    var2.open();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    var12.clearSelection();
    org.jhotdraw.util.UndoableAdapter var14 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var12);
    java.awt.Dimension var15 = var12.getPreferredSize();
    var2.setMinimumSize(var15);
    int var17 = 10;
    int var18 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var19 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var2, var17, var18);
    org.jhotdraw.figures.InsertImageCommand var20 = new org.jhotdraw.figures.InsertImageCommand(var0, var1, (org.jhotdraw.framework.DrawingEditor)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test444() throws Throwable {

    java.lang.Double var0 = new java.lang.Double((-1.0d));
    java.lang.Double var1 = new java.lang.Double(100.0d);
    java.lang.Double var2 = new java.lang.Double(1.0d);
    java.awt.Point var3 = org.jhotdraw.util.Geom.polarToPoint(var0, var1, var2);
    java.lang.Double var4 = new java.lang.Double((-1.0d));
    java.lang.Double var5 = new java.lang.Double(100.0d);
    java.lang.Double var6 = new java.lang.Double(1.0d);
    java.awt.Point var7 = org.jhotdraw.util.Geom.polarToPoint(var4, var5, var6);
    org.jhotdraw.contrib.DiamondFigure var8 = new org.jhotdraw.contrib.DiamondFigure(var3, var7);
    org.jhotdraw.framework.HandleEnumeration var9 = var8.handles();
    java.lang.Double var10 = new java.lang.Double((-1.0d));
    java.lang.Double var11 = new java.lang.Double(100.0d);
    java.lang.Double var12 = new java.lang.Double(1.0d);
    java.awt.Point var13 = org.jhotdraw.util.Geom.polarToPoint(var10, var11, var12);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    var8.basicDisplayBox(var13, var17);
    org.jhotdraw.framework.Handle var19 = org.jhotdraw.standard.BoxHandleKit.west((org.jhotdraw.framework.Figure)var8);
    int var20 = (-1);
    int var21 = 10;
    org.jhotdraw.contrib.MDI_DrawApplication var22 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var23 = var22.isDoubleBuffered();
    javax.swing.JRootPane var24 = var22.getRootPane();
    javax.swing.JLayeredPane var25 = var22.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var26 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var27 = var26.isDoubleBuffered();
    javax.swing.JRootPane var28 = var26.getRootPane();
    javax.swing.JLayeredPane var29 = var26.getLayeredPane();
    int var30 = (-1);
    int var31 = 0;
    org.jhotdraw.standard.StandardDrawingView var32 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var26, var30, var31);
    java.awt.Component var33 = var22.add((java.awt.Component)var32);
    boolean var34 = var32.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var35 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var36 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var37 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var35, (org.jhotdraw.framework.FigureChangeListener)var36);
    java.awt.Dimension var38 = var35.size();
    var32.removeFromSelection((org.jhotdraw.framework.Figure)var35);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var44 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var45 = var44.isDoubleBuffered();
    javax.swing.JRootPane var46 = var44.getRootPane();
    javax.swing.JLayeredPane var47 = var44.getLayeredPane();
    int var48 = (-1);
    int var49 = 0;
    org.jhotdraw.standard.StandardDrawingView var50 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var44, var48, var49);
    java.awt.Component var51 = var40.add((java.awt.Component)var50);
    var32.setEditor((org.jhotdraw.framework.DrawingEditor)var40);
    org.jhotdraw.contrib.MDI_DrawApplication var53 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var54 = var53.isDoubleBuffered();
    javax.swing.JRootPane var55 = var53.getRootPane();
    javax.swing.JLayeredPane var56 = var53.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var57 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var58 = var57.isDoubleBuffered();
    javax.swing.JRootPane var59 = var57.getRootPane();
    java.lang.String var60 = var59.getUIClassID();
    java.awt.Insets var61 = var59.getInsets();
    int var62 = (-1);
    var56.setPosition((java.awt.Component)var59, var62);
    boolean var64 = var56.isDisplayable();
    boolean var65 = var32.isFocusCycleRoot((java.awt.Container)var56);
    int var66 = javax.swing.JLayeredPane.getLayer((javax.swing.JComponent)var56);
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JMenu var69 = var67.createLookAndFeelMenu();
    java.lang.Character var70 = new java.lang.Character('a');
    var69.setMnemonic(var70);
    org.jhotdraw.contrib.MDI_DrawApplication var72 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var73 = var72.isDoubleBuffered();
    javax.swing.JRootPane var74 = var72.getRootPane();
    javax.swing.JLayeredPane var75 = var72.getLayeredPane();
    int var76 = (-1);
    int var77 = 0;
    org.jhotdraw.standard.StandardDrawingView var78 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var72, var76, var77);
    var78.clearSelection();
    var56.add((java.awt.Component)var69, (java.lang.Object)var78);
    java.lang.String var81 = "hi!";
    java.lang.Character var82 = new java.lang.Character(' ');
    java.lang.Character var83 = new java.lang.Character('a');
    var78.firePropertyChange(var81, var82, var83);
    var19.invokeStart(var20, var21, (org.jhotdraw.framework.DrawingView)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test445() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.Double var3 = new java.lang.Double((-1.0d));
    java.lang.Double var4 = new java.lang.Double(100.0d);
    java.lang.Double var5 = new java.lang.Double(1.0d);
    java.awt.Point var6 = org.jhotdraw.util.Geom.polarToPoint(var3, var4, var5);
    java.awt.Component var7 = var0.getComponentAt(var6);
    int var8 = var0.getDefaultCloseOperation();
    org.jhotdraw.contrib.MDIDesktopPane var9 = new org.jhotdraw.contrib.MDIDesktopPane((org.jhotdraw.application.DrawApplication)var0);
    var9.arrangeFramesHorizontally();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test446() throws Throwable {

    org.jhotdraw.contrib.html.ResourceManagerNotSetException var0 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    org.jhotdraw.contrib.html.ResourceManagerNotSetException var1 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    java.lang.Throwable var2 = var0.initCause((java.lang.Throwable)var1);
    java.lang.StackTraceElement[] var3 = var0.getStackTrace();
    org.jhotdraw.framework.JHotDrawException var4 = new org.jhotdraw.framework.JHotDrawException((java.lang.Exception)var0);

  }

  public void test447() throws Throwable {

    int var0 = 1;
    org.jhotdraw.util.UndoManager var1 = new org.jhotdraw.util.UndoManager(var0);
    org.jhotdraw.contrib.MDI_DrawApplication var2 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var3 = var2.isDoubleBuffered();
    javax.swing.JRootPane var4 = var2.getRootPane();
    javax.swing.JLayeredPane var5 = var2.getLayeredPane();
    int var6 = (-1);
    int var7 = 0;
    org.jhotdraw.standard.StandardDrawingView var8 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var2, var6, var7);
    var8.clearSelection();
    org.jhotdraw.util.UndoableAdapter var10 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var8);
    boolean var11 = var10.undo();
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    var10.setUndoable(var12);
    boolean var14 = var10.undo();
    org.jhotdraw.util.Undoable var15 = org.jhotdraw.util.UndoRedoActivity.createUndoRedoActivity((org.jhotdraw.util.Undoable)var10);
    var1.pushUndo(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test448() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.awt.Font var89 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var90 = var35.getFontMetrics(var89);
    java.lang.String var91 = var35.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91.equals("hi!"));

  }

  public void test449() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    int var1 = var0.overlayColumns();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 20);

  }

  public void test450() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    org.jhotdraw.figures.PolyLineFigure var1 = new org.jhotdraw.figures.PolyLineFigure();
    org.jhotdraw.framework.HandleEnumeration var2 = var1.handles();
    org.jhotdraw.framework.Figure var3 = var0.remove((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var5 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var4);
    int var6 = 1;
    int var7 = (-1);
    boolean var8 = var4.containsPoint(var6, var7);
    var1.addFigureChangeListener((org.jhotdraw.framework.FigureChangeListener)var4);
    int var10 = 100;
    int var11 = (-1);
    int var12 = 10;
    int var13 = 0;
    int var14 = 100;
    int var15 = (-1);
    int var16 = 1;
    int var17 = 1;
    java.awt.Point var18 = org.jhotdraw.util.Geom.intersect(var10, var11, var12, var13, var14, var15, var16, var17);
    int var19 = 1;
    int var20 = 1;
    org.jhotdraw.contrib.PolygonFigure var21 = new org.jhotdraw.contrib.PolygonFigure(var19, var20);
    java.lang.String var22 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    java.lang.String var26 = "hi!";
    java.lang.Long var27 = new java.lang.Long(100L);
    java.lang.Long var28 = new java.lang.Long(1L);
    var25.firePropertyChange(var26, var27, var28);
    int var30 = var25.getX();
    var21.setAttribute(var22, (java.lang.Object)var30);
    org.jhotdraw.standard.StandardDrawing var32 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var33 = new java.lang.Double((-1.0d));
    java.lang.Double var34 = new java.lang.Double(100.0d);
    java.lang.Double var35 = new java.lang.Double(1.0d);
    java.awt.Point var36 = org.jhotdraw.util.Geom.polarToPoint(var33, var34, var35);
    java.lang.Double var37 = new java.lang.Double((-1.0d));
    java.lang.Double var38 = new java.lang.Double(100.0d);
    java.lang.Double var39 = new java.lang.Double(1.0d);
    java.awt.Point var40 = org.jhotdraw.util.Geom.polarToPoint(var37, var38, var39);
    org.jhotdraw.contrib.DiamondFigure var41 = new org.jhotdraw.contrib.DiamondFigure(var36, var40);
    org.jhotdraw.framework.HandleEnumeration var42 = var41.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var43 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var44 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var45 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var43, (org.jhotdraw.framework.FigureChangeListener)var44);
    org.jhotdraw.framework.Figure var46 = var32.replace((org.jhotdraw.framework.Figure)var41, (org.jhotdraw.framework.Figure)var43);
    org.jhotdraw.framework.Handle var47 = org.jhotdraw.standard.BoxHandleKit.north(var46);
    org.jhotdraw.contrib.MDI_DrawApplication var48 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var49 = var48.isDoubleBuffered();
    javax.swing.JRootPane var50 = var48.getRootPane();
    javax.swing.JLayeredPane var51 = var48.getLayeredPane();
    int var52 = (-1);
    int var53 = 0;
    org.jhotdraw.standard.StandardDrawingView var54 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var48, var52, var53);
    var54.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var56 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var54.removeForeground((org.jhotdraw.framework.Painter)var56);
    org.jhotdraw.util.UndoableHandle var58 = new org.jhotdraw.util.UndoableHandle(var47, (org.jhotdraw.framework.DrawingView)var54);
    org.jhotdraw.contrib.MDI_DrawApplication var59 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var60 = var59.isDoubleBuffered();
    javax.swing.JRootPane var61 = var59.getRootPane();
    javax.swing.JLayeredPane var62 = var59.getLayeredPane();
    int var63 = (-1);
    int var64 = 0;
    org.jhotdraw.standard.StandardDrawingView var65 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var59, var63, var64);
    org.jhotdraw.contrib.MDI_DrawApplication var66 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var67 = var66.isDoubleBuffered();
    javax.swing.JRootPane var68 = var66.getRootPane();
    javax.swing.JLayeredPane var69 = var66.getLayeredPane();
    int var70 = (-1);
    int var71 = 0;
    org.jhotdraw.standard.StandardDrawingView var72 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var66, var70, var71);
    var72.clearSelection();
    java.awt.Color var74 = var72.getForeground();
    var65.setBackground(var74);
    org.jhotdraw.framework.FigureEnumeration var76 = var65.selectionZOrdered();
    var76.reset();
    var54.addToSelectionAll(var76);
    java.lang.Double var79 = new java.lang.Double((-1.0d));
    java.lang.Double var80 = new java.lang.Double(100.0d);
    java.lang.Double var81 = new java.lang.Double(1.0d);
    java.awt.Point var82 = org.jhotdraw.util.Geom.polarToPoint(var79, var80, var81);
    java.awt.Point var83 = var54.getLocation(var82);
    java.awt.Point var84 = var21.chop(var83);
    var1.basicDisplayBox(var18, var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test451() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test452() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    int var27 = (-1);
    int var28 = 0;
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var33 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var34 = var33.isDoubleBuffered();
    javax.swing.JRootPane var35 = var33.getRootPane();
    javax.swing.JLayeredPane var36 = var33.getLayeredPane();
    int var37 = (-1);
    int var38 = 0;
    org.jhotdraw.standard.StandardDrawingView var39 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var33, var37, var38);
    java.awt.Component var40 = var29.add((java.awt.Component)var39);
    boolean var41 = var39.getInheritsPopupMenu();
    javax.swing.InputMap var42 = var39.getInputMap();
    var26.invokeStart(var27, var28, (org.jhotdraw.framework.DrawingView)var39);
    int var44 = 10;
    int var45 = (-1);
    org.jhotdraw.framework.Handle var46 = var39.findHandle(var44, var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == null);

  }

  public void test453() throws Throwable {

    org.jhotdraw.util.CommandChoice var0 = new org.jhotdraw.util.CommandChoice();
    javax.swing.Action var1 = var0.getAction();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == null);

  }

  public void test454() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    boolean var4 = var0.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test455() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    org.jhotdraw.contrib.MDI_DrawApplication var34 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var35 = var34.isDoubleBuffered();
    javax.swing.JRootPane var36 = var34.getRootPane();
    javax.swing.JLayeredPane var37 = var34.getLayeredPane();
    int var38 = (-1);
    int var39 = 0;
    org.jhotdraw.standard.StandardDrawingView var40 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var34, var38, var39);
    var40.clearSelection();
    java.awt.Color var42 = var40.getForeground();
    var33.setBackground(var42);
    org.jhotdraw.framework.FigureEnumeration var44 = var33.selectionZOrdered();
    var44.reset();
    var22.addToSelectionAll(var44);
    java.lang.Double var47 = new java.lang.Double((-1.0d));
    java.lang.Double var48 = new java.lang.Double(100.0d);
    java.lang.Double var49 = new java.lang.Double(1.0d);
    java.awt.Point var50 = org.jhotdraw.util.Geom.polarToPoint(var47, var48, var49);
    java.awt.Point var51 = var22.getLocation(var50);
    java.lang.Double var52 = new java.lang.Double(10.0d);
    java.lang.Double var53 = new java.lang.Double((-1.0d));
    org.jhotdraw.util.Bounds var54 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var51, var52, var53);
    int var55 = 100;
    int var56 = (-1);
    int var57 = 10;
    int var58 = 0;
    int var59 = 100;
    int var60 = (-1);
    int var61 = 1;
    int var62 = 1;
    java.awt.Point var63 = org.jhotdraw.util.Geom.intersect(var55, var56, var57, var58, var59, var60, var61, var62);
    var54.setCenter((java.awt.geom.Point2D)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test456() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    org.jhotdraw.framework.FigureEnumeration var3 = var2.figures();
    java.awt.Rectangle var4 = var2.displayBox();
    org.jhotdraw.framework.Handle var5 = org.jhotdraw.standard.BoxHandleKit.east((org.jhotdraw.framework.Figure)var2);
    var2.changed();

  }

  public void test457() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    org.jhotdraw.contrib.Layouter var24 = var17.getLayouter();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test458() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.util.CommandMenu var1 = new org.jhotdraw.util.CommandMenu(var0);

  }

  public void test459() throws Throwable {

    org.jhotdraw.contrib.PolygonFigure var0 = new org.jhotdraw.contrib.PolygonFigure();
    org.jhotdraw.framework.Locator var1 = org.jhotdraw.standard.RelativeLocator.center();
    int var2 = 0;
    org.jhotdraw.contrib.PolygonHandle var3 = new org.jhotdraw.contrib.PolygonHandle(var0, var1, var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    var10.clearSelection();
    org.jhotdraw.util.UndoableAdapter var12 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var10);
    org.jhotdraw.util.UndoableHandle var13 = new org.jhotdraw.util.UndoableHandle((org.jhotdraw.framework.Handle)var3, (org.jhotdraw.framework.DrawingView)var10);
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    var10.autoscroll(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test460() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    java.lang.Boolean var4 = new java.lang.Boolean(true);
    var3.setVerifyInputWhenFocusTarget(var4);
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JRootPane var8 = var6.getRootPane();
    javax.swing.JLayeredPane var9 = var6.getLayeredPane();
    int var10 = (-1);
    int var11 = 0;
    org.jhotdraw.standard.StandardDrawingView var12 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var10, var11);
    int var13 = 0;
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var6, var13, var14);
    java.awt.Color var16 = var6.getBackground();
    var3.setBackground(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test461() throws Throwable {

    org.jhotdraw.figures.TextFigure var0 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var1 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var0);
    var0.changed();
    org.jhotdraw.framework.Figure var3 = var0.getRepresentingFigure();

  }

  public void test462() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    org.jhotdraw.contrib.html.HTMLTextAreaTool var23 = new org.jhotdraw.contrib.html.HTMLTextAreaTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var17);
    boolean var24 = var23.isActivated();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.activate();
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test463() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = "hi!";
    java.lang.Long var4 = new java.lang.Long(100L);
    java.lang.Long var5 = new java.lang.Long(1L);
    var2.firePropertyChange(var3, var4, var5);
    int var7 = var2.getX();
    java.awt.Container var8 = var2.getTopLevelAncestor();
    int var9 = (-1);
    int var10 = (-1);
    java.awt.Image var11 = var8.createImage(var9, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == null);

  }

  public void test464() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    int var36 = var35.getVerticalAlignment();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);

  }

  public void test465() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    java.lang.String var1 = "";
    org.jhotdraw.contrib.html.ResourceManagerNotSetException var2 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    org.jhotdraw.contrib.html.ResourceManagerNotSetException var3 = new org.jhotdraw.contrib.html.ResourceManagerNotSetException();
    java.lang.Throwable var4 = var2.initCause((java.lang.Throwable)var3);
    java.lang.StackTraceElement[] var5 = var2.getStackTrace();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAttribute(var1, (java.lang.Object)var2);
      fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
    }

  }

  public void test466() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    var6.requestFocus();
    boolean var9 = var6.isDoubleBuffered();
    org.jhotdraw.framework.Tool var10 = var6.tool();
    int var11 = var6.selectionCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test467() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    java.lang.String var1 = "";
    var0.setText(var1);
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var4 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var3);
    org.jhotdraw.standard.StandardDrawing var5 = new org.jhotdraw.standard.StandardDrawing();
    int var6 = var3.getLayer((org.jhotdraw.framework.Figure)var5);
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    int var15 = (-1);
    int var16 = 0;
    org.jhotdraw.standard.StandardDrawingView var17 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var11, var15, var16);
    java.awt.Component var18 = var7.add((java.awt.Component)var17);
    boolean var19 = var17.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var20 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var21 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var22 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var20, (org.jhotdraw.framework.FigureChangeListener)var21);
    java.awt.Dimension var23 = var20.size();
    var17.removeFromSelection((org.jhotdraw.framework.Figure)var20);
    var20.layout();
    java.lang.Object var26 = var20.clone();
    org.jhotdraw.framework.FigureChangeEvent var27 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var20);
    java.lang.Object var28 = var27.getSource();
    var5.figureInvalidated(var27);
    var0.figureChanged(var27);
    org.jhotdraw.framework.Handle var31 = org.jhotdraw.standard.BoxHandleKit.southEast((org.jhotdraw.framework.Figure)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test468() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var1 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var0);
    org.jhotdraw.standard.StandardDrawing var2 = new org.jhotdraw.standard.StandardDrawing();
    int var3 = var0.getLayer((org.jhotdraw.framework.Figure)var2);
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var8 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var9 = var8.isDoubleBuffered();
    javax.swing.JRootPane var10 = var8.getRootPane();
    javax.swing.JLayeredPane var11 = var8.getLayeredPane();
    int var12 = (-1);
    int var13 = 0;
    org.jhotdraw.standard.StandardDrawingView var14 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var8, var12, var13);
    java.awt.Component var15 = var4.add((java.awt.Component)var14);
    boolean var16 = var14.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var19 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var17, (org.jhotdraw.framework.FigureChangeListener)var18);
    java.awt.Dimension var20 = var17.size();
    var14.removeFromSelection((org.jhotdraw.framework.Figure)var17);
    var17.layout();
    java.lang.Object var23 = var17.clone();
    org.jhotdraw.framework.FigureChangeEvent var24 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var17);
    java.lang.Object var25 = var24.getSource();
    var2.figureInvalidated(var24);
    int var27 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var28 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var27);
    java.util.Iterator var29 = var28.iterator();
    org.jhotdraw.contrib.MDI_DrawApplication var30 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var31 = var30.isDoubleBuffered();
    boolean var32 = var30.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var33 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var34 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var35 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var33, (org.jhotdraw.framework.FigureChangeListener)var34);
    int var36 = var34.getZValue();
    java.lang.Object var37 = var34.clone();
    org.jhotdraw.standard.CreationTool var38 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var30, (org.jhotdraw.framework.Figure)var34);
    int var39 = 1;
    int var40 = 0;
    org.jhotdraw.standard.StandardDrawingView var41 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var30, var39, var40);
    boolean var42 = var28.contains((java.lang.Object)var40);
    var2.orphanAll((java.util.List)var28);
    var28.clear();
    int var45 = 1;
    org.jhotdraw.contrib.html.StandardDisposableResourceHolder var46 = new org.jhotdraw.contrib.html.StandardDisposableResourceHolder();
    var46.resetDelay();
    org.jhotdraw.figures.TextFigure var48 = new org.jhotdraw.figures.TextFigure();
    org.jhotdraw.framework.Handle var49 = org.jhotdraw.standard.BoxHandleKit.northEast((org.jhotdraw.framework.Figure)var48);
    var46.setResource((java.lang.Object)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var28.add(var45, (java.lang.Object)var46);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test469() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    javax.swing.JRootPane var3 = var1.getRootPane();
    javax.swing.JLayeredPane var4 = var1.getLayeredPane();
    int var5 = (-1);
    int var6 = 0;
    org.jhotdraw.standard.StandardDrawingView var7 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var5, var6);
    int var8 = 0;
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var8, var9);
    org.jhotdraw.util.RedoCommand var11 = new org.jhotdraw.util.RedoCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    int var12 = 10;
    int var13 = 10;
    org.jhotdraw.contrib.zoom.ZoomDrawingView var14 = new org.jhotdraw.contrib.zoom.ZoomDrawingView((org.jhotdraw.framework.DrawingEditor)var1, var12, var13);
    int var15 = 10;
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.zoom(var15, var16, var17, var18);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test470() throws Throwable {

    org.jhotdraw.figures.GroupFigure var0 = new org.jhotdraw.figures.GroupFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.ChopPolygonConnector var2 = new org.jhotdraw.contrib.ChopPolygonConnector((org.jhotdraw.framework.Figure)var1);
    org.jhotdraw.standard.StandardDrawing var3 = new org.jhotdraw.standard.StandardDrawing();
    int var4 = var1.getLayer((org.jhotdraw.framework.Figure)var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JRootPane var7 = var5.getRootPane();
    javax.swing.JLayeredPane var8 = var5.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JRootPane var11 = var9.getRootPane();
    javax.swing.JLayeredPane var12 = var9.getLayeredPane();
    int var13 = (-1);
    int var14 = 0;
    org.jhotdraw.standard.StandardDrawingView var15 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var9, var13, var14);
    java.awt.Component var16 = var5.add((java.awt.Component)var15);
    boolean var17 = var15.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var18 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var19 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var20 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var18, (org.jhotdraw.framework.FigureChangeListener)var19);
    java.awt.Dimension var21 = var18.size();
    var15.removeFromSelection((org.jhotdraw.framework.Figure)var18);
    var18.layout();
    java.lang.Object var24 = var18.clone();
    org.jhotdraw.framework.FigureChangeEvent var25 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var18);
    java.lang.Object var26 = var25.getSource();
    var3.figureInvalidated(var25);
    var0.figureChanged(var25);
    org.jhotdraw.framework.FigureEnumeration var29 = var0.figures();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test471() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.contrib.MDI_DrawApplication var36 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var37 = var36.isDoubleBuffered();
    javax.swing.JRootPane var38 = var36.getRootPane();
    javax.swing.JLayeredPane var39 = var36.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    java.awt.Component var47 = var36.add((java.awt.Component)var46);
    boolean var48 = var46.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var49 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var50 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var51 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var49, (org.jhotdraw.framework.FigureChangeListener)var50);
    java.awt.Dimension var52 = var49.size();
    var46.removeFromSelection((org.jhotdraw.framework.Figure)var49);
    var49.layout();
    java.lang.Object var55 = var49.clone();
    org.jhotdraw.framework.FigureChangeEvent var56 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var49);
    var35.toolDisabled((java.util.EventObject)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test472() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    java.lang.Character var3 = new java.lang.Character('a');
    var2.setMnemonic(var3);
    org.jhotdraw.contrib.MDI_DrawApplication var5 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var6 = var5.isDoubleBuffered();
    javax.swing.JMenu var7 = var5.createLookAndFeelMenu();
    java.lang.String var8 = var7.getName();
    boolean var9 = var2.isMenuComponent((java.awt.Component)var7);
    java.lang.Boolean var10 = new java.lang.Boolean(true);
    var2.setFocusTraversalPolicyProvider(var10);
    java.lang.Boolean var12 = new java.lang.Boolean(false);
    var2.setEnabled(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test473() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    java.awt.event.MouseMotionListener[] var2 = var0.getMouseMotionListeners();

  }

  public void test474() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    org.jhotdraw.framework.DrawingView var3 = org.jhotdraw.standard.NullDrawingView.getManagedDrawingView((org.jhotdraw.framework.DrawingEditor)var0);
    org.jhotdraw.standard.StandardDrawing var4 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    java.lang.Double var9 = new java.lang.Double((-1.0d));
    java.lang.Double var10 = new java.lang.Double(100.0d);
    java.lang.Double var11 = new java.lang.Double(1.0d);
    java.awt.Point var12 = org.jhotdraw.util.Geom.polarToPoint(var9, var10, var11);
    org.jhotdraw.contrib.DiamondFigure var13 = new org.jhotdraw.contrib.DiamondFigure(var8, var12);
    org.jhotdraw.framework.HandleEnumeration var14 = var13.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var15 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var17 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var15, (org.jhotdraw.framework.FigureChangeListener)var16);
    org.jhotdraw.framework.Figure var18 = var4.replace((org.jhotdraw.framework.Figure)var13, (org.jhotdraw.framework.Figure)var15);
    org.jhotdraw.framework.Handle var19 = org.jhotdraw.standard.BoxHandleKit.north(var18);
    org.jhotdraw.contrib.MDI_DrawApplication var20 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var21 = var20.isDoubleBuffered();
    javax.swing.JRootPane var22 = var20.getRootPane();
    javax.swing.JLayeredPane var23 = var20.getLayeredPane();
    int var24 = (-1);
    int var25 = 0;
    org.jhotdraw.standard.StandardDrawingView var26 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var20, var24, var25);
    var26.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var28 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var26.removeForeground((org.jhotdraw.framework.Painter)var28);
    org.jhotdraw.util.UndoableHandle var30 = new org.jhotdraw.util.UndoableHandle(var19, (org.jhotdraw.framework.DrawingView)var26);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    org.jhotdraw.contrib.MDI_DrawApplication var38 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var39 = var38.isDoubleBuffered();
    javax.swing.JRootPane var40 = var38.getRootPane();
    javax.swing.JLayeredPane var41 = var38.getLayeredPane();
    int var42 = (-1);
    int var43 = 0;
    org.jhotdraw.standard.StandardDrawingView var44 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var38, var42, var43);
    var44.clearSelection();
    java.awt.Color var46 = var44.getForeground();
    var37.setBackground(var46);
    org.jhotdraw.framework.FigureEnumeration var48 = var37.selectionZOrdered();
    var48.reset();
    var26.addToSelectionAll(var48);
    java.lang.Double var51 = new java.lang.Double((-1.0d));
    java.lang.Double var52 = new java.lang.Double(100.0d);
    java.lang.Double var53 = new java.lang.Double(1.0d);
    java.awt.Point var54 = org.jhotdraw.util.Geom.polarToPoint(var51, var52, var53);
    java.awt.Point var55 = var26.getLocation(var54);
    var26.disable();
    var0.setLocationRelativeTo((java.awt.Component)var26);
    java.lang.Float var58 = new java.lang.Float(10.0f);
    var26.setAlignmentY(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test475() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    boolean var2 = var0.isFocusTraversalPolicySet();
    java.lang.Long var3 = new java.lang.Long((-1L));
    int var4 = 10;
    int var5 = 100;
    int var6 = 100;
    int var7 = 100;
    var0.repaint(var3, var4, var5, var6, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test476() throws Throwable {

    org.jhotdraw.figures.PolyLineFigure var0 = new org.jhotdraw.figures.PolyLineFigure();
    int var1 = var0.getZValue();
    org.jhotdraw.figures.ShortestDistanceConnector var2 = new org.jhotdraw.figures.ShortestDistanceConnector((org.jhotdraw.framework.Figure)var0);
    java.lang.String var3 = "hi!";
    java.lang.Object var4 = var0.getAttribute(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test477() throws Throwable {

    int var0 = 1;
    int var1 = (-1);
    int var2 = 10;
    int var3 = (-1);
    int var4 = 100;
    int var5 = 1;
    double var6 = org.jhotdraw.util.Geom.distanceFromLine(var0, var1, var2, var3, var4, var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.7976931348623157E308d);

  }

  public void test478() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    boolean var12 = var10.getInheritsPopupMenu();
    boolean var13 = var10.requestDefaultFocus();
    int var14 = 100;
    int var15 = (-1);
    int var16 = 10;
    int var17 = 0;
    int var18 = 100;
    int var19 = (-1);
    int var20 = 1;
    int var21 = 1;
    java.awt.Point var22 = org.jhotdraw.util.Geom.intersect(var14, var15, var16, var17, var18, var19, var20, var21);
    boolean var23 = var10.contains(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test479() throws Throwable {

    org.jhotdraw.contrib.TextAreaFigure var0 = new org.jhotdraw.contrib.TextAreaFigure();
    int var1 = var0.overlayColumns();
    boolean var2 = var0.isTextDirty();
    org.jhotdraw.contrib.MDI_DrawApplication var3 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var4 = var3.isDoubleBuffered();
    javax.swing.JRootPane var5 = var3.getRootPane();
    javax.swing.JLayeredPane var6 = var3.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var7 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var8 = var7.isDoubleBuffered();
    javax.swing.JRootPane var9 = var7.getRootPane();
    javax.swing.JLayeredPane var10 = var7.getLayeredPane();
    int var11 = (-1);
    int var12 = 0;
    org.jhotdraw.standard.StandardDrawingView var13 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var7, var11, var12);
    java.awt.Component var14 = var3.add((java.awt.Component)var13);
    boolean var15 = var13.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var16 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var17 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var18 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var16, (org.jhotdraw.framework.FigureChangeListener)var17);
    java.awt.Dimension var19 = var16.size();
    var13.removeFromSelection((org.jhotdraw.framework.Figure)var16);
    var16.layout();
    java.lang.Object var22 = var16.clone();
    org.jhotdraw.framework.FigureChangeEvent var23 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var16);
    java.lang.Object var24 = var23.getSource();
    var0.figureInvalidated(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test480() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.lang.String var3 = var2.getUIClassID();
    java.awt.Insets var4 = var2.getInsets();
    java.awt.peer.ComponentPeer var5 = var2.getPeer();
    org.jhotdraw.contrib.MDI_DrawApplication var6 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var7 = var6.isDoubleBuffered();
    javax.swing.JMenu var8 = var6.createLookAndFeelMenu();
    java.lang.Character var9 = new java.lang.Character('a');
    var8.setMnemonic(var9);
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JMenu var13 = var11.createLookAndFeelMenu();
    java.lang.String var14 = var13.getName();
    boolean var15 = var8.isMenuComponent((java.awt.Component)var13);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    java.lang.String var19 = var18.getUIClassID();
    java.awt.Insets var20 = var18.getInsets();
    var13.setMargin(var20);
    var2.remove((java.awt.Component)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19.equals("RootPaneUI"));

  }

  public void test481() throws Throwable {

    org.jhotdraw.framework.Locator var0 = org.jhotdraw.standard.RelativeLocator.east();
    org.jhotdraw.standard.OffsetLocator var1 = new org.jhotdraw.standard.OffsetLocator(var0);

  }

  public void test482() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    boolean var2 = var0.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var3 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var4 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var5 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var3, (org.jhotdraw.framework.FigureChangeListener)var4);
    int var6 = var4.getZValue();
    java.lang.Object var7 = var4.clone();
    org.jhotdraw.standard.CreationTool var8 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var0, (org.jhotdraw.framework.Figure)var4);
    java.lang.String var9 = "hi!";
    java.lang.String var10 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var11 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var12 = var11.isDoubleBuffered();
    javax.swing.JRootPane var13 = var11.getRootPane();
    javax.swing.JLayeredPane var14 = var11.getLayeredPane();
    java.awt.Graphics var15 = var11.getGraphics();
    java.lang.Boolean var16 = new java.lang.Boolean(true);
    var11.setLocationByPlatform(var16);
    org.jhotdraw.standard.StandardDrawing var18 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var19 = new java.lang.Double((-1.0d));
    java.lang.Double var20 = new java.lang.Double(100.0d);
    java.lang.Double var21 = new java.lang.Double(1.0d);
    java.awt.Point var22 = org.jhotdraw.util.Geom.polarToPoint(var19, var20, var21);
    java.lang.Double var23 = new java.lang.Double((-1.0d));
    java.lang.Double var24 = new java.lang.Double(100.0d);
    java.lang.Double var25 = new java.lang.Double(1.0d);
    java.awt.Point var26 = org.jhotdraw.util.Geom.polarToPoint(var23, var24, var25);
    org.jhotdraw.contrib.DiamondFigure var27 = new org.jhotdraw.contrib.DiamondFigure(var22, var26);
    org.jhotdraw.framework.HandleEnumeration var28 = var27.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var29 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var30 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var31 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var29, (org.jhotdraw.framework.FigureChangeListener)var30);
    org.jhotdraw.framework.Figure var32 = var18.replace((org.jhotdraw.framework.Figure)var27, (org.jhotdraw.framework.Figure)var29);
    org.jhotdraw.framework.Handle var33 = org.jhotdraw.standard.BoxHandleKit.north(var32);
    org.jhotdraw.standard.HandleTracker var34 = new org.jhotdraw.standard.HandleTracker((org.jhotdraw.framework.DrawingEditor)var11, var33);
    org.jhotdraw.standard.ToolButton var35 = new org.jhotdraw.standard.ToolButton((org.jhotdraw.util.PaletteListener)var0, var9, var10, (org.jhotdraw.framework.Tool)var34);
    org.jhotdraw.figures.TextFigure var36 = new org.jhotdraw.figures.TextFigure();
    java.awt.Rectangle var37 = var36.textDisplayBox();
    org.jhotdraw.standard.StandardDrawing var38 = new org.jhotdraw.standard.StandardDrawing();
    int var39 = 1;
    int var40 = 1;
    org.jhotdraw.contrib.PolygonFigure var41 = new org.jhotdraw.contrib.PolygonFigure(var39, var40);
    org.jhotdraw.framework.FigureEnumeration var42 = var41.figures();
    java.awt.Rectangle var43 = var41.displayBox();
    int var44 = 1;
    int var45 = 1;
    org.jhotdraw.contrib.PolygonFigure var46 = new org.jhotdraw.contrib.PolygonFigure(var44, var45);
    org.jhotdraw.framework.FigureEnumeration var47 = var46.figures();
    java.awt.Rectangle var48 = var46.displayBox();
    org.jhotdraw.framework.Figure var49 = var38.findFigure(var43, (org.jhotdraw.framework.Figure)var46);
    int var50 = 100;
    int var51 = (-1);
    java.lang.Double var52 = new java.lang.Double((-1.0d));
    java.lang.Double var53 = new java.lang.Double(100.0d);
    java.lang.Double var54 = new java.lang.Double(1.0d);
    java.awt.Point var55 = org.jhotdraw.util.Geom.polarToPoint(var52, var53, var54);
    java.lang.Double var56 = new java.lang.Double((-1.0d));
    java.lang.Double var57 = new java.lang.Double(100.0d);
    java.lang.Double var58 = new java.lang.Double(1.0d);
    java.awt.Point var59 = org.jhotdraw.util.Geom.polarToPoint(var56, var57, var58);
    org.jhotdraw.contrib.DiamondFigure var60 = new org.jhotdraw.contrib.DiamondFigure(var55, var59);
    org.jhotdraw.framework.Figure var61 = var38.findFigureInsideWithout(var50, var51, (org.jhotdraw.framework.Figure)var60);
    java.util.Iterator var62 = var38.drawingChangeListeners();
    org.jhotdraw.contrib.MDI_DrawApplication var63 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var64 = var63.isDoubleBuffered();
    javax.swing.JRootPane var65 = var63.getRootPane();
    javax.swing.JLayeredPane var66 = var63.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var67 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var68 = var67.isDoubleBuffered();
    javax.swing.JRootPane var69 = var67.getRootPane();
    javax.swing.JLayeredPane var70 = var67.getLayeredPane();
    int var71 = (-1);
    int var72 = 0;
    org.jhotdraw.standard.StandardDrawingView var73 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var67, var71, var72);
    java.awt.Component var74 = var63.add((java.awt.Component)var73);
    boolean var75 = var73.getInheritsPopupMenu();
    org.jhotdraw.contrib.GraphicalCompositeFigure var76 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var77 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var78 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var76, (org.jhotdraw.framework.FigureChangeListener)var77);
    java.awt.Dimension var79 = var76.size();
    var73.removeFromSelection((org.jhotdraw.framework.Figure)var76);
    var76.layout();
    java.lang.Object var82 = var76.clone();
    org.jhotdraw.framework.FigureChangeEvent var83 = new org.jhotdraw.framework.FigureChangeEvent((org.jhotdraw.framework.Figure)var76);
    var38.figureRequestUpdate(var83);
    java.awt.Rectangle var85 = var83.getInvalidatedRectangle();
    var36.figureRequestUpdate(var83);
    var35.toolActivated((java.util.EventObject)var83);
    var35.select();
    java.awt.Font var89 = org.jhotdraw.figures.TextFigure.createCurrentFont();
    java.awt.FontMetrics var90 = var35.getFontMetrics(var89);
    boolean var91 = var35.isRolloverEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test483() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JMenu var2 = var0.createLookAndFeelMenu();
    javax.swing.Icon var3 = var2.getRolloverIcon();
    java.lang.String var4 = "hi!";
    var2.setText(var4);
    boolean var6 = var2.isLightweight();
    boolean var7 = var2.isPopupMenuVisible();
    boolean var8 = var2.isPaintingForPrint();
    org.jhotdraw.contrib.MDI_DrawApplication var9 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var10 = var9.isDoubleBuffered();
    javax.swing.JMenu var11 = var9.createLookAndFeelMenu();
    java.lang.Character var12 = new java.lang.Character('a');
    var11.setMnemonic(var12);
    org.jhotdraw.contrib.MDI_DrawApplication var14 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var15 = var14.isDoubleBuffered();
    javax.swing.JMenu var16 = var14.createLookAndFeelMenu();
    java.lang.String var17 = var16.getName();
    boolean var18 = var11.isMenuComponent((java.awt.Component)var16);
    java.lang.Boolean var19 = new java.lang.Boolean(true);
    var16.setBorderPainted(var19);
    javax.swing.JMenuItem var21 = var2.add((javax.swing.JMenuItem)var16);
    var16.removeNotify();
    java.lang.Boolean var23 = new java.lang.Boolean(false);
    var16.setEnabled(var23);
    org.jhotdraw.contrib.MDI_DrawApplication var25 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var26 = var25.isDoubleBuffered();
    javax.swing.JMenu var27 = var25.createLookAndFeelMenu();
    java.lang.String var28 = var27.getName();
    java.lang.String var29 = "";
    int var30 = 100;
    var27.insert(var29, var30);
    javax.swing.JMenuItem var32 = var16.add((javax.swing.JMenuItem)var27);
    int var33 = (-1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var16.setVerticalAlignment(var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == null);

  }

  public void test484() throws Throwable {

    int var0 = 0;
    java.lang.String var1 = org.jhotdraw.util.ColorMap.name(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1.equals("Black"));

  }

  public void test485() throws Throwable {

    int var0 = 100;
    int var1 = (-1);
    int var2 = 10;
    int var3 = 0;
    int var4 = 100;
    int var5 = (-1);
    int var6 = 1;
    int var7 = 1;
    java.awt.Point var8 = org.jhotdraw.util.Geom.intersect(var0, var1, var2, var3, var4, var5, var6, var7);
    org.jhotdraw.figures.ArrowTip var9 = new org.jhotdraw.figures.ArrowTip();
    int var10 = 1;
    int var11 = 1;
    int var12 = 10;
    int var13 = 0;
    java.awt.Polygon var14 = var9.outline(var10, var11, var12, var13);
    org.jhotdraw.standard.StandardDrawing var15 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var16 = new java.lang.Double((-1.0d));
    java.lang.Double var17 = new java.lang.Double(100.0d);
    java.lang.Double var18 = new java.lang.Double(1.0d);
    java.awt.Point var19 = org.jhotdraw.util.Geom.polarToPoint(var16, var17, var18);
    java.lang.Double var20 = new java.lang.Double((-1.0d));
    java.lang.Double var21 = new java.lang.Double(100.0d);
    java.lang.Double var22 = new java.lang.Double(1.0d);
    java.awt.Point var23 = org.jhotdraw.util.Geom.polarToPoint(var20, var21, var22);
    org.jhotdraw.contrib.DiamondFigure var24 = new org.jhotdraw.contrib.DiamondFigure(var19, var23);
    org.jhotdraw.framework.HandleEnumeration var25 = var24.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var26 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var27 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var28 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var26, (org.jhotdraw.framework.FigureChangeListener)var27);
    org.jhotdraw.framework.Figure var29 = var15.replace((org.jhotdraw.framework.Figure)var24, (org.jhotdraw.framework.Figure)var26);
    org.jhotdraw.framework.Handle var30 = org.jhotdraw.standard.BoxHandleKit.north(var29);
    org.jhotdraw.contrib.MDI_DrawApplication var31 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var32 = var31.isDoubleBuffered();
    javax.swing.JRootPane var33 = var31.getRootPane();
    javax.swing.JLayeredPane var34 = var31.getLayeredPane();
    int var35 = (-1);
    int var36 = 0;
    org.jhotdraw.standard.StandardDrawingView var37 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var31, var35, var36);
    var37.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var39 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var37.removeForeground((org.jhotdraw.framework.Painter)var39);
    org.jhotdraw.util.UndoableHandle var41 = new org.jhotdraw.util.UndoableHandle(var30, (org.jhotdraw.framework.DrawingView)var37);
    org.jhotdraw.contrib.MDI_DrawApplication var42 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var43 = var42.isDoubleBuffered();
    javax.swing.JRootPane var44 = var42.getRootPane();
    javax.swing.JLayeredPane var45 = var42.getLayeredPane();
    int var46 = (-1);
    int var47 = 0;
    org.jhotdraw.standard.StandardDrawingView var48 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var42, var46, var47);
    org.jhotdraw.contrib.MDI_DrawApplication var49 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var50 = var49.isDoubleBuffered();
    javax.swing.JRootPane var51 = var49.getRootPane();
    javax.swing.JLayeredPane var52 = var49.getLayeredPane();
    int var53 = (-1);
    int var54 = 0;
    org.jhotdraw.standard.StandardDrawingView var55 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var49, var53, var54);
    var55.clearSelection();
    java.awt.Color var57 = var55.getForeground();
    var48.setBackground(var57);
    org.jhotdraw.framework.FigureEnumeration var59 = var48.selectionZOrdered();
    var59.reset();
    var37.addToSelectionAll(var59);
    java.lang.Double var62 = new java.lang.Double((-1.0d));
    java.lang.Double var63 = new java.lang.Double(100.0d);
    java.lang.Double var64 = new java.lang.Double(1.0d);
    java.awt.Point var65 = org.jhotdraw.util.Geom.polarToPoint(var62, var63, var64);
    java.awt.Point var66 = var37.getLocation(var65);
    java.awt.Point var67 = org.jhotdraw.contrib.PolygonFigure.chop(var14, var65);
    java.lang.Double var68 = new java.lang.Double((-1.0d));
    java.lang.Double var69 = new java.lang.Double(100.0d);
    java.lang.Double var70 = new java.lang.Double(1.0d);
    java.awt.Point var71 = org.jhotdraw.util.Geom.polarToPoint(var68, var69, var70);
    java.awt.Point var72 = org.jhotdraw.contrib.PolygonFigure.chop(var14, var71);
    org.jhotdraw.util.Bounds var73 = new org.jhotdraw.util.Bounds((java.awt.geom.Point2D)var8, (java.awt.geom.Point2D)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test486() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    int var4 = (-1);
    int var5 = 0;
    org.jhotdraw.standard.StandardDrawingView var6 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var0, var4, var5);
    var6.clearSelection();
    org.jhotdraw.util.UndoableAdapter var8 = new org.jhotdraw.util.UndoableAdapter((org.jhotdraw.framework.DrawingView)var6);
    java.awt.Dimension var9 = var6.getPreferredSize();
    org.jhotdraw.contrib.MDI_DrawApplication var10 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var11 = var10.isDoubleBuffered();
    boolean var12 = var10.isBackgroundSet();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var14 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var15 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var13, (org.jhotdraw.framework.FigureChangeListener)var14);
    int var16 = var14.getZValue();
    java.lang.Object var17 = var14.clone();
    org.jhotdraw.standard.CreationTool var18 = new org.jhotdraw.standard.CreationTool((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.Figure)var14);
    int var19 = 1;
    int var20 = 0;
    org.jhotdraw.standard.StandardDrawingView var21 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var10, var19, var20);
    var6.removeFigureSelectionListener((org.jhotdraw.framework.FigureSelectionListener)var10);
    org.jhotdraw.contrib.MDI_DrawApplication var23 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var24 = var23.isDoubleBuffered();
    javax.swing.JRootPane var25 = var23.getRootPane();
    javax.swing.JLayeredPane var26 = var23.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var27 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var28 = var27.isDoubleBuffered();
    javax.swing.JRootPane var29 = var27.getRootPane();
    javax.swing.JLayeredPane var30 = var27.getLayeredPane();
    int var31 = (-1);
    int var32 = 0;
    org.jhotdraw.standard.StandardDrawingView var33 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var27, var31, var32);
    java.awt.Component var34 = var23.add((java.awt.Component)var33);
    org.jhotdraw.framework.Tool var35 = var33.tool();
    org.jhotdraw.contrib.dnd.JHDDropTargetListener var36 = new org.jhotdraw.contrib.dnd.JHDDropTargetListener((org.jhotdraw.framework.DrawingEditor)var10, (org.jhotdraw.framework.DrawingView)var33);
    var10.show();
    int var38 = 100;
    java.lang.Double var39 = new java.lang.Double((-1.0d));
    java.lang.Double var40 = new java.lang.Double(100.0d);
    java.lang.Double var41 = new java.lang.Double(1.0d);
    java.awt.Point var42 = org.jhotdraw.util.Geom.polarToPoint(var39, var40, var41);
    org.jhotdraw.util.PaletteLayout var43 = new org.jhotdraw.util.PaletteLayout(var38, var42);
    var10.setLayout((java.awt.LayoutManager)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == null);

  }

  public void test487() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    javax.swing.JLayeredPane var7 = var4.getLayeredPane();
    int var8 = (-1);
    int var9 = 0;
    org.jhotdraw.standard.StandardDrawingView var10 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var4, var8, var9);
    java.awt.Component var11 = var0.add((java.awt.Component)var10);
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var13 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var14 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var12, (org.jhotdraw.framework.FigureChangeListener)var13);
    java.awt.Dimension var15 = var12.size();
    var0.setPreferredSize(var15);
    org.jhotdraw.samples.javadraw.URLTool var17 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var0);
    var0.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test488() throws Throwable {

    org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter var0 = new org.jhotdraw.contrib.html.EllipseFigureGeometricAdapter();
    int var1 = 1;
    int var2 = 0;
    boolean var3 = var0.containsPoint(var1, var2);
    int var4 = 100;
    int var5 = (-1);
    int var6 = 10;
    int var7 = 0;
    int var8 = 100;
    int var9 = (-1);
    int var10 = 1;
    int var11 = 1;
    java.awt.Point var12 = org.jhotdraw.util.Geom.intersect(var4, var5, var6, var7, var8, var9, var10, var11);
    java.lang.Double var13 = new java.lang.Double((-1.0d));
    java.lang.Double var14 = new java.lang.Double(100.0d);
    java.lang.Double var15 = new java.lang.Double(1.0d);
    java.awt.Point var16 = org.jhotdraw.util.Geom.polarToPoint(var13, var14, var15);
    var0.displayBox(var12, var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test489() throws Throwable {

    org.jhotdraw.figures.BorderDecorator var0 = new org.jhotdraw.figures.BorderDecorator();
    org.jhotdraw.standard.StandardDrawing var1 = new org.jhotdraw.standard.StandardDrawing();
    int var2 = 1;
    int var3 = 1;
    org.jhotdraw.contrib.PolygonFigure var4 = new org.jhotdraw.contrib.PolygonFigure(var2, var3);
    org.jhotdraw.framework.FigureEnumeration var5 = var4.figures();
    java.awt.Rectangle var6 = var4.displayBox();
    int var7 = 1;
    int var8 = 1;
    org.jhotdraw.contrib.PolygonFigure var9 = new org.jhotdraw.contrib.PolygonFigure(var7, var8);
    org.jhotdraw.framework.FigureEnumeration var10 = var9.figures();
    java.awt.Rectangle var11 = var9.displayBox();
    org.jhotdraw.framework.Figure var12 = var1.findFigure(var6, (org.jhotdraw.framework.Figure)var9);
    int var13 = 10;
    org.jhotdraw.util.collections.jdk11.ListWrapper var14 = new org.jhotdraw.util.collections.jdk11.ListWrapper(var13);
    var1.orphanAll((java.util.List)var14);
    int var16 = 100;
    int var17 = (-1);
    int var18 = 10;
    int var19 = 0;
    int var20 = 100;
    int var21 = (-1);
    int var22 = 1;
    int var23 = 1;
    java.awt.Point var24 = org.jhotdraw.util.Geom.intersect(var16, var17, var18, var19, var20, var21, var22, var23);
    int var25 = 100;
    int var26 = (-1);
    int var27 = 10;
    int var28 = 0;
    int var29 = 100;
    int var30 = (-1);
    int var31 = 1;
    int var32 = 1;
    java.awt.Point var33 = org.jhotdraw.util.Geom.intersect(var25, var26, var27, var28, var29, var30, var31, var32);
    var1.basicDisplayBox(var24, var33);
    var0.decorate((org.jhotdraw.framework.Figure)var1);
    java.awt.Rectangle var36 = var0.displayBox();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == null);

  }

  public void test490() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    javax.swing.JRootPane var2 = var0.getRootPane();
    javax.swing.JLayeredPane var3 = var0.getLayeredPane();
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = var6.getUIClassID();
    java.awt.Insets var8 = var6.getInsets();
    int var9 = (-1);
    var3.setPosition((java.awt.Component)var6, var9);
    boolean var11 = var3.isDisplayable();
    java.lang.Boolean var12 = new java.lang.Boolean(true);
    var3.enable(var12);
    java.lang.String var14 = var3.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7.equals("RootPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == null);

  }

  public void test491() throws Throwable {

    int var0 = (-1);
    org.jhotdraw.util.PaletteLayout var1 = new org.jhotdraw.util.PaletteLayout(var0);
    org.jhotdraw.samples.javadraw.JavaDrawApplet var2 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var2.start();
    org.jhotdraw.framework.Tool var4 = var2.tool();
    var2.transferFocus();
    var1.removeLayoutComponent((java.awt.Component)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test492() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    org.jhotdraw.framework.Handle var15 = org.jhotdraw.standard.BoxHandleKit.north(var14);
    org.jhotdraw.contrib.MDI_DrawApplication var16 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var17 = var16.isDoubleBuffered();
    javax.swing.JRootPane var18 = var16.getRootPane();
    javax.swing.JLayeredPane var19 = var16.getLayeredPane();
    int var20 = (-1);
    int var21 = 0;
    org.jhotdraw.standard.StandardDrawingView var22 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var16, var20, var21);
    var22.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var24 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var22.removeForeground((org.jhotdraw.framework.Painter)var24);
    org.jhotdraw.util.UndoableHandle var26 = new org.jhotdraw.util.UndoableHandle(var15, (org.jhotdraw.framework.DrawingView)var22);
    org.jhotdraw.framework.Cursor var27 = var26.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test493() throws Throwable {

    org.jhotdraw.contrib.GraphicalCompositeFigure var0 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var1 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var2 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var0, (org.jhotdraw.framework.FigureChangeListener)var1);
    java.awt.Dimension var3 = var0.size();
    org.jhotdraw.framework.Locator var4 = org.jhotdraw.standard.RelativeLocator.east();
    org.jhotdraw.standard.LocatorConnector var5 = new org.jhotdraw.standard.LocatorConnector((org.jhotdraw.framework.Figure)var0, var4);
    java.awt.Rectangle var6 = var5.displayBox();

  }

  public void test494() throws Throwable {

    org.jhotdraw.samples.javadraw.JavaDrawApplet var0 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var0.start();
    org.jhotdraw.framework.Tool var2 = var0.tool();
    javax.swing.TransferHandler var3 = var0.getTransferHandler();
    java.awt.Graphics var4 = var0.getGraphics();
    int var5 = 10;
    int var6 = (-1);
    var0.resize(var5, var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == null);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == null);

  }

  public void test495() throws Throwable {

    java.lang.String var0 = "";
    org.jhotdraw.samples.javadraw.JavaDrawApplet var1 = new org.jhotdraw.samples.javadraw.JavaDrawApplet();
    var1.start();
    org.jhotdraw.standard.CopyCommand var3 = new org.jhotdraw.standard.CopyCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    var3.dispose();
    java.lang.String var5 = "";
    org.jhotdraw.util.CommandMenu var6 = new org.jhotdraw.util.CommandMenu(var5);
    var3.addCommandListener((org.jhotdraw.util.CommandListener)var6);

  }

  public void test496() throws Throwable {

    int var0 = 10;
    org.jhotdraw.util.UndoManager var1 = new org.jhotdraw.util.UndoManager(var0);

  }

  public void test497() throws Throwable {

    org.jhotdraw.standard.StandardDrawing var0 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var1 = new java.lang.Double((-1.0d));
    java.lang.Double var2 = new java.lang.Double(100.0d);
    java.lang.Double var3 = new java.lang.Double(1.0d);
    java.awt.Point var4 = org.jhotdraw.util.Geom.polarToPoint(var1, var2, var3);
    java.lang.Double var5 = new java.lang.Double((-1.0d));
    java.lang.Double var6 = new java.lang.Double(100.0d);
    java.lang.Double var7 = new java.lang.Double(1.0d);
    java.awt.Point var8 = org.jhotdraw.util.Geom.polarToPoint(var5, var6, var7);
    org.jhotdraw.contrib.DiamondFigure var9 = new org.jhotdraw.contrib.DiamondFigure(var4, var8);
    org.jhotdraw.framework.HandleEnumeration var10 = var9.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var11 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var12 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var13 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var11, (org.jhotdraw.framework.FigureChangeListener)var12);
    org.jhotdraw.framework.Figure var14 = var0.replace((org.jhotdraw.framework.Figure)var9, (org.jhotdraw.framework.Figure)var11);
    int var15 = 10;
    org.jhotdraw.framework.Locator var16 = org.jhotdraw.contrib.PolygonFigure.locator(var15);
    org.jhotdraw.standard.LocatorConnector var17 = new org.jhotdraw.standard.LocatorConnector((org.jhotdraw.framework.Figure)var9, var16);

  }

  public void test498() throws Throwable {

    org.jhotdraw.contrib.MDI_DrawApplication var0 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var1 = var0.isDoubleBuffered();
    java.awt.Container var2 = var0.getFocusCycleRootAncestor();
    java.lang.Boolean var3 = new java.lang.Boolean(false);
    var0.setFocusCycleRoot(var3);
    java.lang.Boolean var5 = new java.lang.Boolean(false);
    var0.setFocusCycleRoot(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == null);

  }

  public void test499() throws Throwable {

    int var0 = 1;
    int var1 = 1;
    org.jhotdraw.contrib.PolygonFigure var2 = new org.jhotdraw.contrib.PolygonFigure(var0, var1);
    java.lang.String var3 = "";
    org.jhotdraw.contrib.MDI_DrawApplication var4 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var5 = var4.isDoubleBuffered();
    javax.swing.JRootPane var6 = var4.getRootPane();
    java.lang.String var7 = "hi!";
    java.lang.Long var8 = new java.lang.Long(100L);
    java.lang.Long var9 = new java.lang.Long(1L);
    var6.firePropertyChange(var7, var8, var9);
    int var11 = var6.getX();
    var2.setAttribute(var3, (java.lang.Object)var11);
    org.jhotdraw.standard.StandardDrawing var13 = new org.jhotdraw.standard.StandardDrawing();
    java.lang.Double var14 = new java.lang.Double((-1.0d));
    java.lang.Double var15 = new java.lang.Double(100.0d);
    java.lang.Double var16 = new java.lang.Double(1.0d);
    java.awt.Point var17 = org.jhotdraw.util.Geom.polarToPoint(var14, var15, var16);
    java.lang.Double var18 = new java.lang.Double((-1.0d));
    java.lang.Double var19 = new java.lang.Double(100.0d);
    java.lang.Double var20 = new java.lang.Double(1.0d);
    java.awt.Point var21 = org.jhotdraw.util.Geom.polarToPoint(var18, var19, var20);
    org.jhotdraw.contrib.DiamondFigure var22 = new org.jhotdraw.contrib.DiamondFigure(var17, var21);
    org.jhotdraw.framework.HandleEnumeration var23 = var22.handles();
    org.jhotdraw.contrib.GraphicalCompositeFigure var24 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.contrib.GraphicalCompositeFigure var25 = new org.jhotdraw.contrib.GraphicalCompositeFigure();
    org.jhotdraw.framework.FigureChangeListener var26 = org.jhotdraw.standard.FigureChangeEventMulticaster.add((org.jhotdraw.framework.FigureChangeListener)var24, (org.jhotdraw.framework.FigureChangeListener)var25);
    org.jhotdraw.framework.Figure var27 = var13.replace((org.jhotdraw.framework.Figure)var22, (org.jhotdraw.framework.Figure)var24);
    org.jhotdraw.framework.Handle var28 = org.jhotdraw.standard.BoxHandleKit.north(var27);
    org.jhotdraw.contrib.MDI_DrawApplication var29 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var30 = var29.isDoubleBuffered();
    javax.swing.JRootPane var31 = var29.getRootPane();
    javax.swing.JLayeredPane var32 = var29.getLayeredPane();
    int var33 = (-1);
    int var34 = 0;
    org.jhotdraw.standard.StandardDrawingView var35 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var29, var33, var34);
    var35.clearSelection();
    org.jhotdraw.contrib.ClippingUpdateStrategy var37 = new org.jhotdraw.contrib.ClippingUpdateStrategy();
    var35.removeForeground((org.jhotdraw.framework.Painter)var37);
    org.jhotdraw.util.UndoableHandle var39 = new org.jhotdraw.util.UndoableHandle(var28, (org.jhotdraw.framework.DrawingView)var35);
    org.jhotdraw.contrib.MDI_DrawApplication var40 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var41 = var40.isDoubleBuffered();
    javax.swing.JRootPane var42 = var40.getRootPane();
    javax.swing.JLayeredPane var43 = var40.getLayeredPane();
    int var44 = (-1);
    int var45 = 0;
    org.jhotdraw.standard.StandardDrawingView var46 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var40, var44, var45);
    org.jhotdraw.contrib.MDI_DrawApplication var47 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var48 = var47.isDoubleBuffered();
    javax.swing.JRootPane var49 = var47.getRootPane();
    javax.swing.JLayeredPane var50 = var47.getLayeredPane();
    int var51 = (-1);
    int var52 = 0;
    org.jhotdraw.standard.StandardDrawingView var53 = new org.jhotdraw.standard.StandardDrawingView((org.jhotdraw.framework.DrawingEditor)var47, var51, var52);
    var53.clearSelection();
    java.awt.Color var55 = var53.getForeground();
    var46.setBackground(var55);
    org.jhotdraw.framework.FigureEnumeration var57 = var46.selectionZOrdered();
    var57.reset();
    var35.addToSelectionAll(var57);
    java.lang.Double var60 = new java.lang.Double((-1.0d));
    java.lang.Double var61 = new java.lang.Double(100.0d);
    java.lang.Double var62 = new java.lang.Double(1.0d);
    java.awt.Point var63 = org.jhotdraw.util.Geom.polarToPoint(var60, var61, var62);
    java.awt.Point var64 = var35.getLocation(var63);
    java.awt.Point var65 = var2.chop(var64);
    int var66 = 10;
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.removePointAt(var66);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test500() throws Throwable {

    java.lang.String var0 = "hi!";
    org.jhotdraw.contrib.MDI_DrawApplication var1 = new org.jhotdraw.contrib.MDI_DrawApplication();
    boolean var2 = var1.isDoubleBuffered();
    org.jhotdraw.samples.javadraw.URLTool var3 = new org.jhotdraw.samples.javadraw.URLTool((org.jhotdraw.framework.DrawingEditor)var1);
    boolean var4 = var1.isCursorSet();
    org.jhotdraw.standard.SendToBackCommand var5 = new org.jhotdraw.standard.SendToBackCommand(var0, (org.jhotdraw.framework.DrawingEditor)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

}
